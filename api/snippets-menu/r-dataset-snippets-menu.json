{
  "name": "All of Us Dataset Builder R snippets",
  "sub-menu": [
    {
      "external-link": "https://aousupporthelp.zendesk.com/hc/en-us/articles/360039856791-How-to-use-code-snippets-in-Jupyter-Notebooks",
      "name": "Documentation"
    },
    "---",
    {
      "name": "(1) Setup",
      "snippet": "lapply(c('viridis', 'ggthemes', 'skimr'),\n       function(pkg_name) { if(! pkg_name %in% installed.packages()) { install.packages(pkg_name)} } )\n\nlibrary(viridis)    # A nice color scheme for plots.\nlibrary(ggthemes)   # Common themes to change the look and feel of plots.\nlibrary(scales)     # Graphical scales map data to aesthetics in plots.\nlibrary(skimr)      # Better summaries of data.\nlibrary(lubridate)  # Date library from the tidyverse.\nlibrary(tidyverse)  # Data wrangling packages.\nlibrary(bigrquery)  # Data extraction from Google BigQuery\n\n## Plot setup.\ntheme_set(theme_bw(base_size = 14)) # Default theme for plots.\n\n#' Returns a data frame with a y position and a label, for use annotating ggplot boxplots.\n#'\n#' @param d A data frame.\n#' @return A data frame with column y as max and column label as length.\nget_boxplot_fun_data <- function(df) {\n  return(data.frame(y = max(df), label = stringr::str_c('N = ', length(df))))\n}\n"
    },
    {
      "name": "(2) Basic operations",
      "sub-menu": [
        {
          "name": "join_dataframes.R",
          "snippet": "# Use snippet 'join_dataframes' to join together two dataframes.\n# It assumes the 'Setup' snippet has been executed.\n#\n# In the example below, it joins Demographics '_person_df' and Measurements '_measurement_df' using\n# any columns they have in common, which in this case should only be 'person_id'.\n#\n# See also https://dplyr.tidyverse.org/reference/join.html and https://r4ds.had.co.nz/relational-data.html#understanding-joins\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) TO MATCH YOURS FROM DATASET BUILDER] -----\nmeasurement_df <- inner_join(YOUR_DATASET_NAME_person_df,\n                             YOUR_DATASET_NAME_measurement_df) %>%\n  mutate_if(is.list, as.character)  # Convert column type list as character.\n\ndim(measurement_df)\n"
        },
        {
          "name": "summarize_a_dataframe.R",
          "snippet": "# Use snippet 'summarize_a_dataframe' to display summary statistics for a dataframe.\n# It assumes snippet 'Setup' has been executed.\n# See also https://www.rdocumentation.org/packages/skimr/versions/1.0.7/topics/skim\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) TO MATCH YOURS FROM DATASET BUILDER] -----\nprint(skim(YOUR_DATASET_NAME_person_df))\n"
        },
        {
          "name": "add_age_to_demographics.R",
          "snippet": "# Use snippet 'add_age_to_demographics' to calculate the age of people in your demographics.\n# It assumes the 'Setup' snippet has been executed.\n# It also assumes that you got your demographics dataframe from Dataset Builder\n\n# Note: This snippet calculates current age and does not take into account whether the person is already dead\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) `YOUR_DATASET_NAME_person_df` TO MATCH YOURS FROM DATASET BUILDER] -----\nYOUR_DATASET_NAME_person_df <- YOUR_DATASET_NAME_person_df %>%\n                mutate_if(is.list, as.character) %>%\n                mutate(age = year(today()) - year(YOUR_DATASET_NAME_person_df$date_of_birth))\n"
        }
      ]
    },
    {
      "name": "(3) Plot measurements",
      "sub-menu": [
        {
          "name": "measurement_by_age_and_sex_at_birth.ggplot",
          "snippet": "# Use snippet 'measurement_by_age_and_sex_at_birth' to plot joined demographics and measurements dataframes.\n# This plot assumes 'measurement_df' was created using snippet 'Basic operations -> join_dataframes' to\n# join together demographics and measurements dataframes.\n# See also https://r4ds.had.co.nz/data-visualisation.html\n\n\noptions(repr.plot.height = 16, repr.plot.width = 16)\n\n# There could be many different measurements in the dataframe. By default, plot the first one.\nmeasurement_to_plot <- unique(measurement_df$standard_concept_name)[1]\n\nmeasurement_df %>%\n    filter(standard_concept_name == measurement_to_plot) %>%\n    filter(!unit_concept_name %in% c('No matching concept', 'NULL')) %>%\n    filter(sex_at_birth != 'No matching concept') %>%\n    filter(value_as_number < 9999999) %>%  # Get rid of nonsensical outliers.\n    mutate(age_at_measurement = year(as.period(interval(start = date_of_birth, end = measurement_datetime)))) %>%\n    ggplot(aes(x = cut_width(age_at_measurement, width = 5, boundary = 0), y = value_as_number)) +\n    geom_boxplot() +\n    stat_summary(fun.data = get_boxplot_fun_data, geom = 'text', size = 2,\n                 position = position_dodge(width = 0.9), vjust = -0.8) +\n#    scale_y_log10() +  # Uncomment if the data looks skewed.\n    coord_flip() +\n    facet_wrap(standard_concept_name + unit_concept_name ~ sex_at_birth, ncol = 2, scales = 'free') +\n    xlab('age group') +\n    labs(title = str_glue('Numeric values of measurements by age and sex_at_birth'), caption = 'Source: All Of Us Data')\n"
        },
        {
          "name": "measurement_by_sex_at_birth.ggplot",
          "snippet": "# Use snippet 'measurement_by_sex_at_birth' to plot joined demographics and measurements dataframes.\n# This plot assumes 'measurement_df' was created using snippet 'Basic operations -> join_dataframes' to\n# join together demographics and measurements dataframes.\n# See also https://r4ds.had.co.nz/data-visualisation.html\n\n\noptions(repr.plot.height = 10, repr.plot.width = 16)\n\n# There could be many different measurements in the dataframe. By default, plot the first one.\nmeasurement_to_plot <- unique(measurement_df$standard_concept_name)[1]\n\nmeasurement_df %>%\n    filter(standard_concept_name == measurement_to_plot) %>%\n    filter(!unit_concept_name %in% c('No matching concept', 'NULL')) %>%\n    filter(value_as_number < 9999999) %>%  # Get rid of nonsensical outliers.\n    ggplot(aes(x = sex_at_birth, y = value_as_number)) +\n    geom_boxplot() +\n    stat_summary(fun.data = get_boxplot_fun_data, geom = 'text', size = 4,\n                 position = position_dodge(width = 0.9), vjust = -0.8) +\n#    scale_y_log10() +  # Uncomment if the data looks skewed.\n    facet_wrap(standard_concept_name ~ unit_concept_name, ncol = 2, scales = 'free') +\n    labs(title = str_glue('Numeric values of measurements, by sex_at_birth'), caption = 'Source: All Of Us Data') +\n    theme(axis.text.x = element_text(angle=25, hjust=1))\n"
        }
      ]
    },
    {
      "name": "(4) Summarize survey data",
      "sub-menu": [
        {
          "name": "summarize_a_survey_module.R",
          "snippet": "# Use snippet 'summarize_a_survey_module' to print a table of participant counts by question in a module\n# The snippet assumes that a dataframe containing survey questions and answers already exists\n\n# Update the next 3 lines\n\nsurvey_df <- YOUR_DATASET_NAME_survey_df\nmodule_name <- 'The Basics'\ndenominator <- NULL\n\n####################################################################################\n#                           DON'T CHANGE FROM HERE\n####################################################################################\nsummarize_a_module <- function(df, module=NULL, denominator=NULL) {\n    if (!is.null(module)){\n        df <- df %>% filter(tolower(survey) == tolower(module))\n    }\n    data <- df %>% group_by(survey, question_concept_id, question) %>%\n               summarize(n_participant = n_distinct(person_id))\n    if (!is.null(denominator)) {\n        data <- data %>% mutate(response_rate = paste0(round(100*n_participant/denominator,2),'%'))\n    }\n    data\n}\n\nsummarize_a_module(survey_df, module_name, denominator)\n\n"
        },
        {
          "name": "summarize_a_survey_by_question_concept_id.R",
          "snippet": "# Use snippet 'summarize_a_survey_module' to output a table and a graph of \n# participant counts by response for one question_concept_id\n# The snippet assumes that a dataframe containing survey questions and answers already exists\n# The snippet also assumes that setup has been run\n\n# Update the next 3 lines\nsurvey_df <- YOUR_DATASET_NAME_survey_df\nquestion_concept_id <- 1585940\ndenominator <- NULL\n\n####################################################################################\n#                           DON'T CHANGE FROM HERE\n####################################################################################\nsummarize_a_question_concept_id <- function(df, q_concept_id, denominator=NULL){\n    df <- df %>% \n        mutate(question_concept_id = as.numeric(question_concept_id)) %>%\n        filter(question_concept_id == q_concept_id)\n    \n    new_df <- df %>% group_by(answer_concept_id, answer) %>%\n                    summarize(n_participant = n_distinct(person_id)) %>%\n                    ungroup() %>%\n                    mutate(answer_concept_id = as.integer(answer_concept_id))\n    if (!is.null(denominator)) {\n        new_df <- new_df %>% mutate(response_rate = paste0(round(100*n_participant/denominator,2),'%'))\n    }\n    \n    if (q_concept_id %in% as.vector(unique(df[['question_concept_id']]))){\n        question_name <- as.vector(unique(df$question))\n        print(str_glue(\"Distribution of response to {question_name}\"))\n        \n        # show table\n        print(new_df)\n\n        # show graph\n        options(repr.plot.width=12, repr.plot.height=6)\n        ggplot(new_df) +\n            geom_bar(aes(x=answer, y=n_participant), stat='identity') +\n            coord_flip() +\n            labs(y=\"Participant count\", x=\"\") +\n            theme_bw()\n    }\n    else {\n        print(\"There is an error with your question_concept_id\")\n    }\n}\n\nsummarize_a_question_concept_id(survey_df, question_concept_id, denominator)\n\n\n"
        }
      ]
    }
  ]
}
