{
  "name": "All of Us Dataset Builder Python snippets",
  "sub-menu": [
    {
      "external-link": "https://aousupporthelp.zendesk.com/hc/en-us/articles/360039856791-How-to-use-code-snippets-in-Jupyter-Notebooks",
      "name": "Documentation"
    },
    "---",
    {
      "name": "(1) Setup",
      "snippet": "import os\nimport numpy as np\nimport pandas as pd\nimport pandas_profiling\nimport plotnine\nfrom plotnine import *  # Provides a ggplot-like interface to matplotlib.\nfrom IPython.display import display\n\n## Plot setup.\ntheme_set(theme_bw(base_size = 11)) # Default theme for plots.\n\ndef get_boxplot_fun_data(df):\n  \"\"\"Returns a data frame with a y position and a label, for use annotating ggplot boxplots.\n\n  Args:\n    d: A data frame.\n  Returns:\n    A data frame with column y as max and column label as length.\n  \"\"\"\n  d = {'y': max(df), 'label': f'N = {len(df)}'}\n  return(pd.DataFrame(data=d, index=[0]))\n\n# NOTE: if you get any errors from this cell, restart your kernel and run it again.\n"
    },
    {
      "name": "(2) Basic operations",
      "sub-menu": [
        {
          "name": "join_dataframes.py",
          "snippet": "# Use snippet 'join_dataframes' to join together two dataframes.\n# It assumes the 'Setup' snippet has been executed.\n#\n# In the example below, it joins Demographics '_person_df' and Measurements '_measurement_df' using\n# any columns they have in common, which in this case should only be 'person_id'.\n#\n# See also https://pandas.pydata.org/pandas-docs/version/0.25.1/reference/api/pandas.merge.html\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) TO MATCH YOURS FROM DATASET BUILDER] -----\nmeasurement_df = pd.merge(left=YOUR_DATASET_NAME_person_df, right=YOUR_DATASET_NAME_measurement_df, how='inner')\n\nmeasurement_df.shape\n"
        },
        {
          "name": "summarize_a_dataframe.py",
          "snippet": "# Use snippet 'summarize_a_dataframe' to display summary statistics for a dataframe.\n# It assumes snippet 'Setup' has been executed.\n# See also https://towardsdatascience.com/exploring-your-data-with-just-1-line-of-python-4b35ce21a82d\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) TO MATCH YOURS FROM DATASET BUILDER] -----\nYOUR_DATASET_NAME_person_df.loc[:10000,:].profile_report()  # Examine up to the first 10,000 rows. Larger\n                                                            # dataframes can be profiled, but it takes more time.\n"
        },
        {
          "name": "add_age_to_demographics.py",
          "snippet": "# Use snippet 'add_age_to_demographics' to calculate the age of people in your demographics.\n# It assumes the 'Setup' snippet has been executed.\n# It also assumes that you got your demographics dataframe from Dataset Builder\n\n# Note: This snippet calculates current age and does not take into account whether the person is already dead\n\n\n## -----[ CHANGE THE DATAFRAME NAME(S) `YOUR_DATASET_NAME_person_df` TO MATCH YOURS FROM DATASET BUILDER] -----\nYOUR_DATASET_NAME_person_df['age'] = pd.to_datetime('today').year - YOUR_DATASET_NAME_person_df['date_of_birth'].dt.year\n"
        }
      ]
    },
    {
      "name": "(3) Plot measurements",
      "sub-menu": [
        {
          "name": "measurement_by_age_and_sex_at_birth.plotnine",
          "snippet": "# Use snippet 'measurement_by_age_and_sex_at_birth' to plot joined demographics and measurements dataframes.\n# This plot assumes 'measurement_df' was created using snippet 'Basic operations -> join_dataframes' to\n# join together demographics and measurements dataframes.\n# See also https://plotnine.readthedocs.io/en/stable/\n\n\n# There could be many different measurements in the dataframe. By default, plot the first one.\nmeasurement_to_plot = measurement_df.standard_concept_name.unique()[0]\n\n# Create a derived variable for age group.\nmeasurement_df['age_at_measurement'] = ((measurement_df['measurement_datetime'].dt.tz_localize(None)\n                                     - measurement_df['date_of_birth'].dt.tz_localize(None)).dt.days)//365.24\nmeasurement_df['age_group'] = pd.cut(measurement_df['age_at_measurement'],\n                                                 [-np.inf, 34.5, 49.5, 64.5, np.inf],\n                                                 labels=[\"<35\", \"35-49\", \"50-64\", \"65+\"])\n\n# meas_filter is a column of True and False\nmeas_filter = ((measurement_df.standard_concept_name == measurement_to_plot)\n  & (measurement_df.unit_concept_name != 'No matching concept')\n  & (measurement_df.unit_concept_name.notna())\n  & (measurement_df.sex_at_birth != 'No matching concept')\n  & (measurement_df.value_as_number < 9999999)\n  & (measurement_df['age_at_measurement'].notnull())  # Get rid of nonsensical outliers.\n)\n\n(ggplot(measurement_df[meas_filter], aes(x = 'age_group', y = 'value_as_number')) +\n    geom_boxplot() +\n    stat_summary(fun_data = get_boxplot_fun_data, geom = 'text', size = 10,\n                 position = position_dodge(width = 0.9), va = 'top') +\n#    scale_y_log10() +  # Uncomment if the data looks skewed.\n    coord_flip() +\n    facet_wrap(['standard_concept_name + \": \" + unit_concept_name', 'sex_at_birth'], ncol = 2, scales = 'free') +\n    xlab('age group') +\n    ggtitle('Numeric values of measurements by age and sex_at_birth\\nSource: All Of Us Data') +\n    theme(figure_size = (12, 12), panel_spacing = .5))\n"
        },
        {
          "name": "measurement_by_sex_at_birth.plotnine",
          "snippet": "# Use snippet 'measurement_by_sex_at_birth' to plot joined demographics and measurements dataframes.\n# This plot assumes 'measurement_df' was created using snippet 'Basic operations -> join_dataframes' to\n# join together demographics and measurements dataframes.\n# See also https://plotnine.readthedocs.io/en/stable/\n\n\n# There could be many different measurements in the dataframe. By default, plot the first one.\nmeasurement_to_plot = measurement_df.standard_concept_name.unique()[0]\n\n# meas_filter is a column of True and False.\nmeas_filter = ((measurement_df.standard_concept_name == measurement_to_plot)\n  & (measurement_df.unit_concept_name != 'No matching concept')\n  & (measurement_df.unit_concept_name.notna())\n  & (measurement_df.value_as_number < 9999999)  # Get rid of nonsensical outliers.\n)\n\n(ggplot(measurement_df[meas_filter], aes(x = 'sex_at_birth', y = 'value_as_number')) +\n    geom_boxplot() +\n    stat_summary(fun_data = get_boxplot_fun_data, geom = 'text', size = 10,\n                 position = position_dodge(width = 0.9), va = 'top') +\n#    scale_y_log10() +  # Uncomment if the data looks skewed.\n    facet_wrap(('standard_concept_name', 'unit_concept_name'), ncol = 2, scales = 'free') +\n    ggtitle(f'Numeric values of measurements, by sex_at_birth\\nSource: All Of Us Data') +\n    theme(figure_size=(12, 6), panel_spacing = .5, axis_text_x = element_text(angle=25, hjust=1)))\n"
        }
      ]
    },
    {
      "name": "(4) Summarize survey data",
      "sub-menu": [
        {
          "name": "summarize_a_survey_module.py",
          "snippet": "# Use snippet 'summarize_a_survey_module' to print a table of participant counts by question in a module\n# The snippet assumes that a dataframe containing survey questions and answers already exists\n\n# Update the next 3 lines\nsurvey_df = YOUR_DATASET_NAME_survey_df\nmodule_name = 'The Basics' # e.g: 'The Basics', 'Lifestyle', 'Overall Health', etc.\ndenominator = None # e.g: 200000\n\n####################################################################################\n#                           DON'T CHANGE FROM HERE\n####################################################################################\n\ndef summarize_a_module(df, module=None, denominator=None):\n    if module:\n        df = df[df['survey'].str.lower() == module.lower()].copy()\n    data = (df.groupby(['survey','question_concept_id','question'])['person_id'].nunique()\n                .reset_index()\n                .rename(columns={'person_id':'n_participant'}))\n    if denominator:\n        data['response_rate'] = round(100*data['n_participant']/denominator,2)\n    return data\n\nsummarize_a_module(df=survey_df, module=module_name, denominator=denominator)\n\n"
        },
        {
          "name": "summarize_a_survey_by_question_concept_id.py",
          "snippet": "# Use snippet 'summarize_a_survey_module' to output a table and a graph of \n# participant counts by response for one question_concept_id\n# The snippet assumes that a dataframe containing survey questions and answers already exists\n# The snippet also assumes that setup has been run\n\n# Update the next 3 lines\nsurvey_df = YOUR_DATASET_NAME_survey_df\nquestion_concept_id = 1585940\ndenominator = None # e.g: 200000\n\n####################################################################################\n#                           DON'T CHANGE FROM HERE\n####################################################################################\ndef summarize_a_question_concept_id(df, question_concept_id, denominator=None):\n    df = df.loc[df['question_concept_id'] == question_concept_id].copy()\n    new_df = df.groupby(['answer_concept_id', 'answer'])['person_id']\\\n           .nunique()\\\n           .reset_index()\\\n           .rename(columns=dict(person_id='n_participant'))\\\n           .assign(answer_concept_id = lambda x: np.int32(x.answer_concept_id))\n    if denominator:\n        new_df['response_rate'] = round(100*new_df['n_participant']/denominator,2)\n    if question_concept_id in df['question_concept_id'].unique():\n        print(f\"Distribution of response to {df.loc[df['question_concept_id'] == question_concept_id, 'question'].unique()[0]}\")\n        # show table\n        display(new_df)\n        # show graph\n        display(ggplot(data=new_df) +\n              geom_bar(aes(x='answer', y='n_participant'), stat='identity') +\n               coord_flip() +\n                labs(y=\"Participant count\", x=\"\") +\n               theme_bw())\n    else:\n        print(\"There is an error with your question_concept_id\")\n\nsummarize_a_question_concept_id(survey_df, question_concept_id, denominator)    \n\n\n"
        }
      ]
    }
  ]
}
