{
  "name": "All of Us Cromwell Setup Python snippets",
  "sub-menu": [
    {
      "name": "(1) Setup",
      "snippet": "import os\nimport subprocess\nimport json\nimport requests\nfrom pathlib import Path\n\ndef check_for_app(env):\n    list_apps_url = f'{env[\"leonardo_url\"]}/api/google/v1/apps/{env[\"google_project\"]}'\n    r = requests.get(\n        list_apps_url,\n        params={\n          'includeDeleted': 'false'\n        },\n        headers = {\n            'Authorization': f'Bearer {env[\"token\"]}'\n        }\n    )\n    r.raise_for_status()\n\n    for potential_app in r.json():\n        if potential_app['appType'] == 'CROMWELL' and (\n                str(potential_app['auditInfo']['creator']) == env['owner_email']\n                or str(potential_app['auditInfo']['creator']) == env['user_email']\n        ) :\n            potential_app_name = potential_app['appName']\n            potential_app_status = potential_app['status']\n\n            # We found a CROMWELL app in the correct google project and owned by the user. Now just check the workspace:\n            _, workspace_namespace,  proxy_url = get_app_details(env, potential_app_name)\n            if workspace_namespace == env['workspace_namespace']:\n                return potential_app_name, potential_app_status, proxy_url['cromwell-service']\n\n    return None, None, None\n\ndef get_app_details(env, app_name):\n    get_app_url = f'{env[\"leonardo_url\"]}/api/google/v1/apps/{env[\"google_project\"]}/{app_name}'\n    print('start')\n    r = requests.get(\n        get_app_url,\n        params={\n            'includeDeleted': 'true',\n            'role': 'creator'\n        },\n        headers={\n            'Authorization': f'Bearer {env[\"token\"]}'\n        }\n    )\n    if r.status_code == 404:\n        return 'DELETED', None, None, None\n    else:\n        r.raise_for_status()\n    result_json = r.json()\n    custom_environment_variables = result_json['customEnvironmentVariables']\n    return result_json['status'], custom_environment_variables['WORKSPACE_NAMESPACE'], result_json.get('proxyUrls')\n\n# Checks that cromshell is installed. Otherwise raises an error.\ndef validate_cromshell():\n    if validate_cromshell_beta():\n        print(\"Found cromshell_beta, please use cromshell_beta\")\n    elif validate_cromshell_alpha():\n        print(\"Found cromshell_alpha, please use cromshell_alpha\")\n    else:\n        raise Exception(\"Cromshell is not installed.\")\n\n# Checks that cromshell is installed. Otherwise raises an error.\ndef validate_cromshell_alpha():\n    print('Scanning for cromshell 2 alpha...')\n    try:\n        subprocess.run(['cromshell-alpha', 'version'], capture_output=True, check=True, encoding='utf-8')\n    except FileNotFoundError:\n        return False\n    return True\n# Checks that cromshell is installed. Otherwise raises an error.\ndef validate_cromshell_beta():\n    print('Scanning for cromshell 2 beta')\n    try:\n        subprocess.run(['cromshell-beta', 'version'], capture_output=True, check=True, encoding='utf-8')\n    except FileNotFoundError:\n        return False\n    return True\n\ndef configure_cromwell(env, proxy_url):\n     print('Updating cromwell config')\n     file = f'{str(Path.home())}/.cromshell/cromshell_config.json'\n     configuration = {\n        'cromwell_server': proxy_url.split(\"swagger/\", 1)[0] if proxy_url else \"invalid url\",\n        'requests_timeout': 5,\n        'gcloud_token_email': env['user_email'],\n        'referer_header_url': env['leonardo_url']\n     }\n     with open(file, 'w') as filetowrite:\n        filetowrite.write(json.dumps(configuration, indent=2))\n\ndef find_app_status(env):\n    print(f'Checking status for CROMWELL app')\n    app_name, app_status, proxy_url = check_for_app(env)\n\n    configure_cromwell(env, proxy_url)\n\n    if app_name is None:\n        print(f'CROMWELL app does not exist. Please create cromwell server from workbench')\n    else:\n        print(f'app_name={app_name}; app_status={app_status}')\n        print(f'Existing CROMWELL app found (app_name={app_name}; app_status={app_status}).')\n        exit(1)\n\ndef main():\n    # Iteration 1: these ENV reads will throw errors if not set.\n    env = {\n        'workspace_namespace': os.environ['WORKSPACE_NAMESPACE'],\n        'workspace_bucket': os.environ['WORKSPACE_BUCKET'],\n        'user_email': os.environ.get('PET_SA_EMAIL', default = os.environ['OWNER_EMAIL']),\n        'owner_email': os.environ['OWNER_EMAIL'],\n        'google_project': os.environ['GOOGLE_PROJECT'],\n        'leonardo_url': os.environ['LEONARDO_BASE_URL']\n    }\n\n    # Before going any further, check that cromshell2 is installed:\n    validate_cromshell()\n\n    # Fetch the token:\n    token_fetch_command = subprocess.run(['gcloud', 'auth', 'print-access-token', env['user_email']], capture_output=True, check=True, encoding='utf-8')\n    env['token'] = str.strip(token_fetch_command.stdout)\n\n    find_app_status(env)\n\n\nif __name__ == '__main__':\n    main()\n \n"
    }
  ]
}
