import org.pmiops.workbench.tooling.GenerateAPIListingTask

// Runs before all tasks. Sets up properties and dependencies for the build
// process itself.
buildscript {
    // External properties on the default project. Values declared in ext blocks
    // outside of the buildscript block aren't usable here.
    ext {
        GOOGLE_TRUTH_VERSION = '1.1.3'
        GSON_VERSION = '2.9.0'
        HIBERNATE_VERSION = '5.6.9.Final'
        JACKSON_DATABIND_VERSION = '2.13.4'
        JACKSON_VERSION = '2.13.4'
        KOTLIN_VERSION = '1.8.20'
        LIQUIBASE_VERSION = '4.16.1'
        LOGBACK_VERSION = '1.2.13'
        MAPSTRUCT_VERSION = '1.5.5.Final'
        MOCKITO_KOTLIN_VERSION = '4.1.0'
        OKHTTP_VERSION = '2.7.5'
        OPENCENSUS_VERSION = '0.31.1'
        SPRINGFOX_VERSION = '3.0.0'
        SPRING_BOOT_VERSION = '2.7.4'
        SPRING_FRAMEWORK_VERSION = '5.3.23'
        SWAGGER_3_CODEGEN_VERSION = '3.0.34'
    }

    repositories {
        mavenCentral()
    }

    // https://github.com/spring-projects/spring-boot/issues/26864
    // https://github.com/spring-projects/spring-boot/issues/26946
    // https://github.com/spring-projects/spring-boot/issues/26947
    // https://github.com/spring-projects/spring-boot/commit/cd808d2f189a7a550adec286c1722b5b6f1c19e7
    project.getExtensions().getExtraProperties().set('kotlin.version', '1.8.20') // KOTLIN_VERSION
}

plugins {
    id 'eclipse'
    id 'idea'
    id 'java'
    id 'war'

    id 'io.spring.dependency-management' version '1.0.11.RELEASE'
    id 'com.diffplug.spotless' version '6.23.3'
    id 'com.google.cloud.tools.appengine-appenginewebxml' version '2.4.5'
    id 'org.jetbrains.kotlin.jvm' version '1.8.20' // KOTLIN_VERSION
    // Note: if you plan to upgrade the version of swagger-codegen beyond 2.2.3, be aware of two
    // implicit dependencies: (1) the set of "generatedCompile" Gradle dependencies need to be updated
    // to match the modules imported by the Swagger codegen templates, and (2) some template files
    // are overridden with forked templates within this repo; they will likely need to be re-copied from
    // the newer release version and have AoU-specific modifications re-applied.
    id 'org.hidetake.swagger.generator' version '2.19.2'
    id 'org.owasp.dependencycheck' version '8.4.2'
    id 'org.springframework.boot' version '2.7.4'
    id 'jacoco'
    id 'com.libyear.libyear-gradle-plugin' version "0.1.7"
}

// keep in sync with:
// the runtime field in api/src/main/webapp/WEB-INF/appengine-web.xml.template
// the Docker image in ci/Dockerfile.circle_build
// the Docker image in deploy/Dockerfile
// in this file:
// * sourceCompatibility
// * targetCompatibility
// * compileKotlin.kotlinOptions.jvmTarget
// * compileTestKotlin.kotlinOptions.jvmTarget
if (JavaVersion.current() != JavaVersion.VERSION_17) {
     throw new GradleException(
            "This build must be run with Java 17. " +
                    "See developer-system-initialization.md. " +
                    "The java version used was ${JavaVersion.current()}.")
}

if (System.getenv("ADD_XLINT_DEPRECATION")) {
  allprojects {
    gradle.projectsEvaluated {
      tasks.withType(JavaCompile) {
        options.compilerArgs.add("-Xlint:deprecation")
      }
    }
  }
}

if (System.getenv("ADD_XLINT_UNCHECKED")) {
  allprojects {
    gradle.projectsEvaluated {
      tasks.withType(JavaCompile) {
        options.compilerArgs.add("-Xlint:unchecked")
      }
    }
  }
}

// Artifact configurations derived from base configs. Configuration names
// are concatenated by the Java plugin.
// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations
configurations {
    __bigQueryTest__Compile.extendsFrom testImplementation
    __bigQueryTest__Runtime.extendsFrom testRuntime

    __contractTest__Compile.extendsFrom testImplementation
    __contractTest__Runtime.extendsFrom testRuntime

    __integration__Compile.extendsFrom testImplementation
    __integration__Runtime.extendsFrom testRuntime

    __tools__Implementation.extendsFrom implementation
    __tools__RuntimeOnly.extendsFrom runtimeOnly

    __swaggerCodegenV3__

    generatedCompile {
        exclude group: 'com.google.guava', module: 'guava-jdk5'
    }
}

// Shared variables for Swagger codegen. Use "ext" rather than "def" to allow
// access globally, including from within helper functions.
ext.SWAGGER_CODEGEN_BASE_PKG = 'org.pmiops.workbench'
ext.SWAGGER_3_CODEGEN_DIR = "$buildDir/swagger3"

// Raw options passed to the Swagger codegen CLI.
ext.SWAGGER_3_RAW_OPTS = [
        // By default, the ignore file within the output directory is used. Override
        // as we don't track the output directory in source.
        '--ignore-file-override', "$projectDir/.swagger3-codegen-ignore"
]

def swagger3JavaClient(yaml, pkg, rawOptExtras = []) {
    return {
        inputFile = file("src/main/resources/${yaml}")
        code {
            configuration = configurations.__swaggerCodegenV3__
            language = 'java'
            outputDir = file(SWAGGER_3_CODEGEN_DIR)
            templateDir = file("$projectDir/src/main/resources/swagger3codegen")
            // Since the output directory is shared among these swagger tasks, wiping
            // the directory would result in task invalidation / churn.
            wipeOutputDir = false
            rawOptions = [
                    // By default, the ignore file within the output directory is used. Override
                    // as we don't track the output directory in source.
                    '--ignore-file-override', "$projectDir/.swagger3-codegen-ignore"
            ] + rawOptExtras
            additionalProperties = [
                    'sourceFolder'     : '',
                    'library'          : 'okhttp-gson',
                    'serializableModel': 'true',
                    'dateLibrary'      : 'java8',
                    'invokerPackage'   : "${SWAGGER_CODEGEN_BASE_PKG}.${pkg}",
                    'modelPackage'     : "${SWAGGER_CODEGEN_BASE_PKG}.${pkg}.model",
                    'apiPackage'       : "${SWAGGER_CODEGEN_BASE_PKG}.${pkg}.api",
                    'hideGenerationTimestamp': 'true',
            ]
        }
        // Validation only works for Swagger 2 - skip.
        validation {
            inputFile = null
        }
    }
}

// Configuration for the Swagger Gradle plugin:
// https://github.com/int128/gradle-swagger-generator-plugin
//
// Note: The tasks below share an output directory, but we rely on the swagger
// ignore file to ensure they don't step on eachother's outputs. If this were to
// happen in the future due to a regression or a codegen upgrade, the issue
// would likely manifest as an infinite build loop on our continuous incremental
// build (e.g. dev-up). Run ./gradlew copmileGeneratedJava --info to see which
// overlapping files/diretories may be getting written by different Swagger
// codegen tasks.
swaggerSources {
    firecloud swagger3JavaClient("firecloud.yaml", "firecloud", [
            '--model-name-prefix', 'Firecloud'
    ])
    rawls swagger3JavaClient("rawls.yaml", "rawls", [
            '--model-name-prefix', 'Rawls'
    ])
    notebooks swagger3JavaClient("notebooks.yaml", "notebooks")
    jira swagger3JavaClient("jira.yaml", "jira")
    mandrill swagger3JavaClient("mandrill.yaml", "mandrill")
    absorb swagger3JavaClient("absorb.yaml", "absorb")
    moodle swagger3JavaClient("moodle.yaml", "moodle")
    rdr swagger3JavaClient("rdr.yaml", "rdr", [
            '--model-name-prefix', 'Rdr'
    ])
    captcha swagger3JavaClient("captcha.yaml", "captcha")
    shibboleth swagger3JavaClient("shibboleth.yaml", "shibboleth")

    leonardo swagger3JavaClient("leonardo.yaml", "leonardo", [
            '--model-name-prefix', 'Leonardo'
    ])

    calhoun swagger3JavaClient("calhoun.yaml", "calhoun", [
            '--model-name-prefix', 'Calhoun'
    ])
    tanagra swagger3JavaClient("tanagra.yaml", "tanagra")

    // Workbench needs a special configuration style, as we generate Spring server
    // bindings in this case.
    workbench {
        inputFile = file('src/main/resources/workbench-api.yaml')
        code {
            configuration = configurations.__swaggerCodegenV3__
            language = 'spring'
            outputDir = file(SWAGGER_3_CODEGEN_DIR)
            templateDir = file("$projectDir/src/main/resources/swagger3codegen")
            wipeOutputDir = false
            rawOptions = SWAGGER_3_RAW_OPTS
            additionalProperties = [
                    'sourceFolder'   : '',
                    'modelPackage'   : "${SWAGGER_CODEGEN_BASE_PKG}.model",
                    'apiPackage'     : "${SWAGGER_CODEGEN_BASE_PKG}.api",
                    'useTags'        : 'true',
                    // Generates delegate interfaces; used to make method annotations work without
                    // having to copy them to our implementations.
                    'delegatePattern': 'true',
                    'dateLibrary'    : 'java8',
                    'hideGenerationTimestamp': 'true',
            ]
        }
    }
}

//
// AppEngine
//

// Generate AppEngine Cron file
def workbenchEnv = System.getenv('WORKBENCH_ENV') != null ? System.getenv('WORKBENCH_ENV') : 'local'
task generate_appengine_cron_yaml(type: Exec) {
    executable "ruby"
    args = ["libproject/generate_appengine_cron_yaml.rb", workbenchEnv]
}

// Generate AppEngine Web Configration XML file
task generate_appengine_web_xml(type: Exec) {
    executable "ruby"
    args "libproject/generate_appengine_web_xml.rb"
}


// Spotless code linter plugin settings
spotless {
    java {
        googleJavaFormat()
        target fileTree('.') {
            include '**/*.java'

            exclude 'src/generated/**'
            exclude 'build/**'
        }
    }

    kotlin {
        ktlint()
    }
}

test {
    useJUnitPlatform()
    // Unit testing time is cut roughly in half by running them in parallel. We avoid this on
    // Circle because they are already split apart using a different algorithm.
    maxParallelForks = System.getenv('CIRCLECI') == 'true' ? 1 :
      Runtime.runtime.availableProcessors().intdiv(2) ?: 1
}

jacoco {
    toolVersion = "0.8.10"
}

jacocoTestReport {
    getExecutionData().setFrom(fileTree(buildDir).include("/jacoco/*.exec"))
    reports {
        xml.enabled = true
    }
}

// The plugin generates configuration names by concatenating SourceSet names
// with builtin identifiers according to the rules at
// https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_tasks
sourceSets {
    //
    // SorceSets added by Java plugin. These share a namespace with the ones users create.
    //
    generated {
        compileClasspath = configurations.generatedCompileClasspath
        java {
            srcDir SWAGGER_3_CODEGEN_DIR
        }
    }
    main {
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }
    test {
        // Allow unit tests to directly load config files.
        resources {
            srcDir "config/"
        }
        compileClasspath += generated.output
        runtimeClasspath += generated.output
    }

    //
    // Custom SourceSets
    //
    // Here we use a naming convention with __ word boundaries at start and end
    // to avoid confusion. For example, the plugin may define a __tools__Compile configuration
    // or a compile__tools__Java task. This approach makes it more obvious where there's
    // a dynamically defined symbol name, so usages stick out and it's easier to identify the
    // constituent parts.
    // https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_tasks
    // https://docs.gradle.org/current/userguide/java_plugin.html#java_source_set_configurations
    //

    // BigQuery testing sources
    __bigQueryTest__ {
        resources {
            srcDir "bigquerytest/resources"
            srcDir "config/"
            include "bigquery/**"
            include "cdm/**"
        }
        java {
            compileClasspath += main.output + test.output + generated.output
            runtimeClasspath += main.output + test.output + generated.output
            srcDir file('src/bigquerytest/java')
        }
    }

    // contract testing sources
    __contractTest__ {
        resources {
            srcDir "contracttest/**"
        }
        java {
            compileClasspath += main.output + generated.output
            runtimeClasspath += main.output + generated.output
            srcDir file('src/contracttest/java')
        }
    }

    // Integration testing sources
    __integration__ {
        resources {
            srcDir "config/"
        }
        java {
            compileClasspath += main.output + generated.output
            runtimeClasspath += main.output + generated.output
            srcDir file('src/integration/java')
        }
    }

    // AoU Tools sources
    __tools__ {
        compileClasspath += main.output + generated.output
        runtimeClasspath += main.output + generated.output

        resources {
            srcDir "tools/src/main/resources"
        }
        java {
            srcDirs = ['tools/src/main/java']
        }
    }
}

// Add dependencies to the classes builtin task from the  Java plugin.
// "This is an aggregate task that just depends on other tasks.
// Other plugins may attach additional compilation tasks to it."
// https://docs.gradle.org/current/userguide/java_plugin.html
classes.dependsOn 'generatedClasses'

// https://docs.gradle.org/current/userguide/idea_plugin.html
project.tasks.ideaModule.dependsOn(generateSwaggerCode)

// Java plugin's Generated Source Set gives us the compileGeneratedJava task.
// We need to provide it with the swagger-codegen tasks that output Java; this
// task is defined by the Swagger gradle plugin, and includes all registered
// Swagger sources, per the swaggerSources tuple above.
project.tasks.compileGeneratedJava.dependsOn(generateSwaggerCode)

project.tasks.bootWar.dependsOn(['compileGeneratedJava', 'generate_appengine_web_xml',
                                 'generate_appengine_cron_yaml'])

// Clear out generated Java sorces before cleaning the project.
clean.doFirst {
    delete(SWAGGER_3_CODEGEN_DIR)
}

repositories {
    maven {
        // for Terra service clients (currently sam-client)
        url 'https://broadinstitute.jfrog.io/artifactory/libs-release-local'
    }
    mavenCentral()
}

// To show the dependency tree, try: ./project.rb gradle dependencies --configuration compile
dependencies {
    annotationProcessor "org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION"

    __swaggerCodegenV3__ "io.swagger.codegen.v3:swagger-codegen-cli:$project.ext.SWAGGER_3_CODEGEN_VERSION"

    implementation "ch.qos.logback:logback-classic:$project.ext.LOGBACK_VERSION"
    implementation "ch.qos.logback:logback-core:$project.ext.LOGBACK_VERSION"
    implementation "com.fasterxml.jackson.core:jackson-annotations:$project.ext.JACKSON_VERSION"
    implementation "com.fasterxml.jackson.core:jackson-core:$project.ext.JACKSON_VERSION"
    implementation "com.fasterxml.jackson.core:jackson-databind:$project.ext.JACKSON_DATABIND_VERSION"
    implementation "com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:$project.ext.JACKSON_VERSION"
    implementation "com.fasterxml.jackson.module:jackson-module-kotlin:$project.ext.JACKSON_VERSION"
    implementation "com.github.java-json-tools:json-patch:1.13"
    implementation "com.github.rholder:guava-retrying:2.0.0"
    implementation 'org.javers:javers-core:5.15.0'
    implementation "com.squareup.okhttp:logging-interceptor:$project.ext.OKHTTP_VERSION"
    implementation "com.squareup.okhttp:okhttp:$project.ext.OKHTTP_VERSION"
    implementation "io.opencensus:opencensus-api:$project.ext.OPENCENSUS_VERSION"
    implementation "io.opencensus:opencensus-exporter-stats-stackdriver:$project.ext.OPENCENSUS_VERSION"
    implementation "io.opencensus:opencensus-exporter-trace-stackdriver:$project.ext.OPENCENSUS_VERSION"
    implementation "io.opencensus:opencensus-impl:$project.ext.OPENCENSUS_VERSION"
    implementation 'io.swagger:swagger-annotations:1.6.7'
    implementation "javax.inject:javax.inject:1"
    implementation "org.liquibase:liquibase-core:$project.ext.LIQUIBASE_VERSION"
    implementation 'mysql:mysql-connector-java:8.0.30'
    implementation "org.apache.commons:commons-collections4:4.4"
    implementation 'org.apache.commons:commons-lang3:3.12.0'
    implementation 'org.apache.commons:commons-text:1.10.0'
    implementation "org.apache.httpcomponents:httpclient:4.5.13"
    implementation "org.springframework.boot:spring-boot-starter-validation:$project.ext.SPRING_BOOT_VERSION"
    implementation "commons-codec:commons-codec:1.15"
    implementation 'com.auth0:java-jwt:3.19.2'
    implementation 'io.netty:netty-common:4.1.82.Final'
    implementation 'org.json:json:20231013'

    // TODO: consider switching google deps to the BOM.  https://cloud.google.com/java/docs/bom

    implementation 'com.google.api-client:google-api-client-appengine:1.35.2'
    implementation 'com.google.apis:google-api-services-admin-directory:directory_v1-rev20220919-2.0.0'
    implementation 'com.google.apis:google-api-services-cloudbilling:v1-rev20220908-2.0.0'
    implementation 'com.google.apis:google-api-services-cloudresourcemanager:v3-rev20220925-2.0.0'
    implementation 'com.google.apis:google-api-services-oauth2:v2-rev20200213-2.0.0'
    implementation 'com.google.apis:google-api-services-iam:v1-rev20220825-2.0.0'
    implementation 'com.google.api-client:google-api-client-appengine:2.2.0'
    implementation 'com.google.auth:google-auth-library-appengine:1.11.0'
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.11.0'
    implementation 'com.google.cloud.sql:mysql-socket-factory:1.7.0'
    implementation 'com.google.cloud:google-cloud-bigquery:2.25.0'
    implementation 'com.google.cloud:google-cloud-iamcredentials:2.3.6'
    implementation 'com.google.cloud:google-cloud-logging:3.11.5'
    implementation 'com.google.cloud:google-cloud-monitoring:3.4.6'
    implementation 'com.google.cloud:google-cloud-storage:2.13.0'
    implementation 'com.google.cloud:google-cloud-tasks:2.3.11'
    implementation "com.google.code.gson:gson:$project.ext.GSON_VERSION"
    implementation 'com.google.guava:guava:32.0.1-jre'
    implementation 'com.google.oauth-client:google-oauth-client-jetty:1.34.1'
    implementation 'com.google.protobuf:protobuf-java:3.21.7'
    implementation 'com.googlecode.owasp-java-html-sanitizer:owasp-java-html-sanitizer:20211018.2'

    implementation "org.hibernate:hibernate-core:$project.ext.HIBERNATE_VERSION"

    // Force the Kotlin version, otherwise the Kotlin plugin conflicts with Jackson's
    // Kotlin dep, resulting in massive logspam.
    implementation "org.jetbrains.kotlin:kotlin-reflect:$project.ext.KOTLIN_VERSION"

    implementation('org.apache.tomcat:tomcat-jdbc:10.0.23')
    implementation("org.springframework.boot:spring-boot-starter-tomcat:$project.ext.SPRING_BOOT_VERSION")
    implementation("org.springframework.boot:spring-boot-starter-jdbc:$project.ext.SPRING_BOOT_VERSION") {
        exclude group: 'com.zaxxer', module: 'HikariCP'
    }

    implementation("org.springframework.boot:spring-boot-starter-data-jpa:$project.ext.SPRING_BOOT_VERSION") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }

    implementation("org.springframework.boot:spring-boot-starter-web:$project.ext.SPRING_BOOT_VERSION") {
        exclude module: 'spring-boot-starter-tomcat'
        exclude group: 'org.slf4j', module: 'jul-to-slf4j'
    }

    implementation "org.springframework.retry:spring-retry"
    implementation "org.springframework.security:spring-security-core"
    implementation "org.springframework.security:spring-security-web"

    // updated versions of transitive dependencies to resolve vulnerabilities

    // https://security.snyk.io/vuln/SNYK-JAVA-ORGBOUNCYCASTLE-2841508
    // https://github.com/bcgit/bc-java/wiki/CVE-2023-33202
    implementation 'org.bouncycastle:bcprov-jdk18on:1.77'
    // https://spring.io/blog/2022/03/31/spring-framework-rce-early-announcement
    implementation "org.springframework:spring-aop:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-aspects:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-beans:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-context:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation("org.springframework:spring-core:$project.ext.SPRING_FRAMEWORK_VERSION") {
      exclude group: 'org.springframework', module: 'spring-jcl'
    }
    implementation "org.springframework:spring-expression:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-jcl:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-jdbc:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-orm:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-test:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-tx:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-web:$project.ext.SPRING_FRAMEWORK_VERSION"
    implementation "org.springframework:spring-webmvc:$project.ext.SPRING_FRAMEWORK_VERSION"

    implementation "org.mapstruct:mapstruct:$project.ext.MAPSTRUCT_VERSION"
    implementation 'jakarta.mail:jakarta.mail-api:2.1.1'
    testAnnotationProcessor "org.mapstruct:mapstruct-processor:$project.ext.MAPSTRUCT_VERSION"

    // updated 13 Dec 2023 to most recent passing Sam on 13 Dec
    implementation("org.broadinstitute.dsde.workbench:sam-client_2.13:0.1-c0263cf") {
      exclude group: 'org.apache.oltu.oauth2', module: 'org.apache.oltu.oauth2.common'
    }

    // Dependencies for Swagger codegen-generated sources. This should include all dependencies required by Swagger's
    // default okhttp API codegen templates (see https://github.com/swagger-api/swagger-codegen/blob/v2.2.3/samples/client/petstore/spring-stubs/pom.xml)
    // plus any custom templates included in our repo under the SWAGGER_2_TEMPLATE_DIR.
    generatedCompile "org.springframework.boot:spring-boot-starter-data-rest:$project.ext.SPRING_BOOT_VERSION"
    generatedCompile "io.springfox:springfox-swagger-ui:$project.ext.SPRINGFOX_VERSION"
    generatedCompile "org.springframework.boot:spring-boot-starter-validation:$project.ext.SPRING_BOOT_VERSION"
    generatedCompile "com.squareup.okhttp:okhttp:$project.ext.OKHTTP_VERSION"
    generatedCompile "com.squareup.okhttp:logging-interceptor:$project.ext.OKHTTP_VERSION"
    generatedCompile "com.google.code.gson:gson:$project.ext.GSON_VERSION"
    // OpenCensus is an AoU-specific addition to the default Swagger API dependencies. See the
    // template file api.mustache for more details.
    generatedCompile "io.opencensus:opencensus-api:$project.ext.OPENCENSUS_VERSION"
    generatedCompile "io.opencensus:opencensus-exporter-trace-stackdriver:$project.ext.OPENCENSUS_VERSION"
    generatedCompile "io.opencensus:opencensus-impl:$project.ext.OPENCENSUS_VERSION"
    generatedCompile "javax.xml.bind:jaxb-api:2.3.1"

    // Swagger3 codegen deps
    // TODO(calbach): The duplicated deps here are highly suspect. Investigate
    // removing the generated sourceSet, or else fixing the runtime deps.
    implementation 'io.swagger.core.v3:swagger-annotations:2.2.3'
    implementation 'io.swagger.core.v3:swagger-models:2.2.3'
    implementation 'io.gsonfire:gson-fire:1.8.5'
    implementation 'org.threeten:threetenbp:1.6.2'
    implementation 'io.springfox:springfox-oas:3.0.0'
    generatedCompile 'io.swagger.core.v3:swagger-annotations:2.2.3'
    generatedCompile 'io.swagger.core.v3:swagger-models:2.2.3'
    generatedCompile 'io.gsonfire:gson-fire:1.8.5'
    generatedCompile 'org.threeten:threetenbp:1.6.2'
    generatedCompile 'io.springfox:springfox-oas:3.0.0'

    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$project.ext.KOTLIN_VERSION"

    // war plugin. Add this to scope of the compile configuration, but do not include in .war file.
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '3.1.0'

    __tools__Implementation 'commons-cli:commons-cli:1.5.0'
    __tools__Implementation 'com.opencsv:opencsv:5.7.0'

    testImplementation 'org.mockito:mockito-core:5.3.1'
    testImplementation "com.google.truth:truth:$project.ext.GOOGLE_TRUTH_VERSION"
    testImplementation "com.google.truth.extensions:truth-java8-extension:$project.ext.GOOGLE_TRUTH_VERSION"
    testImplementation 'com.h2database:h2:1.4.194'
    testImplementation "org.liquibase:liquibase-core:$project.ext.LIQUIBASE_VERSION"
    testImplementation 'org.bitbucket.radistao.test:before-after-spring-test-runner:0.1.0'
    testImplementation "org.jetbrains.kotlin:kotlin-test:$project.ext.KOTLIN_VERSION"

    // Use Mockito for testing only.
    testImplementation "org.mockito.kotlin:mockito-kotlin:$project.ext.MOCKITO_KOTLIN_VERSION"

    // Test deps
    testImplementation("org.springframework.boot:spring-boot-starter-test:$project.ext.SPRING_BOOT_VERSION") {
        exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        exclude group: 'com.vaadin.external.google', module: 'android-json'
    }
}

tasks.compileJava {
    dependsOn 'compileGeneratedJava'
    options.compilerArgs << '-Xlint:unchecked'
}

task integrationTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run integration test suite.'
    testClassesDirs = sourceSets.__integration__.output.classesDirs
    classpath = sourceSets.__integration__.runtimeClasspath
    // These tests should always run when requested since they consume and produce side-effects.
    outputs.upToDateWhen { false }

    useJUnitPlatform()

    // Option to control size of stack trace:
    // jvmArgs '-XX:MaxJavaStackTraceDepth=10'
}

task contractTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Run contract test suite.'
    testClassesDirs = sourceSets.__contractTest__.output.classesDirs
    classpath = sourceSets.__contractTest__.runtimeClasspath
    outputs.upToDateWhen { false }

    useJUnitPlatform()

    // Option to control size of stack trace:
    // jvmArgs '-XX:MaxJavaStackTraceDepth=10'
}

task bigQueryTest(type: Test) {
    group = LifecycleBasePlugin.VERIFICATION_GROUP
    description = 'Runs BigQery test suite.'
    testClassesDirs = sourceSets.__bigQueryTest__.output.classesDirs
    classpath = sourceSets.__bigQueryTest__.runtimeClasspath

    outputs.upToDateWhen { false }

    useJUnitPlatform()
}

tasks.withType(Test) {
    testLogging {
        // Causes the correct line to be reported on an exception.
        exceptionFormat "full"
    }
    def verboseTestLogging = project.properties['verboseTestLogging'] ?: 'no'
    if (verboseTestLogging == 'yes') {
        testLogging {
            events "passed", "skipped", "failed", "standardOut", "standardError"
        }
    } else {
        testLogging {
            events "passed", "skipped", "failed"
        }
        reports {
            // Write XML file (used by CircleCI, Jenkins, etc) to api/build/test-results/test
            junitXml.required = true
            // Write human-readable test report to api/build/reports/
            html.required = true
        }
    }
    // As of Q1 2021, API unit tests need a larger heap due to memory retention across individual test cases.
    maxHeapSize = "2g"
}

appengine {  // App Engine tasks configuration
    tools {
        // Keep in sync with ci/Dockerfile.circle_build
        cloudSdkVersion = '392.0.0'
    }
    run {      // local (dev_appserver) configuration (standard environments only)
        port = 8081                 // default
        host = "0.0.0.0"
        // Allows you to attach a debugger on port 8001 when running locally.
        jvmFlags = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=8001']
        // Give dev_appserver 2 minutes to start up when running appengineStart; by
        // default it will fail after 1 minute. (This is particularly a problem in CircleCI.)
        startSuccessTimeout = 120

        environment = [GOOGLE_APPLICATION_CREDENTIALS: file("$rootDir/sa-key.json").getAbsolutePath()]
    }

    deploy {   // deploy configuration
        stopPreviousVersion = true  // default - stop the current version
        promote = true              // default - & make this the current version
        // Place holder for required field, we are not using gradle to deploy this APP.
        projectId = "all-of-us-workbench-test"
    }
}

task startCronEmulator(dependsOn: [':appengine-cron-emulator:jar', 'generate_appengine_cron_yaml']) {
    doFirst {
        ext.process = new ProcessBuilder()
                .redirectOutput(ProcessBuilder.Redirect.to(new File("cron-emulator.log")))
                .redirectError(ProcessBuilder.Redirect.to(new File("cron-emulator-err.log")))
                .directory(projectDir)
                .command("java", "-jar",
                        project(":appengine-cron-emulator").jar.archivePath.getPath(),
                        "$projectDir/src/main/webapp/WEB-INF/cron.yaml"
                ).start()

        println "Started Cron Emulator, check cron-emulator-err.log for startup errors (RW-3755)"
    }
}

// AppEngine plugin tasks
project.tasks.appengineRun.dependsOn project.tasks.startCronEmulator
project.tasks.appengineStart.dependsOn project.tasks.startCronEmulator
appengineStart {
    // This task has the side-effect of running a local server, and therefore
    // should not be cacheable.
    outputs.upToDateWhen { false }
}

group = 'org.pmiops.allofus.workbench'
version = '0.1.0'          // Version in generated output

// This restricts the language features that may be used to those at or below the given Java
// version.
sourceCompatibility = 17

// This restricts the runtime environment to be at or above the given Java version.
targetCompatibility = 17

task listProjectAPIs(type: GenerateAPIListingTask)


//
// COMMAND-LINE TOOLS
//
// All tasks below represent scripts meant to be run via Gradle command-line invocations.
//
// This gives us a natural place to put one-off scripts, deployment tasks, or any other
// code that should be run outside the context of a HTTP request or a cron job.


// Define database-related Spring Boot properties required for running
// command-line tools. These are set up elsewhere for the main App Engine
// runtime.
//
// These system variables will have been set by the project.rb script before
// this task is executed.
//
// N.B. these properties should be kept roughly in sync with the App Engine configuration
// XML file under src/main/webapp/WEB-INF/appengine-web.xml
def db_host = System.getenv("DB_HOST")
def db_port = System.getenv("DB_PORT")

// run with "./gradlew reportLibyears"
libyear {
    configurations = ['compileClasspath']
    failOnError = false // necessary for sam-client
    validator = singleArtifactMustNotBeOlderThan(years(10))
}

// See project.rb command: fetch-firecloud-user-profiles
task fetchFireCloudUserProfile(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.FetchFireCloudUserProfile"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: fetch-workspace-details
task fetchWorkspaceDetails(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.FetchWorkspaceDetails"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: generate-impersonated-user-tokens
task generateImpersonatedUserTokens(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.GenerateImpersonatedUserTokens"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: invalidate-rdr-export
task invalidateRdrExport(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.InvalidateRdrExport"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: backfill-entities-to-rdr
task backfillEntitiesToRdr(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.BackfillEntitiesToRdr"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// This task is called from a few different places:
// - devstart.rb > load_config (used by "deploy" and "update_cloud_config" commands)
// - directly via gradlew (used by "run-local-migrations" command)
// - docker-compose.yaml#updateConfig (used by "dev-up" command)
task loadConfig(type: JavaExec) {
    classpath sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.ConfigLoader"
    if (project.hasProperty("config_key") && project.hasProperty("config_file")) {
        args config_key, config_file
    }
}

// Called by devs from the command-line:
// ./project.rb list-runtimes
// ./project.rb delete-runtimes
// ./project.rb describe-runtime
task manageLeonardoRuntimes(type: JavaExec) {
    classpath sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.ManageLeonardoRuntimes"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// Called by devs from the command-line:
// - devstart.rb > set_authority
task setAuthority(type: JavaExec) {
    classpath sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.SetAuthority"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// This task is called from:
// - devstart.rb > update_cdr_config_for_project (called by run-local-migrations)
task updateCdrConfig(type: JavaExec) {
    classpath sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.cdrconfig.UpdateCdrConfig"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: create-wgs-cohort-extraction-bp-workspace
task createWgsCohortExtractionBillingProjectWorkspace(type: JavaExec) {
    classpath sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.CreateWgsCohortExtractionBillingProjectWorkspace"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: create-terra-method-snapshot
task createTerraMethodSnapshot(type: JavaExec) {
    classpath sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.CreateTerraMethodSnapshot"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: load-institutions
task loadInstitutions(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.institutions.LoadInstitutions"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: fix-desynchronized-billing-project-owners
task fixDesynchronizedBillingProjectOwners(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.FixDesynchronizedBillingProjectOwners"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: set-access-module-timestamps
task setAccessModuleTimestamps(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.SetAccessModuleTimestamps"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: export-workspace-operations
task exportWorkspaceOperations(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.ExportWorkspaceOperations"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

// See project.rb command: delete-workspaces
task deleteWorkspaces(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.DeleteWorkspaces"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}

task backfillGSuiteUserData(type: JavaExec) {
    classpath = sourceSets.__tools__.runtimeClasspath
    mainClass = "org.pmiops.workbench.tools.BackfillGSuiteUserData"
    if (project.hasProperty("appArgs")) {
        args Eval.me(appArgs)
    }
}
//
// Kotlin Plugin compiler arguments
// https://kotlinlang.org/docs/reference/using-gradle.html#compiler-options
//

compileKotlin {
    kotlinOptions {
        jvmTarget = 17
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = 17
    }
}

dependencies {
    testImplementation 'au.com.dius:pact-jvm-consumer-java8:4.0.10'
    testImplementation 'au.com.dius:pact-jvm-consumer-junit5:4.0.10'
    modules {
    module("com.sun.activation:jakarta.activation") {
      replacedBy("jakarta.annotation:jakarta.annotation-api")
    }
    module("javax.annotation:javax.annotation-api") {
      replacedBy("jakarta.annotation:jakarta.annotation-api")
    }
    module("org.apache.tomcat:tomcat-annotations-api") {
      replacedBy("jakarta.annotation:jakarta.annotation-api")
    }
    module("javax.persistence:javax.persistence-api") {
      replacedBy("jakarta.persistence:jakarta.persistence-api")
    }
    module("org.aspectj:aspectjrt") { replacedBy("org.aspectj:aspectjweaver") }
    module("javax.xml.bind:javax.xml.bind-api") {
      replacedBy("jakarta.xml.bind:jakarta.xml.bind-api")
    }
    module("javax.xml.bind:jaxb-api") { replacedBy("jakarta.xml.bind:jakarta.xml.bind-api") }
    module("javax.activation:javax.activation-api") {
      replacedBy("jakarta.activation:jakarta.activation-api")
    }
    module("org.jboss.spec.javax.transaction:jboss-transaction-api_1.2_spec") {
      replacedBy("jakarta.transaction:jakarta.transaction-api")
    }
    module("org.springframework:spring-jcl") { replacedBy("commons-logging:commons-logging") }
    module("javax.servlet:servlet-api") { replacedBy("javax.servlet:javax.servlet-api") }
    module("org.apache.tomcat:tomcat-juli") {
      replacedBy("org.apache.tomcat.embed:tomcat-embed-core")
    }
  }
}

compileGeneratedKotlin {
  dependsOn(generateSwaggerCode)
}
explodeWar {
  dependsOn(bootWar)
}
