openapi: 3.0.3
info:
  title: Workspace Manager API
  description: Workspace Manager REST API to manage workspaces.
  version: 0.0.1
paths:
  /api/admin/v1/resources/filtered:
    post:
      summary: Filter resources by assigned user
      operationId: filterUserResources
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResourceFilterByAssignedUser'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Get the result of a async admin job.
      operationId: getAdminJobResult
      tags:
        - Admin
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/workspaces/backfillApplications:
    patch:
      summary: backfill a list of given applications on all workspaces
      operationId: backfillWorkspaceApplications
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BackfillApplicationsRequest'
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/workspaces/backfillRoles:
    patch:
      summary: backfill AoD roles
      operationId: backfillWorkspaceRoles
      tags:
        - Admin
      parameters:
        - in: query
          name: email
          description: AoD support group email
          required: true
          schema:
            type: string
      responses:
        '204':
          description: Success
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/workspaces/byUserFacingId/{workspaceUserFacingId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceUserFacingId'
    get:
      summary: Retrieve the workspace UUID given the UFID with no permission check
        - only to be used by UM
      operationId: getWorkspaceByUfid
      tags:
        - Admin
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: string
                description: UUID string of the workspace
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/workspaces/cloudcontexts/syncIamRoles:
    patch:
      parameters:
        - $ref: '#/components/parameters/WetRun'
      summary: Sync custom IAM roles for all workspaces.
      operationId: syncIamRoles
      tags:
        - Admin
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/workspaces/{workspaceId}/aod:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Access on demand grant - only to be used by UM
      operationId: aodOperation
      tags:
        - Admin
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessOnDemandRequest'
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/admin/v1/workspaces/{workspaceId}/owners:
    post:
      parameters:
        - $ref: '#/components/parameters/WorkspaceId'
      summary: Add the current user to the workspace as an Owner.
      operationId: addWorkspaceOwner
      tags:
        - Admin
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/job/v1/jobs/{jobId}:
    parameters:
      - $ref: '#/components/parameters/JobId'
    get:
      tags:
        - jobs
      operationId: retrieveJob
      responses:
        200:
          description: Job is complete (succeeded or failed)
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        202:
          description: Job is running
          headers:
            Retry-After:
              description: optional - estimated seconds to wait before polling again.
                This allows a server to offer a hint as to when the job might be complete.
              schema:
                type: integer
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobReport'
        400:
          $ref: '#/components/responses/BadRequest'
        403:
          $ref: '#/components/responses/PermissionDenied'
        404:
          $ref: '#/components/responses/NotFound'
  /api/policies/v1/getLocationInfo:
    parameters:
      - $ref: '#/components/parameters/Platform'
      - $ref: '#/components/parameters/WsmPolicyLocation'
    get:
      summary: Get the cloud location info.
      operationId: getLocationInfo
      tags:
        - policy
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsmPolicyLocation'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/alpha1/{workspaceId}/jobs:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/PageToken'
      - $ref: '#/components/parameters/ResourceType'
      - $ref: '#/components/parameters/StewardshipType'
      - $ref: '#/components/parameters/ResourceName'
      - $ref: '#/components/parameters/JobStateFilter'
    get:
      summary: 'Enumerate recent jobs run in a workspace. The enumeration includes
        both running

        and completed jobs. It is ordered by start time of the job.

        '
      operationId: enumerateJobs
      tags:
        - Alpha1
      responses:
        '200':
          description: Listing of recent jobs
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnumerateJobsResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/alpha1/{workspaceId}/resources/controlled/gcp/buckets/{resourceId}/load:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      operationId: loadUrlList
      tags:
        - Alpha1
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoadUrlListRequestBody'
      summary: 'Use storage transfer service to transfer files from signed urls list
        to

        GCS bucket.

        '
      responses:
        '200':
          $ref: '#/components/responses/LoadUrlListResponse'
        '202':
          $ref: '#/components/responses/LoadUrlListResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/alpha1/{workspaceId}/resources/controlled/gcp/buckets/{resourceId}/load/result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/JobId'
    get:
      operationId: fetchLoadUrlListResult
      tags:
        - Alpha1
      summary: Get the result of load signed url list.
      responses:
        '200':
          $ref: '#/components/responses/LoadUrlListResponse'
        '202':
          $ref: '#/components/responses/LoadUrlListResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1:
    get:
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/MinimumHighestRole'
      summary: List all workspaces a user can read.
      operationId: listWorkspaces
      tags:
        - Workspace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescriptionList'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/resources:
    parameters:
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/ResourceTypes'
      - $ref: '#/components/parameters/MinimumHighestRole'
      - $ref: '#/components/parameters/StewardshipType'
      - $ref: '#/components/parameters/ResolveReference'
    get:
      summary: 'Enumerate resources. The visible resources depend on the permissions
        of the caller.

        '
      operationId: getResourcesForUser
      tags:
        - Resource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/resources/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/ResolveReference'
    get:
      summary: 'Retrieve a resource.

        '
      operationId: getResourceWithoutWorkspaceId
      tags:
        - Resource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDescription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/workspaceByUserFacingId/{workspaceUserFacingId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceUserFacingId'
      - $ref: '#/components/parameters/MinimumHighestRole'
    get:
      summary: Get an existing Workspace by userFacingId.
      operationId: getWorkspaceByUserFacingId
      tags:
        - Workspace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    get:
      summary: Get an existing Workspace.
      operationId: getWorkspace
      tags:
        - Workspace
      parameters:
        - $ref: '#/components/parameters/MinimumHighestRole'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update an existing Workspace.
      operationId: updateWorkspace
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/applications:
    get:
      parameters:
        - $ref: '#/components/parameters/WorkspaceId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      summary: List all applications and whether they are enabled on a workspace
      operationId: listWorkspaceApplications
      tags:
        - WorkspaceApplication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceApplicationDescriptionList'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/applications/{applicationId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ApplicationId'
    get:
      summary: Get an application and its state in this workspace
      operationId: getWorkspaceApplication
      tags:
        - WorkspaceApplication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceApplicationDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/applications/{applicationId}/disable:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ApplicationId'
    post:
      summary: Disable an application in a workspace
      operationId: disableWorkspaceApplication
      tags:
        - WorkspaceApplication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceApplicationDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/applications/{applicationId}/enable:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ApplicationId'
    post:
      summary: Enable an application in a workspace
      operationId: enableWorkspaceApplication
      tags:
        - WorkspaceApplication
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceApplicationDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Clone a workspace and its eligible resources
      operationId: cloneWorkspace
      tags:
        - Workspace
      requestBody:
        description: Details of workspace clone operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneWorkspaceRequest'
      responses:
        '200':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '202':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/clone-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a gcp bucket clone job.
      operationId: getCloneWorkspaceResult
      tags:
        - Workspace
      responses:
        '200':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '202':
          $ref: '#/components/responses/CloneWorkspaceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/cloudcontexts:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a cloud context for the workspace.
      operationId: createCloudContext
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateCloudContextRequest'
      responses:
        '200':
          $ref: '#/components/responses/CreateCloudContextResultResponse'
        '202':
          $ref: '#/components/responses/CreateCloudContextResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/cloudcontexts/result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Get the result of a async job to create a cloud context.
      operationId: getCreateCloudContextResult
      tags:
        - Workspace
      responses:
        '200':
          $ref: '#/components/responses/CreateCloudContextResultResponse'
        '202':
          $ref: '#/components/responses/CreateCloudContextResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/describe:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    get:
      summary: Get a detailed description of an existing Workspace.
      operationId: describeWorkspace
      tags:
        - Workspace
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescription'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/folders:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    get:
      summary: Get all folders in a given workspace
      operationId: listFolders
      tags:
        - Folder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FolderList'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Create a new folder in a given workspace under given folder
      operationId: createFolder
      tags:
        - Folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateFolderRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/NotFound'
  /api/workspaces/v1/{workspaceId}/folders/{folderId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/FolderId'
    get:
      summary: Get an existing Folder.
      operationId: getFolder
      tags:
        - Folder
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update an existing folder.
      operationId: updateFolder
      tags:
        - Folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateFolderRequestBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Folder'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: "Delete a folder asynchronously. OpenAPI does not support request body\
        \ in \nDELETE, but async state requires it. Hence this is a POST.\n"
      operationId: deleteFolderAsync
      tags:
        - Folder
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/folders/{folderId}/properties:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/FolderId'
    post:
      operationId: updateFolderProperties
      summary: 'Update folder properties. Only properties with keys in request are

        updated. Properties with keys not in request are not updated.

        '
      tags:
        - Folder
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        '204':
          description: Properties update sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: deleteFolderProperties
      tags:
        - Folder
      summary: 'Delete folder properties. Only properties with keys in request are

        deleted. Properties with keys not in request are not deleted.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyKeys'
      responses:
        '204':
          description: Properties delete sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/folders/{folderId}/result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/FolderId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Get the result of a async job to delete a folder.
      operationId: getDeleteFolderResult
      tags:
        - Folder
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/gcp/enablepet:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Allow a user to impersonate their pet SA in a given workspace
      description: 'This endpoint is exposed as a workaround to support calling Google

        Pipelines API in a workspace. It will likely be removed in the future in

        favor of other cloud sync methods.

        '
      operationId: enablePet
      tags:
        - Workspace
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/gcp/natgateway:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a NAT Router in the specified region
      description: "This endpoint creates a NAT Router for the workspace project network\
        \ in the specified region to allow access\nto the outside internet. While\
        \ this is handled automatically for cloud environments, this endpoint allows\
        \ \ncallers to create these gateways for other sources of compute, like workflows.\n"
      operationId: createNatGateway
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateNatGatewayRequestBody'
      responses:
        '204':
          description: OK
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/listValidRegions:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Platform'
    get:
      summary: 'list valid data centers of a given workspace on a cloud platform.

        '
      operationId: listValidRegions
      tags:
        - Workspace
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Regions'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/policies:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    patch:
      summary: Update policies for a workspace
      operationId: updatePolicies
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WsmPolicyUpdateRequest'
      responses:
        '200':
          description: Update successfully processed. The update itself may or may
            not have succeeded.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsmPolicyUpdateResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/policies/explain:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/WsmPolicyDepth'
    get:
      summary: Get an explanation of the workspace policies
      operationId: explainPolicies
      tags:
        - Workspace
      responses:
        '200':
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsmPolicyExplainResult'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/policies/mergeCheck:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: The result of a merge calculation between two workspaces. This does
        not mutate the original workspaces.
      description: "The target workspace is identified by the path parameter.\nThe\
        \ source workspace is provided in the source request. \nPolicies from the\
        \ source workspace are merged into the target workspace.\nThe merge operation\
        \ is called with DRY_RUN, so no mutations take place.\n"
      operationId: mergeCheck
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MergeCheckRequest'
      responses:
        '202':
          description: Merge calculation successfully processed (no action is taken).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WsmPolicyMergeCheckResult'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/properties:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: "Update the properties in workspace. Only properties with keys in request\
        \ \nare updated. Properties with keys not in request are not updated.\n"
      operationId: updateWorkspaceProperties
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        '204':
          description: properties update sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: 'delete existing Workspace properties. Only properties with keys in

        request are deleted. Properties with keys not in request are not

        deleted.

        '
      operationId: deleteWorkspaceProperties
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyKeys'
      responses:
        '204':
          description: properties delete sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Offset'
      - $ref: '#/components/parameters/Limit'
      - $ref: '#/components/parameters/ResourceType'
      - $ref: '#/components/parameters/StewardshipType'
      - $ref: '#/components/parameters/ResolveReference'
    get:
      summary: 'Enumerate resources in a workspace. The visible resources depend on
        the permissions of the caller.

        These are presented sorted by ascending resource name. The offset and limit
        parameters allow paging

        through the results. You can also filter by a resource type and by a stewardship
        type.

        '
      operationId: enumerateResources
      tags:
        - Resource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/any/flexibleResources:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled flexible resource.
      operationId: createFlexibleResource
      tags:
        - ControlledFlexibleResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledFlexibleResourceRequestBody'
      responses:
        '200':
          description: Response to creating a controlled flexible resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedControlledFlexibleResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/any/flexibleResources/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled flexible resource.
      operationId: getFlexibleResource
      tags:
        - ControlledFlexibleResource
      responses:
        '200':
          $ref: '#/components/responses/ControlledFlexibleResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled flexible resource.
      operationId: updateFlexibleResource
      tags:
        - ControlledFlexibleResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledFlexibleResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/ControlledFlexibleResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a controlled flexible resource.
      operationId: deleteFlexibleResource
      tags:
        - ControlledFlexibleResource
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/any/flexibleResources/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a flexible resource.
      operationId: cloneFlexibleResource
      tags:
        - ControlledFlexibleResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneControlledFlexibleResourceRequest'
      responses:
        '200':
          $ref: '#/components/responses/CloneControlledFlexibleResourceResponse'
        '202':
          $ref: '#/components/responses/CloneControlledFlexibleResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/externalBucket:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled externally-managed AWS S3 Storage Bucket resource.
      operationId: createAwsS3ExternalBucket
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledAwsS3ExternalBucketRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreateControlledAwsS3ExternalBucketResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/externalBucket/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled externally-managed AWS S3 Storage Bucket resource.
      operationId: getAwsS3ExternalBucket
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsS3ExternalBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled externally managed AWS S3 Storage Bucket resource.
      operationId: updateAwsS3ExternalBucket
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledAwsS3ExternalBucketRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateControlledAwsS3ExternalBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a controlled externally managed AWS S3 Storage Bucket resource.
      operationId: deleteAwsS3ExternalBucket
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/externalBucket/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone an externally managed S3 Bucket resource.
      operationId: cloneAwsS3ExternalBucket
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneControlledAwsS3ExternalBucketRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneControlledAwsS3ExternalBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/externalBucket/{resourceId}/credential:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/AwsCredentialAccessScope'
      - $ref: '#/components/parameters/AwsCredentialDurationSeconds'
    get:
      summary: Get a credential to access this externally managed S3 Storage Bucket
        in the AWS CLI or SDK.
      operationId: getAwsS3ExternalBucketCredential
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsResourceCredentialResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/instances:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: 'Create a new controlled AWS EC2 Virtual Machine instance resource.
        This

        is async, because the operation can take a few minutes.

        '
      operationId: createAwsEc2Instance
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledAwsEc2InstanceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreateControlledAwsEc2InstanceResponse'
        '202':
          $ref: '#/components/responses/CreateControlledAwsEc2InstanceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/instances/create-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about an AWS EC2 Virtual Machine instance resource
        creation job.
      operationId: getCreateAwsEc2InstanceResult
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/CreateControlledAwsEc2InstanceResponse'
        '202':
          $ref: '#/components/responses/CreateControlledAwsEc2InstanceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/instances/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about an AWS EC2 Virtual Machine resource deletion
        job.
      operationId: getDeleteAwsEc2InstanceResult
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/instances/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled AWS EC2 Virtual Machine resource.
      operationId: getAwsEc2Instance
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsEc2InstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Delete a controlled AWS EC2 Virtual Machine resource. This is async,
        because the

        operation can take a few minutes. OpenAPI does not support request body

        in DELETE, but async state requires it. Hence this is a POST.

        '
      operationId: deleteAwsEc2Instance
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteControlledAwsResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled AWS EC2 Virtual Machine instance resource.
      operationId: updateAwsEc2Instance
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledAwsEc2InstanceRequestBody'
      responses:
        '200':
          description: Response to get AWS EC2 Virtual Machine resource.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwsEc2InstanceResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/instances/{resourceId}/credential:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/AwsCredentialAccessScope'
      - $ref: '#/components/parameters/AwsCredentialDurationSeconds'
    get:
      summary: Get a credential to access this EC2 Virtual Machine in the AWS CLI
        or SDK.
      operationId: getAwsEc2InstanceCredential
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsResourceCredentialResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/instances/{resourceId}/describe:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get the description of the AWS EC2 Instance cloud resource
      operationId: describeAwsEc2Instance
      tags:
        - ControlledAwsResource
      responses:
        '200':
          description: Result of calling ec2:DescribeInstances API
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AwsResourceDescription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/notebook:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: 'Create a new controlled AWS SageMaker Notebook instance resource.
        This

        is async, because the operation can take a few minutes.

        '
      operationId: createAwsSageMakerNotebook
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledAwsSageMakerNotebookRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreateControlledAwsSageMakerNotebookResponse'
        '202':
          $ref: '#/components/responses/CreateControlledAwsSageMakerNotebookResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/notebook/create-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about an AWS SageMaker Notebook instance resource
        creation job.
      operationId: getCreateAwsSageMakerNotebookResult
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/CreateControlledAwsSageMakerNotebookResponse'
        '202':
          $ref: '#/components/responses/CreateControlledAwsSageMakerNotebookResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/notebook/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about an AWS SageMaker Notebook resource deletion
        job.
      operationId: getDeleteAwsSageMakerNotebookResult
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/notebook/generateName:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Generate a cloud native controlled AWS SageMaker Notebook instance
        name.
      operationId: generateAwsSageMakerNotebookCloudName
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAwsResourceCloudNameRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GenerateAwsResourceCloudNameResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/notebook/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled AWS SageMaker Notebook resource.
      operationId: getAwsSageMakerNotebook
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsSageMakerNotebookResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled AWS SageMaker Notebook resource.
      operationId: updateAwsSageMakerNotebook
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledAwsSageMakerNotebookRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateControlledAwsSageMakerNotebookResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Delete a controlled AWS SageMaker Notebook resource. This is async,
        because the

        operation can take a few minutes. OpenAPI does not support request body

        in DELETE, but async state requires it. Hence this is a POST.

        '
      operationId: deleteAwsSageMakerNotebook
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteControlledAwsResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/notebook/{resourceId}/credential:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/AwsCredentialAccessScope'
      - $ref: '#/components/parameters/AwsCredentialDurationSeconds'
    get:
      summary: Get a credential to access this SageMaker Notebook in the AWS CLI or
        SDK.
      operationId: getAwsSageMakerNotebookCredential
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsResourceCredentialResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/storageFolder:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled AWS S3 Storage Folder resource.
      operationId: createAwsS3StorageFolder
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledAwsS3StorageFolderRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreateControlledAwsS3StorageFolderResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/storageFolder/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about an AWS S3 Storage Folder resource deletion
        job.
      operationId: getDeleteAwsS3StorageFolderResult
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/storageFolder/generateName:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Generate a cloud native controlled AWS S3 Storage Folder name.
      operationId: generateAwsS3StorageFolderCloudName
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateAwsResourceCloudNameRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GenerateAwsResourceCloudNameResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/storageFolder/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled AWS S3 Storage Folder resource.
      operationId: getAwsS3StorageFolder
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsS3StorageFolderResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled AWS S3 Storage resource.
      operationId: updateAwsS3StorageFolder
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledAwsS3StorageFolderRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateControlledAwsS3StorageFolderResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Delete a controlled AWS S3 Storage resource. This is async, because
        the

        operation can take a few minutes. OpenAPI does not support request body

        in DELETE, but async state requires it. Hence this is a POST.

        '
      operationId: deleteAwsS3StorageFolder
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteControlledAwsResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledAwsResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/storageFolder/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone an S3 Storage Folder resource.
      operationId: cloneAwsS3StorageFolder
      tags:
        - ControlledAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneControlledAwsS3StorageFolderRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneControlledAwsS3StorageFolderResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/aws/storageFolder/{resourceId}/credential:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/AwsCredentialAccessScope'
      - $ref: '#/components/parameters/AwsCredentialDurationSeconds'
    get:
      summary: Get a credential to access this S3 Storage Folder in the AWS CLI or
        SDK.
      operationId: getAwsS3StorageFolderCredential
      tags:
        - ControlledAwsResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledAwsResourceCredentialResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/ai-notebook-instances:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled Gcp AI Platform Notebook Instance
      operationId: createAiNotebookInstance
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledGcpAiNotebookInstanceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGcpAiNotebookInstanceResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGcpAiNotebookInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/ai-notebook-instances/create-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a GCP AI Platform Notebook create instance
        job.
      operationId: getCreateAiNotebookInstanceResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGcpAiNotebookInstanceResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGcpAiNotebookInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/ai-notebook-instances/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a GCP AI Platform Notebook delete instance
        job.
      operationId: getDeleteAiNotebookInstanceResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpAiNotebookInstanceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpAiNotebookInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/ai-notebook-instances/generateName:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Generate a cloud native controlled AI notebook instance name
      operationId: generateAiNotebookCloudInstanceId
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateGcpAiNotebookCloudIdRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloudAiNotebookIdResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/ai-notebook-instances/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled AI Notebook instance resource
      operationId: getAiNotebookInstance
      tags:
        - ControlledGcpResource
      responses:
        '200':
          description: Response to get AI Notebook instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GcpAiNotebookInstanceResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Delete a controlled GCP AI Notebook instance resource. This is async,

        because the operation can take ~5 minutes. OpenAPI does not support

        request body in DELETE, but async state requires it. Hence this is a POST.

        '
      operationId: deleteAiNotebookInstance
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteControlledGcpAiNotebookInstanceRequest'
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpAiNotebookInstanceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpAiNotebookInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled GCP notebook resource
      operationId: updateAiNotebookInstance
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledGcpAiNotebookInstanceRequestBody'
      responses:
        '200':
          description: Response to update an AI Notebook instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GcpAiNotebookInstanceResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/bqdatasets:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled BigQuery dataset
      operationId: createBigQueryDataset
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledGcpBigQueryDatasetRequestBody'
      responses:
        '200':
          description: Response to Create controlled BigQuery dataset
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedControlledGcpBigQueryDataset'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/bqdatasets/clone-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a gcp BigQuery dataset clone job.
      operationId: getCloneBigQueryDatasetResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/CloneControlledGcpBigQueryDatasetResponse'
        '202':
          $ref: '#/components/responses/CloneControlledGcpBigQueryDatasetResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/bqdatasets/generateName:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Generate a cloud native controlled big query dataset id
      operationId: generateBigQueryDatasetCloudId
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateGcpBigQueryDatasetCloudIDRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/BqDatasetCloudIdResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/bqdatasets/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled BigQuery dataset resource
      operationId: getBigQueryDataset
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/ControlledGcpBigQueryDatasetResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled BigQuery dataset resource
      operationId: updateBigQueryDataset
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledGcpBigQueryDatasetRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/ControlledGcpBigQueryDatasetResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete a controlled Bigquery dataset
      operationId: deleteBigQueryDataset
      tags:
        - ControlledGcpResource
      responses:
        '204':
          description: Success
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/bqdatasets/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a BigQuery dataset
      operationId: cloneBigQueryDataset
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneControlledGcpBigQueryDatasetRequest'
      responses:
        '200':
          $ref: '#/components/responses/CloneControlledGcpBigQueryDatasetResponse'
        '202':
          $ref: '#/components/responses/CloneControlledGcpBigQueryDatasetResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/buckets:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled Gcp bucket
      operationId: createBucket
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledGcpGcsBucketRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGcpGcsBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/buckets/clone-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a gcp bucket clone job.
      operationId: getCloneGcsBucketResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/ClonedControlledGcpGcsBucketResponse'
        '202':
          $ref: '#/components/responses/ClonedControlledGcpGcsBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/buckets/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a gcp bucket deletion job.
      operationId: getDeleteBucketResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpGcsBucketResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpGcsBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/buckets/generateName:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Generate a cloud native controlled Gcp bucket name
      operationId: generateGcpGcsBucketCloudName
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateGcpGcsBucketCloudNameRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcsBucketCloudNameResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/buckets/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled GCS bucket resource
      operationId: getBucket
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GetControlledGcpGcsBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled GCS Bucket resource.
      operationId: updateGcsBucket
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledGcpGcsBucketRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/UpdateControlledGcpGcsBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Delete a controlled GCS bucket resource. This is async, because the

        operation can take a few minutes. OpenAPI does not support request body

        in DELETE, but async state requires it. Hence this is a POST.

        '
      operationId: deleteBucket
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteControlledGcpGcsBucketRequest'
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpGcsBucketResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpGcsBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/buckets/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a GCS Bucket
      operationId: cloneGcsBucket
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneControlledGcpGcsBucketRequest'
      responses:
        '200':
          $ref: '#/components/responses/ClonedControlledGcpGcsBucketResponse'
        '202':
          $ref: '#/components/responses/ClonedControlledGcpGcsBucketResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/dataproc-clusters:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled Gcp Dataproc cluster
      operationId: createDataprocCluster
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledGcpDataprocClusterRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGcpDataprocClusterResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGcpDataprocClusterResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/dataproc-clusters/create-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a Dataproc cluster create job.
      operationId: getCreateDataprocClusterResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGcpDataprocClusterResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGcpDataprocClusterResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/dataproc-clusters/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a GCP Dataproc cluster delete job.
      operationId: getDeleteDataprocClusterResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpDataprocClusterResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpDataprocClusterResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/dataproc-clusters/generateName:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Generate a cloud native controlled Dataproc cluster name.
      operationId: generateDataprocClusterCloudId
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateGcpDataprocClusterCloudIdRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/DataprocClusterCloudIdResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/dataproc-clusters/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled Dataproc cluster resource
      operationId: getDataprocCluster
      tags:
        - ControlledGcpResource
      responses:
        '200':
          description: Response to get a Dataproc cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GcpDataprocClusterResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: "Delete a controlled Dataproc cluster resource. This is async, \nbecause\
        \ the operation can take ~5 minutes. OpenAPI does not support \nrequest body\
        \ in DELETE, but async state requires it. Hence this is a POST.\n"
      operationId: deleteDataprocCluster
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteControlledGcpDataprocClusterRequest'
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpDataprocClusterResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpDataprocClusterResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled Dataproc cluster resource.
      operationId: updateDataprocCluster
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledGcpDataprocClusterRequestBody'
      responses:
        '200':
          description: Response to update a Dataproc cluster.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GcpDataprocClusterResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/gce-instances:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new controlled GCP GCE Instance
      operationId: createGceInstance
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateControlledGcpGceInstanceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGcpGceInstanceResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGcpGceInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/gce-instances/create-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a GCP GCE create instance job.
      operationId: getCreateGceInstanceResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/CreatedControlledGcpGceInstanceResponse'
        '202':
          $ref: '#/components/responses/CreatedControlledGcpGceInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/gce-instances/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Retrieve information about a GCP GCE delete instance job.
      operationId: getDeleteGceInstanceResult
      tags:
        - ControlledGcpResource
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpGceInstanceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpGceInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/gce-instances/generateName:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Generate a controlled GCP GCE instance name
      operationId: generateGceInstanceCloudId
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GenerateGcpGceInstanceCloudIdRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GceInstanceCloudIdResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/controlled/gcp/gce-instances/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Get a controlled GCP GCE instance resource
      operationId: getGceInstance
      tags:
        - ControlledGcpResource
      responses:
        '200':
          description: Response to get GCE instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GcpGceInstanceResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: "Delete a controlled GCP GCE instance resource. This is async, \nbecause\
        \ the operation can take ~5 minutes. OpenAPI does not support \nrequest body\
        \ in DELETE, but async state requires it. Hence this is a POST.\n"
      operationId: deleteGceInstance
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteControlledGcpGceInstanceRequest'
      responses:
        '200':
          $ref: '#/components/responses/DeleteControlledGcpGceInstanceResponse'
        '202':
          $ref: '#/components/responses/DeleteControlledGcpGceInstanceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update a controlled GCP GCE instance resource
      operationId: updateGceInstance
      tags:
        - ControlledGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateControlledGcpGceInstanceRequestBody'
      responses:
        '200':
          description: Response to update an GCE instance.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GcpGceInstanceResource'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/aws/externalBucket:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new AWS S3 external bucket reference in a workspace.
      operationId: createS3ExternalBucketReference
      tags:
        - ReferencedAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAwsS3ExternalBucketReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/AwsS3ExternalBucketReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/aws/externalBucket/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to an AWS S3 external bucket from a workspace.
      operationId: getS3ExternalBucketReference
      tags:
        - ReferencedAwsResource
      responses:
        '200':
          $ref: '#/components/responses/AwsS3ExternalBucketReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete S3 External Bucket Reference
      operationId: deleteS3ExternalBucketReference
      tags:
        - ReferencedAwsResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Update name, description or folder of an S3 external bucket reference
        in a workspace
      operationId: updateS3ExternalBucketReferenceResource
      tags:
        - ReferencedAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateS3ExternalBucketReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/AwsS3ExternalBucketReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/aws/externalBucket/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone an s3 external bucket reference
      operationId: cloneAwsS3ExternalBucketReference
      tags:
        - ReferencedAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneReferencedResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneReferencedAwsS3ExternalBucketResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/aws/storageFolder:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new AWS S3 folder reference in a workspace.
      operationId: createS3FolderReference
      tags:
        - ReferencedAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAwsS3FolderReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/AwsS3FolderReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/aws/storageFolder/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to a bucket from a workspace.
      operationId: getS3FolderReference
      tags:
        - ReferencedAwsResource
      responses:
        '200':
          $ref: '#/components/responses/AwsS3FolderReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete S3 Folder Reference
      operationId: deleteS3FolderReference
      tags:
        - ReferencedAwsResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Update name, description or the referencing target of a s3 folder reference
        in a workspace
      operationId: updateS3FolderReferenceResource
      tags:
        - ReferencedAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateS3FolderReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/AwsS3FolderReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/aws/storageFolder/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone an s3 storage folder reference
      operationId: cloneAwsS3StorageFolderReference
      tags:
        - ReferencedAwsResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneReferencedResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneReferencedAwsS3FolderResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/aws/storageFolder/{resourceId}/credential:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
      - $ref: '#/components/parameters/AwsCredentialAccessScope'
      - $ref: '#/components/parameters/AwsCredentialDurationSeconds'
    get:
      summary: Get a credential to access this S3 Storage Folder in the AWS CLI or
        SDK.
      operationId: getS3FolderReferenceCredential
      tags:
        - ReferencedAwsResource
      responses:
        '200':
          $ref: '#/components/responses/AwsS3FolderCredentialsResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatasets:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new BigQuery dataset reference in a workspace.
      operationId: createBigQueryDatasetReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGcpBigQueryDatasetReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDatasetReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatasets/name/{name}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a BigQuery dataset by name.
      operationId: getBigQueryDatasetReferenceByName
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDatasetReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatasets/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to a BigQuery dataset from a workspace.
      operationId: getBigQueryDatasetReference
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDatasetReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Update name, description or referencing target of a BigQuery dataset
        reference in a workspace.
      operationId: updateBigQueryDatasetReferenceResource
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBigQueryDatasetReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDatasetReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete BigQuery dataset reference
      operationId: deleteBigQueryDatasetReference
      tags:
        - ReferencedGcpResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatasets/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a BigQuery Dataset
      operationId: cloneGcpBigQueryDatasetReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneReferencedResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneReferencedGcpBigQueryDatasetResourceResponse'
        '202':
          $ref: '#/components/responses/CloneReferencedGcpBigQueryDatasetResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatatables:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new BigQuery data table reference in a workspace.
      operationId: createBigQueryDataTableReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGcpBigQueryDataTableReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDataTableReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatatables/name/{name}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a BigQuery data table by name.
      operationId: getBigQueryDataTableReferenceByName
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDataTableReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatatables/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to a BigQuery data table from a workspace.
      operationId: getBigQueryDataTableReference
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDataTableReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: 'Update name, description, referencing target, or cloning instructions
        of a BigQuery data table reference in a workspace.

        '
      operationId: updateBigQueryDataTableReferenceResource
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateBigQueryDataTableReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpBigQueryDataTableReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete BigQuery data table reference
      operationId: deleteBigQueryDataTableReference
      tags:
        - ReferencedGcpResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bigquerydatatables/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a BigQuery Data table
      operationId: cloneGcpBigQueryDataTableReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneReferencedResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneReferencedGcpBigQueryDataTableResourceResponse'
        '202':
          $ref: '#/components/responses/CloneReferencedGcpBigQueryDataTableResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bucket/objects:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new GCS object reference in a workspace.
      operationId: createGcsObjectReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGcpGcsObjectReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsObjectReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bucket/objects/name/{name}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a Gcp GCS object by name.
      operationId: getGcsObjectReferenceByName
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsObjectReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bucket/objects/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to a GCS object from a workspace.
      operationId: getGcsObjectReference
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsObjectReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Update name, description or referencing target of a bucket object reference
        in a workspace.
      operationId: updateBucketObjectReferenceResource
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGcsBucketObjectReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsObjectReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete Gcp GCS object reference
      operationId: deleteGcsObjectReference
      tags:
        - ReferencedGcpResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/bucket/objects/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a referenced GCS object resource
      operationId: cloneGcpGcsObjectReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneReferencedResourceRequestBody'
      responses:
        '200':
          description: Response for successful GCS object reference clone
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneReferencedGcpGcsObjectResourceResult'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/buckets:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new GCS bucket reference in a workspace.
      operationId: createBucketReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGcpGcsBucketReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsBucketReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/buckets/name/{name}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a Gcp bucket by name.
      operationId: getBucketReferenceByName
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsBucketReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/buckets/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to a bucket from a workspace.
      operationId: getBucketReference
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsBucketReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    post:
      summary: Update name, description or the referencing target of a bucket reference
        in a workspace
      operationId: updateBucketReferenceResource
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGcsBucketReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GcpGcsBucketReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete Gcp bucket reference
      operationId: deleteBucketReference
      tags:
        - ReferencedGcpResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gcp/buckets/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a referenced GCS Bucket resource
      operationId: cloneGcpGcsBucketReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneReferencedResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneReferencedGcpGcsBucketResourceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gitrepos:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Create a new Git repository reference in a workspace.
      operationId: createGitRepoReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateGitRepoReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GitRepoReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gitrepos/name/{name}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a Git repo referenced resource by name
      operationId: getGitRepoReferenceByName
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GitRepoReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gitrepos/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to a Git repository from a workspace.
      operationId: getGitRepoReference
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/GitRepoReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Update name, description or referencing target of a Git repository
        reference in a workspace.
      operationId: updateGitRepoReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateGitRepoReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/GitRepoReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Delete Git repository reference
      operationId: deleteGitRepoReference
      tags:
        - ReferencedGcpResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/gitrepos/{resourceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      summary: Clone a Git repository
      operationId: cloneGitRepoReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneReferencedResourceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/CloneReferencedGitRepoResourceResponse'
        '202':
          $ref: '#/components/responses/CloneReferencedGitRepoResourceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/terra/workspaces:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Creates a reference to a Terra workspace
      operationId: createTerraWorkspaceReference
      tags:
        - ReferencedGcpResource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateTerraWorkspaceReferenceRequestBody'
      responses:
        '200':
          $ref: '#/components/responses/TerraWorkspaceReferenceResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/terra/workspaces/name/{name}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Name'
    get:
      summary: Gets a reference to a Terra workspace by name
      operationId: getTerraWorkspaceReferenceByName
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/TerraWorkspaceReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/terra/workspaces/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: Gets a reference to a Terra workspace
      operationId: getTerraWorkspaceReference
      tags:
        - ReferencedGcpResource
      responses:
        '200':
          $ref: '#/components/responses/TerraWorkspaceReferenceResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    delete:
      summary: Deletes a referenced to a Terra workspace
      operationId: deleteTerraWorkspaceReference
      tags:
        - ReferencedGcpResource
      responses:
        '204':
          description: OK
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/referenced/{resourceId}/resolve:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: 'Resolve a referenced resource to its underlying resource. If the resource
        is not a reference to a WSM resource, then resourceAttributes will be null.

        '
      operationId: resolve
      tags:
        - Resource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResolvedResource'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/{resourceId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    get:
      summary: 'Retrieve a resource in a workspace.

        '
      operationId: getResource
      tags:
        - Resource
      parameters:
        - $ref: '#/components/parameters/ResolveReference'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDescription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: 'Update the common metadata fields of a resource in a workspace.

        '
      operationId: updateResource
      tags:
        - Resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateCommonResourceMetadataBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResourceDescription'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/resources/{resourceId}/properties:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/ResourceId'
    post:
      operationId: updateResourceProperties
      deprecated: true
      summary: 'Update resource properties. Only properties with keys in request are

        updated. Properties with keys not in request are not updated.

        '
      tags:
        - Resource
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Properties'
      responses:
        '204':
          description: Properties update sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      operationId: deleteResourceProperties
      deprecated: true
      tags:
        - Resource
      summary: 'Delete resource properties. Only properties with keys in request are

        deleted. Properties with keys not in request are not deleted.

        '
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PropertyKeys'
      responses:
        '204':
          description: Properties delete sucessfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/roles:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    get:
      summary: Read all IAM roles and their members in a workspace.
      operationId: getRoles
      tags:
        - Workspace
      responses:
        '200':
          description: Response to list permissions calls
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoleBindingList'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/roles/{role}/members:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Role'
    post:
      summary: Grant an IAM role to a user or group.
      operationId: grantRole
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/GrantRoleRequestBody'
      responses:
        '204':
          description: Role granted successfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v1/{workspaceId}/roles/{role}/members/{memberEmail}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/Role'
      - $ref: '#/components/parameters/MemberEmail'
    delete:
      summary: Remove an IAM role from a user or group.
      operationId: removeRole
      tags:
        - Workspace
      responses:
        '204':
          description: Role removed successfully
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2:
    post:
      summary: Create a new Workspace and a new cloud context asynchronously
      operationId: createWorkspaceV2
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceV2Request'
      responses:
        '200':
          $ref: '#/components/responses/CreateWorkspaceV2Response'
        '202':
          $ref: '#/components/responses/CreateWorkspaceV2Response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/crg/update-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Get the result of a async job to update CRG workspaces
      operationId: getUpdateWorkspacesByCrgResult
      tags:
        - Workspace
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/crg/{crgId}:
    get:
      summary: Admin operation to list workspaces in a CRG
      operationId: getWorkspacesByCrg
      tags:
        - Workspace
      parameters:
        - $ref: '#/components/parameters/CloudResourceGroupId'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceInfoList'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
    patch:
      summary: Async admin operation to update workspaces in a CRG
      operationId: updateWorkspacesByCrg
      tags:
        - Workspace
      parameters:
        - $ref: '#/components/parameters/CloudResourceGroupId'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspacesByCrgRequest'
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/filtered:
    post:
      summary: Filter workspaces
      operationId: filterWorkspaces
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceFilter'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceDescriptionList'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/JobId'
    get:
      summary: Get the result of a async job to create a workspace.
      operationId: getCreateWorkspaceV2Result
      tags:
        - Workspace
      responses:
        '200':
          $ref: '#/components/responses/CreateWorkspaceV2Response'
        '202':
          $ref: '#/components/responses/CreateWorkspaceV2Response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/{workspaceId}/clone:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: Clone a CRG workspace and its eligible resources
      description: 'Use the v1 endpoints and schema for polling for completion and

        collecting the results.

        '
      operationId: cloneWorkspaceV2
      tags:
        - Workspace
      requestBody:
        description: Details of workspace clone operation
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneWorkspaceV2Request'
      responses:
        '200':
          $ref: '#/components/responses/CloneWorkspaceV2Response'
        '202':
          $ref: '#/components/responses/CloneWorkspaceV2Response'
        '400':
          $ref: '#/components/responses/BadRequest'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/{workspaceId}/clone-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: 'Gets the result of an async workspace clone.

        Note: the workspaceId is the SOURCE workspace id

        '
      operationId: getCloneWorkspaceV2Result
      tags:
        - Workspace
      responses:
        '200':
          $ref: '#/components/responses/CloneWorkspaceV2Response'
        '202':
          $ref: '#/components/responses/CloneWorkspaceV2Response'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/{workspaceId}/cloudcontexts/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: 'Gets the result of an async cloud context delete.

        '
      operationId: getDeleteCloudContextV2Result
      tags:
        - Workspace
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/{workspaceId}/cloudcontexts/{cloudContext}/delete:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/CloudContext'
    post:
      summary: 'Deletes a cloud context and all of its data from a workspace.

        This async delete requires a body, but that is not allowed on standard

        delete method, so this is done as a POST and labeled as delete in the path.

        '
      operationId: deleteCloudContextV2
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteCloudContextV2Request'
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/{workspaceId}/delete:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
    post:
      summary: 'Deletes a workspace and all of its cloud contexts and data.

        This async delete requires a body, but that is not allowed on standard

        delete method, so this is done as a POST and labeled as delete in the path.

        '
      operationId: deleteWorkspaceV2
      tags:
        - Workspace
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteWorkspaceV2Request'
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /api/workspaces/v2/{workspaceId}/delete-result/{jobId}:
    parameters:
      - $ref: '#/components/parameters/WorkspaceId'
      - $ref: '#/components/parameters/JobId'
    get:
      summary: 'Gets the result of an async workspace delete.

        '
      operationId: getDeleteWorkspaceV2Result
      tags:
        - Workspace
      responses:
        '200':
          $ref: '#/components/responses/JobResultResponse'
        '202':
          $ref: '#/components/responses/JobResultResponse'
        '403':
          $ref: '#/components/responses/PermissionDenied'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/ServerError'
  /status:
    get:
      security: []
      summary: Returns the operational status of the service
      operationId: serviceStatus
      tags:
        - Unauthenticated
      responses:
        '200':
          description: Service can process requests
        '500':
          description: 'Service cannot process requests. That might be because dependent
            services are

            unavailable, or because there is a problem with the service itself.

            '
  /version:
    get:
      security: []
      summary: Returns the deployed version of the service
      operationId: serviceVersion
      tags:
        - Unauthenticated
      responses:
        '200':
          description: System version response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemVersion'
components:
  parameters:
    ApplicationId:
      name: applicationId
      in: path
      description: A string used to identify an application in the workspace manager
      required: true
      schema:
        type: string
    AwsCredentialAccessScope:
      name: accessScope
      in: query
      description: Access to request for an AWS credential or Console URL.
      required: true
      schema:
        $ref: '#/components/schemas/AwsCredentialAccessScope'
    AwsCredentialDurationSeconds:
      name: durationSeconds
      in: query
      description: Duration for credential to access controlled AWS resource in seconds.
      required: true
      schema:
        $ref: '#/components/schemas/AwsCredentialDurationSeconds'
    CloudContext:
      name: cloudContext
      in: path
      description: A cloud platform which holds context for a workspace.
      required: true
      schema:
        $ref: '#/components/schemas/CloudPlatform'
    CloudResourceGroupId:
      name: crgId
      in: path
      description: A UUID used to identify a pod in a workspace.
      required: true
      schema:
        type: string
        format: uuid
    FolderId:
      name: folderId
      in: path
      description: An UUID used to identify a folder in a workspace.
      required: true
      schema:
        type: string
        format: uuid
    JobId:
      name: jobId
      in: path
      description: A String ID to used to identify a job
      required: true
      schema:
        type: string
    JobStateFilter:
      name: jobState
      in: query
      description: The state of jobs to return (ALL, ACTIVE, COMPLETED)
      required: false
      schema:
        $ref: '#/components/schemas/JobStateFilter'
    Limit:
      name: limit
      in: query
      description: The maximum number of items to return. Default 10
      required: false
      schema:
        type: integer
        minimum: 1
        default: 10
    MemberEmail:
      name: memberEmail
      in: path
      description: A user or group's email. Used for adding or removing IAM permissions
      required: true
      schema:
        type: string
    MinimumHighestRole:
      name: minimumHighestRole
      in: query
      description: 'Returned workspace''s highest role must be at least this. If

        minimumHighestRole is READER and requester only has DISCOVERER role,

        workspace is not returned. If not set, defaults to READER.

        '
      required: false
      schema:
        $ref: '#/components/schemas/IamRole'
    Name:
      name: name
      in: path
      description: A name used to identify an object in the workspace manager
      required: true
      schema:
        $ref: '#/components/schemas/Name'
    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result
        set.
      required: false
      schema:
        type: integer
        minimum: 0
        default: 0
    PageToken:
      name: pageToken
      in: query
      description: A previously returned page token describing where to resume an
        enumeration.
      required: false
      schema:
        type: string
    Platform:
      name: platform
      in: query
      description: The cloud platform (gcp, azure, aws)
      required: true
      schema:
        $ref: '#/components/schemas/CloudPlatform'
    ResolveReference:
      name: resolveReference
      in: query
      description: Optionally request that referenced resources be resolved against
        their sources
      required: false
      schema:
        type: boolean
        default: false
    ResourceId:
      name: resourceId
      in: path
      description: A UUID used to identify a controlled resource in a workspace.
      required: true
      schema:
        type: string
        format: uuid
    ResourceName:
      name: name
      in: query
      description: A name used to identify an object in the workspace manager
      required: false
      schema:
        $ref: '#/components/schemas/Name'
    ResourceType:
      name: resource
      in: query
      description: Filter on a specific resource type
      required: false
      schema:
        $ref: '#/components/schemas/ResourceType'
    ResourceTypes:
      name: resourceTypes
      in: query
      required: false
      description: 'A list of resource types to filter on.

        '
      schema:
        type: array
        items:
          type: string
    Role:
      name: role
      in: path
      description: An IAM role
      required: true
      schema:
        $ref: '#/components/schemas/IamRole'
    StewardshipType:
      name: stewardship
      in: query
      description: Filter on a stewardship type
      required: false
      schema:
        $ref: '#/components/schemas/StewardshipType'
    WetRun:
      name: wetRun
      in: query
      description: Whether this is a wet run.
      required: false
      schema:
        type: boolean
    WorkspaceId:
      name: workspaceId
      in: path
      description: A UUID or UFID used to identify a workspace in the workspace manager
      required: true
      schema:
        type: string
    WorkspaceUserFacingId:
      name: workspaceUserFacingId
      in: path
      description: 'Human-settable, mutable id. ID must have 3-63 characters, contain

        lowercase letters, numbers, dashes, or underscores, and start with

        lowercase letter or number.

        '
      required: true
      schema:
        type: string
    WsmPolicyDepth:
      in: query
      name: depth
      required: false
      schema:
        $ref: '#/components/schemas/WsmPolicyDepth'
      description: The depth of policy explain on a workspace's policy sources.
    WsmPolicyLocation:
      name: location
      in: query
      description: The geographic location of a data center (e.g. iowa, Illinois)
      required: false
      schema:
        type: string
  responses:
    AwsS3ExternalBucketReferenceResponse:
      description: Response containing the referenced S3 External Bucket.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsS3ExternalBucketReferenceResource'
    AwsS3FolderCredentialsResponse:
      description: AWS credentials for an s3 folder
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsCredential'
    AwsS3FolderReferenceResponse:
      description: Response containing a reference to a S3 Folder.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsS3StorageFolderResource'
    BadRequest:
      description: Bad request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    BqDatasetCloudIdResponse:
      description: A valid Big query Dataset name per https://cloud.google.com/bigquery/docs/datasets#dataset-naming.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/BqDatasetCloudId'
    CloneControlledAwsS3ExternalBucketResponse:
      description: Response for an externally-managed AWS S3 Storage Bucket clone.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneControlledAwsS3ExternalBucketResult'
    CloneControlledAwsS3StorageFolderResponse:
      description: Response for an AWS S3 Storage Folder clone.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneControlledAwsS3StorageFolderResult'
    CloneControlledFlexibleResourceResponse:
      description: Response for successful flexible resource clone.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneControlledFlexibleResourceResult'
    CloneControlledGcpBigQueryDatasetResponse:
      description: Response to clone BigQuery dataset operation where source dataset
        is controlled. (Destination dataset may be controlled or referenced.)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneControlledGcpBigQueryDatasetResult'
    CloneReferencedAwsS3ExternalBucketResourceResponse:
      description: Response for successful AWS S3 external bucket reference clone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneReferencedAwsS3ExternalBucketReferencedResourceResult'
    CloneReferencedAwsS3FolderResourceResponse:
      description: Response for successful AWS S3 bucket reference clone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneReferencedAwsS3FolderReferencedResourceResult'
    CloneReferencedGcpBigQueryDataTableResourceResponse:
      description: Response for successful BigQuery data table reference clone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneReferencedGcpBigQueryDataTableResourceResult'
    CloneReferencedGcpBigQueryDatasetResourceResponse:
      description: Response for successful BigQuery dataset reference clone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneReferencedGcpBigQueryDatasetResourceResult'
    CloneReferencedGcpGcsBucketResourceResponse:
      description: Response for successful GCS Bucket reference clone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneReferencedGcpGcsBucketResourceResult'
    CloneReferencedGitRepoResourceResponse:
      description: Response for successful Git Repo resource reference clone
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneReferencedGitRepoResourceResult'
    CloneWorkspaceResponse:
      description: Response to clone workspace request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneWorkspaceResult'
    CloneWorkspaceV2Response:
      description: Response to clone workspace V2 request
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneWorkspaceV2Result'
    ClonedControlledGcpGcsBucketResponse:
      description: Response to GCS bucket clone operation where source bucket is controlled.
        (Destination bucket may be controlled or referenced.)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CloneControlledGcpGcsBucketResult'
    CloudAiNotebookIdResponse:
      description: A valid AI notebook name per https://cloud.google.com/vertex-ai/docs/workbench/user-managed/create-new.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AiNotebookCloudId'
    Conflict:
      description: Request conflicts with current state
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ControlledFlexibleResourceResponse:
      description: Response containing a controlled flexible resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/FlexibleResource'
    ControlledGcpBigQueryDatasetResponse:
      description: Response containing a controlled BigQuery dataset
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcpBigQueryDatasetResource'
    CreateCloudContextResultResponse:
      description: Job is complete (succeeded or failed)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateCloudContextResult'
    CreateControlledAwsEc2InstanceResponse:
      description: Response to create controlled AWS EC2 Virtual Machine instance
        resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateControlledAwsEc2InstanceResult'
    CreateControlledAwsS3ExternalBucketResponse:
      description: Response to create controlled externally-managed AWS S3 Storage
        Bucket resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedControlledAwsS3ExternalBucket'
    CreateControlledAwsS3StorageFolderResponse:
      description: Response to create controlled AWS S3 Storage Folder resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedControlledAwsS3StorageFolder'
    CreateControlledAwsSageMakerNotebookResponse:
      description: Response to create controlled AWS SageMaker Notebook instance resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateControlledAwsSageMakerNotebookResult'
    CreateWorkspaceV2Response:
      description: Description of a workspace
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreateWorkspaceV2Result'
    CreatedControlledGcpAiNotebookInstanceResponse:
      description: Response to Create controlled resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedControlledGcpAiNotebookInstanceResult'
    CreatedControlledGcpDataprocClusterResponse:
      description: Response for creating a controlled Dataproc cluster resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedControlledGcpDataprocClusterResult'
    CreatedControlledGcpGceInstanceResponse:
      description: Response to Create controlled resource
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedControlledGcpGceInstanceResult'
    CreatedControlledGcpGcsBucketResponse:
      description: Response to Create controlled Gcs bucket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/CreatedControlledGcpGcsBucket'
    DataprocClusterCloudIdResponse:
      description: A valid Dataproc cluster name per https://cloud.google.com/dataproc/docs/guides/create-cluster.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DataprocClusterCloudId'
    DeleteControlledAwsResourceResponse:
      description: Response Payload for deleting AWS controlled resources.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteControlledAwsResourceResult'
    DeleteControlledGcpAiNotebookInstanceResponse:
      description: Response Payload for deleting a GCP AI Notebook
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteControlledGcpAiNotebookInstanceResult'
    DeleteControlledGcpDataprocClusterResponse:
      description: Response for deleting a controlled Dataproc cluster resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteControlledGcpDataprocClusterResult'
    DeleteControlledGcpGceInstanceResponse:
      description: Response Payload for deleting a GCP GCE instance
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteControlledGcpGceInstanceResult'
    DeleteControlledGcpGcsBucketResponse:
      description: Response Payload for deleting a Gcs bucket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/DeleteControlledGcpGcsBucketResult'
    GceInstanceCloudIdResponse:
      description: A valid GCE instance name per https://cloud.google.com/compute/docs/reference/rest/v1/instances.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GceInstanceCloudId'
    GcpBigQueryDataTableReferenceResponse:
      description: Response containing a reference to a BiqQuery data table.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcpBigQueryDataTableResource'
    GcpBigQueryDatasetReferenceResponse:
      description: Response containing a reference to a BiqQuery dataset.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcpBigQueryDatasetResource'
    GcpGcsBucketReferenceResponse:
      description: Response containing a reference to a Gcp bucket.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcpGcsBucketResource'
    GcpGcsObjectReferenceResponse:
      description: Response containing a reference to a Gcp GCS object.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcpGcsObjectResource'
    GcsBucketCloudNameResponse:
      description: A valid bucket name per https://cloud.google.com/storage/docs/naming-buckets.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcsBucketCloudName'
    GenerateAwsResourceCloudNameResponse:
      description: Response to generate a AWS resource cloud name.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsResourceCloudName'
    GetControlledAwsEc2InstanceResponse:
      description: Response to get AWS EC2 Virtual Machine resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsEc2InstanceResource'
    GetControlledAwsResourceCredentialResponse:
      description: Response to get a AWS resource credential.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsCredential'
    GetControlledAwsS3ExternalBucketResponse:
      description: Response to get externally-managed AWS S3 Storage Bucket resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsS3ExternalBucketResource'
    GetControlledAwsS3StorageFolderResponse:
      description: Response to get AWS S3 Storage Folder resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsS3StorageFolderResource'
    GetControlledAwsSageMakerNotebookResponse:
      description: Response to get AWS SageMaker Notebook resource.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsSageMakerNotebookResource'
    GetControlledGcpGcsBucketResponse:
      description: Response to get bucket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcpGcsBucketResource'
    GitRepoReferenceResponse:
      description: Response containing a reference to a git repository.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GitRepoResource'
    JobResultResponse:
      description: Result of a job (failed or succeeded)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/JobResult'
    LoadUrlListResponse:
      description: Response to start a storage data transfer from a url list to a
        gcs bucket
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/LoadUrlListResult'
    NotFound:
      description: Not found (or unauthorized)
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    PermissionDenied:
      description: Permission denied
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    ServerError:
      description: Server error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorReport'
    TerraWorkspaceReferenceResponse:
      description: Response containing a reference to a Terra workspace
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TerraWorkspaceResource'
    UpdateControlledAwsS3ExternalBucketResponse:
      description: Response for an externally-managed AWS S3 Storage Bucket update.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsS3ExternalBucketResource'
    UpdateControlledAwsS3StorageFolderResponse:
      description: Response for an AWS S3 Storage Folder update.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsS3StorageFolderResource'
    UpdateControlledAwsSageMakerNotebookResponse:
      description: Response for an AWS SageMaker Notebook update.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/AwsSageMakerNotebookResource'
    UpdateControlledGcpGcsBucketResponse:
      description: Reponse to GCP GCS Bucket update.
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GcpGcsBucketResource'
  schemas:
    AccessOnDemandOperation:
      type: string
      description: Enum of requested AoD operations
      enum:
        - GRANT_SUPPORT
        - REVOKE_SUPPORT
    AccessOnDemandRequest:
      type: object
      description: UM Access on demand request
      required:
        - email
        - reason
        - operation
      properties:
        email:
          description: email to grant/revoke
          type: string
        reason:
          description: required reason for access demand
          type: string
        operation:
          $ref: '#/components/schemas/AccessOnDemandOperation'
    AccessScope:
      type: string
      description: Specifies the resource as shared or private
      enum:
        - SHARED_ACCESS
        - PRIVATE_ACCESS
    AiNotebookCloudId:
      description: Ai notebook Cloud native ID
      type: object
      required:
        - generatedAiNotebookAiNotebookCloudId
      properties:
        generatedAiNotebookAiNotebookCloudId:
          type: string
    ApplicationState:
      description: State of an application in the system
      type: string
      enum:
        - OPERATING
        - DEPRECATED
        - DECOMMISSIONED
    AwsContext:
      type: object
      description: The AWS cloud context associated with a workspace.
      properties:
        majorVersion:
          description: The major version of the cloud context.
          type: string
        organizationId:
          description: The ID of the AWS organization associated with the workspace.
          type: string
        accountId:
          description: The ID of the AWS account associated with the workspace.
          type: string
        tenantAlias:
          description: The name of the Terra tenant associated with the workspace.
          type: string
        environmentAlias:
          description: The name of the Terra environment associated with the workspace.
          type: string
        applicationSecurityGroups:
          type: object
          additionalProperties:
            type: object
          description: 'Map of AWS Regions to Security Groups allowing connectivity
            between Workspace Application

            VM Instances within the Landing Zone in the region.

            '
        operationState:
          $ref: '#/components/schemas/OperationState'
    AwsCredential:
      description: AWS CLI/SDK-compatible credential to access AWS resources.
      type: object
      properties:
        Version:
          type: integer
        AccessKeyId:
          type: string
        SecretAccessKey:
          type: string
        SessionToken:
          type: string
        Expiration:
          type: string
          format: date-time
    AwsCredentialAccessScope:
      type: string
      enum:
        - READ_ONLY
        - WRITE_READ
    AwsCredentialDurationSeconds:
      type: integer
      minimum: 900
      maximum: 3600
    AwsEc2InstanceAttributes:
      description: AWS EC2 Virtual Machine instance resource properties included in
        post-creation get.
      type: object
      properties:
        instanceId:
          description: The ID of the EC2 Virtual Machine instance
          type: string
    AwsEc2InstanceCreationParameters:
      description: EC2 Virtual Machine specific properties to be set on creation.
        These are a subset of the values accepted by the AWS EC2 Virtual Machine API.
      type: object
      properties:
        instanceType:
          description: A valid EC2 instance type per https://aws.amazon.com/ec2/instance-types/
          type: string
          default: t3.medium
        rootDiskSizeGiB:
          description: Size in GiB of instance root volume
          type: integer
          default: 100
        diskType:
          description: Data volume EBS disk type.  Must be a valid EBS disk type per
            https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ebs-volume-types.html
          type: string
          default: gp3
        diskSizeGiB:
          description: Size in GiB of data volume to attach to the instance
          type: integer
          default: 16
        diskDeviceName:
          description: Device filename to map to the data volume
          type: string
          default: /dev/sdh
        userData:
          description: User data to pass when creating the EC2 instance.  See https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instancedata-add-user-data.html
          type: string
          default: ''
        region:
          description: A valid EC2 Virtual Machine region
          type: string
        tags:
          description: key-value pair tags on the VM. User defined tags must have
            vwbusr prefix
          type: object
          additionalProperties:
            type: string
    AwsEc2InstanceResource:
      type: object
      description: Description of an AWS EC2 Virtual Machine instance resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/AwsEc2InstanceAttributes'
    AwsReferencedS3ExternalBucketCreationParameters:
      description: Identifiers for a Controlled S3 External Bucket resource to reference.
      type: object
      required:
        - sourceWorkspaceId
        - sourceResourceId
      properties:
        sourceWorkspaceId:
          description: Workspace ID in which the S3 External Bucket controlled resource
            to be referenced exists.
          type: string
          format: uuid
        sourceResourceId:
          description: Resource ID of the S3 External Bucket controlled resource to
            be referenced
          type: string
          format: uuid
    AwsReferencedS3FolderCreationParameters:
      description: S3 Storage Folder specific properties to be set on creation. These
        are a subset of the values accepted by the AWS S3 Storage API.
      type: object
      required:
        - s3Uri
      properties:
        s3Uri:
          description: s3 uri, e.g. s3://folder/subfolder
          type: string
        region:
          description: region of the s3 folder. Must specified if the s3 folder being
            referenced is not provisioned by workbench (i.e. external s3 bucket).
          type: string
    AwsResourceCloudName:
      description: A valid cloud name for resource.
      type: object
      required:
        - awsResourceCloudName
      properties:
        awsResourceCloudName:
          type: string
    AwsResourceDescription:
      description: Description of an AWS Controlled Resource as Returned by AWS Describe*
        API calls
      type: object
      properties:
        resourceDescription:
          type: object
    AwsS3ExternalBucketAttributes:
      description: AWS S3 External Bucket resource properties included in post-creation
        get.
      type: object
      required:
        - bucketName
        - prefix
        - account
        - region
        - tagPrefix
      properties:
        bucketName:
          description: The name of the external S3 bucket to which this resource provides
            access.
          type: string
        prefix:
          description: The prefix within the external S3 bucket to limit access to
            (optional).
          type: string
        account:
          description: ID of the AWS account that the external S3 bucket resides in.
          type: string
        region:
          description: AWS region that the external S3 bucket resides in.
          type: string
        tagPrefix:
          description: Prefix to apply to tag keys used in IAM policies allowing access
            to the resource.
          type: string
    AwsS3ExternalBucketCreationParameters:
      description: Properties of the externally managed S3 Bucket that this resource
        will provide access to.
      type: object
      required:
        - bucketName
        - accountId
        - region
      properties:
        bucketName:
          description: An existing S3 Bucket name to provide access to.
          type: string
        accountId:
          description: Account number of AWS Account that the S3 Bucket exists in.
          type: string
        prefix:
          description: Object prefix to limit access to in the external bucket (optional).
          type: string
          default: ''
        tagPrefix:
          description: Prefix for Principal tag key to be used in external IAM policies.
          type: string
          default: vwb-
        region:
          description: The AWS Region that the S3 Bucket exists in.
          type: string
    AwsS3ExternalBucketReferenceAttributes:
      description: AWS S3 External Bucket reference properties included in post-creation
        get.
      type: object
      required:
        - sourceWorkspaceId
        - sourceResourceId
      properties:
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
    AwsS3ExternalBucketReferenceResource:
      type: object
      description: Description of a reference to an externally managed AWS S3 Storage
        Bucket resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/AwsS3ExternalBucketReferenceAttributes'
    AwsS3ExternalBucketResource:
      type: object
      description: Description of an externally managed AWS S3 Storage Bucket resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/AwsS3ExternalBucketAttributes'
    AwsS3ExternalBucketUpdateParameters:
      description: Properties of the externally managed S3 Bucket to update.
      type: object
      properties:
        prefix:
          description: Optional. Updated object prefix to limit access to in the external
            bucket. Field will not be updated if this is omitted.
          type: string
        tagPrefix:
          description: Optional. Updated prefix for Principal tag key to be used in
            external IAM policies. Field will not be updated if this is omitted.
          type: string
    AwsS3StorageFolderAttributes:
      description: AWS S3 Storage Folder resource properties included in post-creation
        get.
      type: object
      properties:
        bucketName:
          description: The name of the S3 bucket in which the Terra Storage Folder
            was allocated.
          type: string
        prefix:
          description: The prefix within the S3 bucket.
          type: string
        s3Uri:
          description: s3 URI path of the s3 folder
          type: string
        region:
          description: region of the s3 folder
          type: string
    AwsS3StorageFolderCreationParameters:
      description: S3 Storage Folder specific properties to be set on creation. These
        are a subset of the values accepted by the AWS S3 Storage API.
      type: object
      properties:
        folderName:
          description: A valid folder name per https://docs.aws.amazon.com/AmazonS3/latest/userguide/object-keys.html.
          type: string
        region:
          description: A valid S3 Storage Folder region per https://docs.aws.amazon.com/general/latest/gr/s3.html.
          type: string
    AwsS3StorageFolderResource:
      type: object
      description: Description of an AWS S3 Storage Folder resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/AwsS3StorageFolderAttributes'
    AwsSageMakerNotebookAttributes:
      description: AWS SageMaker Notebook instance resource properties included in
        post-creation get.
      type: object
      properties:
        instanceName:
          description: The name of the SageMaker Notebook instance
          type: string
        instanceType:
          description: The type of the SageMaker Notebook instance
          type: string
    AwsSageMakerNotebookCreationParameters:
      description: SageMaker Notebook specific properties to be set on creation. These
        are a subset of the values accepted by the AWS SageMaker Notebook API.
      type: object
      properties:
        instanceName:
          description: A valid instance name per https://docs.aws.amazon.com/sageMaker/latest/APIReference/API_CreateNotebookInstance.html#sageMaker-CreateNotebookInstance-request-NotebookInstanceName
          type: string
        instanceType:
          description: A valid instance type per https://docs.aws.amazon.com/general/latest/gr/sageMaker.html
          type: string
          default: ml.t3.medium
        region:
          description: A valid SageMaker Notebook region per https://docs.aws.amazon.com/general/latest/gr/sageMaker.html.
          type: string
    AwsSageMakerNotebookResource:
      type: object
      description: Description of an AWS SageMaker Notebook instance resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/AwsSageMakerNotebookAttributes'
    BackfillApplicationsRequest:
      type: object
      description: UM Access on demand request
      required:
        - applicationAble
        - applicationIds
      properties:
        applicationAble:
          description: Whether to enable or disable the applications
          type: string
          enum:
            - ENABLE
            - DISABLE
        applicationIds:
          description: application ids
          type: array
          items:
            type: string
    BqDatasetCloudId:
      type: object
      required:
        - generatedDatasetCloudId
      properties:
        generatedDatasetCloudId:
          type: string
    CloneControlledAwsS3ExternalBucketRequestBody:
      description: Values to be assigned with the cloned S3 External Bucket Reference
        resource for a given source S3 External Bucket controlled resource. Only COPY_REFERENCE
        and LINK_REFERENCE cloning instructions are defined for External Bucket resources.
        Set name, displayName, and description null to maintain the original values.
      type: object
      required:
        - destinationWorkspaceId
      properties:
        destinationWorkspaceId:
          description: ID of workspace to be cloned into
          type: string
          format: uuid
        destinationFolderId:
          $ref: '#/components/schemas/FolderId'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
    CloneControlledAwsS3ExternalBucketResult:
      description: Result of successful S3 External Bucket resource clone.
      type: object
      required:
        - effectiveCloningInstructions
        - sourceWorkspaceId
        - sourceResourceId
        - resource
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: Workspace ID of the source resource for this clone.
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource.
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/AwsS3ExternalBucketReferenceResource'
    CloneControlledAwsS3StorageFolderRequestBody:
      description: Values to be assigned with the cloned S3 Storage Folder Reference
        resource for a given source S3 Storage Folder controlled resource. Only COPY_REFERENCE
        and LINK_REFERENCE cloning instructions are defined for S3 Storage Folder
        resources. Set name, displayName, and description null to maintain the original
        values.
      type: object
      required:
        - destinationWorkspaceId
      properties:
        destinationWorkspaceId:
          description: ID of workspace to be cloned into
          type: string
          format: uuid
        destinationFolderId:
          $ref: '#/components/schemas/FolderId'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
    CloneControlledAwsS3StorageFolderResult:
      description: Result of successful S3 Storage Folder resource clone.
      type: object
      required:
        - effectiveCloningInstructions
        - sourceWorkspaceId
        - sourceResourceId
        - resource
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: Workspace ID of the source resource for this clone.
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource.
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/AwsS3StorageFolderResource'
    CloneControlledFlexibleResourceRequest:
      description: Values to be assigned with the cloned flex resource for a given
        source flex resource. Only COPY_RESOURCE and COPY_NOTHING are defined for
        flex resources. Set name, displayName, and description null to maintain the
        original values.
      type: object
      required:
        - destinationWorkspaceId
      properties:
        destinationWorkspaceId:
          description: ID of workspace to be cloned into
          type: string
          format: uuid
        destinationFolderId:
          $ref: '#/components/schemas/FolderId'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
    CloneControlledFlexibleResourceResult:
      description: Result of successful flexible resource clone.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: Workspace ID of the source resource for this clone.
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource.
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/FlexibleResource'
    CloneControlledGcpBigQueryDatasetRequest:
      description: Values to assign to the cloned dataset for a given source dataset.
        Leave name and description null to take the source object's values.
      type: object
      required:
        - destinationWorkspaceId
        - jobControl
      properties:
        destinationWorkspaceId:
          description: ID of workspace to be cloned into
          type: string
          format: uuid
        destinationFolderId:
          $ref: '#/components/schemas/FolderId'
        destinationDatasetName:
          description: Name for destination dataset. Must not be set if cloningInstructions
            is COPY_REFERENCE. Letters, numbers and underscores only.
          type: string
        defaultTableLifetime:
          $ref: '#/components/schemas/DefaultTableLifetime'
        defaultPartitionLifetime:
          $ref: '#/components/schemas/DefaultPartitionLifetime'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        location:
          description: A valid dataset location per https://cloud.google.com/bigquery/docs/locations.
            Must not be set if cloningInstructions is COPY_REFERENCE. If null, will
            use source dataset's location.
          type: string
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CloneControlledGcpBigQueryDatasetResult:
      description: Result of successful BigQuery dataset clone
      type: object
      properties:
        dataset:
          $ref: '#/components/schemas/ClonedControlledGcpBigQueryDataset'
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    CloneControlledGcpGcsBucketRequest:
      description: Values to assign to the cloned bucket for a given source bucket.
        Leave name, displayName, and description null to take the source object's
        values.
      type: object
      required:
        - destinationWorkspaceId
        - jobControl
      properties:
        destinationWorkspaceId:
          description: ID of workspace to be cloned into
          type: string
          format: uuid
        destinationFolderId:
          $ref: '#/components/schemas/FolderId'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        bucketName:
          description: Name of created bucket (not the resource name). Must not be
            set if cloningInstructions is COPY_REFERENCE. This name must be globally
            unique, so it can't be a copy of the original bucket name. It also can't
            be a simple formula like copy-of-bucket-name, as that would fail on subsequent
            clone operations with bucket-name as the source bucket. If null, a random
            bucket name will be created.
          type: string
        location:
          description: A valid bucket location per https://cloud.google.com/storage/docs/locations.
            Must not be set if cloningInstructions is COPY_REFERENCE. If null, will
            use source bucket's location.
          type: string
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CloneControlledGcpGcsBucketResult:
      description: API result class for cloning a GCS bucket.
      type: object
      properties:
        bucket:
          $ref: '#/components/schemas/ClonedControlledGcpGcsBucket'
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    CloneReferencedAwsS3ExternalBucketReferencedResourceResult:
      description: API result class for cloning a referenced AWS S3 bucket resource.
        Includes source workspace and resource IDs for provenance. If the effective
        cloning instructions are not COPY_REFERENCE or LINK_REFERENCE, then no clone
        is created and the resource is null.
      type: object
      required:
        - effectiveCloningInstructions
        - sourceWorkspaceId
        - sourceResourceId
        - resource
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/AwsS3ExternalBucketReferenceResource'
    CloneReferencedAwsS3FolderReferencedResourceResult:
      description: API result class for cloning a referenced AWS S3 bucket resource.
        Includes source workspace and resource IDs for provenance. If the effective
        cloning instructions are not COPY_REFERENCE, then no clone is created and
        the resource is null.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/AwsS3StorageFolderResource'
    CloneReferencedGcpBigQueryDataTableResourceResult:
      description: API result class for cloning a referenced BigQuery data table resource.
        Includes source workspace and resource IDs for provenance. If the effective
        cloning instructions are not COPY_REFERENCE, then no clone is created and
        the resource is null.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/GcpBigQueryDataTableResource'
    CloneReferencedGcpBigQueryDatasetResourceResult:
      description: API result class for cloning a referenced BigQuery dataset resource.
        Includes source workspace and resource IDs for provenance. If the effective
        cloning instructions are not COPY_REFERENCE, then no clone is created and
        the resource is null.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/GcpBigQueryDatasetResource'
    CloneReferencedGcpGcsBucketResourceResult:
      description: API result class for cloning a referenced GCS Bucket resource.
        Includes source workspace and resource IDs for provenance. If the effective
        cloning instructions are not COPY_REFERENCE, then no clone is created and
        the resource is null.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/GcpGcsBucketResource'
    CloneReferencedGcpGcsObjectResourceResult:
      description: API result class for cloning a referenced GCS object resource.
        Includes source workspace and resource IDs for provenance. If the effective
        cloning instructions are not COPY_REFERENCE, then no clone is created and
        the resource is null.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/GcpGcsObjectResource'
    CloneReferencedGitRepoResourceResult:
      description: API result class for cloning a referenced Git repo resource. Includes
        source workspace and resource IDs for provenance. If the effective cloning
        instructions are not COPY_REFERENCE, then no clone is created and the resource
        is null.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        resource:
          $ref: '#/components/schemas/GitRepoResource'
    CloneReferencedResourceRequestBody:
      description: Cloning options for referenced resources. If optional parameters
        are omitted, the source values will be used.
      type: object
      required:
        - destinationWorkspaceId
      properties:
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        destinationWorkspaceId:
          type: string
          format: uuid
        destinationFolderId:
          $ref: '#/components/schemas/FolderId'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        name:
          $ref: '#/components/schemas/Name'
        description:
          description: Description for the referenced resource clone, or null to use
            original.
          type: string
    CloneResourceResult:
      type: string
      enum:
        - SUCCEEDED
        - FAILED
        - SKIPPED
    CloneWorkspaceRequest:
      description: Request body for cloning an entire workspace. Cloning instructions
        are taken from individual resources.
      type: object
      required:
        - spendProfile
      properties:
        destinationWorkspaceId:
          deprecated: true
          description: 'destinationWorkspaceId cannot be specified on clone workspace
            request

            '
          type: string
          format: uuid
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the cloned workspace
          type: string
        spendProfile:
          description: ID of provided spend profile
          type: string
        location:
          description: GCP Location to use for cloud-based resources. If omitted,
            the location of the source resource will be used.
          type: string
        additionalPolicies:
          description: 'Additional policies to attached to the cloned workspace. If
            the

            additional policies create a conflict with the existing workspace,

            cloning will fail.

            '
          $ref: '#/components/schemas/WsmPolicyInputs'
    CloneWorkspaceResult:
      description: Response for workspace clone, including details on each controlled
        or referenced resource either cloned or attempted to be cloned.
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        workspace:
          $ref: '#/components/schemas/ClonedWorkspace'
    CloneWorkspaceV2Request:
      description: Request body for cloning an entire CRG workspace. Cloning instructions
        are taken from individual resources.
      type: object
      required:
        - organizationId
        - cloudResourceGroupId
        - jobControl
      properties:
        userFacingId:
          description: Destination workspace user-facing id
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: Destination workspace display name
          type: string
        description:
          description: Destination workspace description
          type: string
        organizationId:
          description: OrganizationId must be provided.
          $ref: '#/components/schemas/OrganizationUxid'
        cloudResourceGroupId:
          description: 'cloudResourceGroupId must be provided. The referenced

            CRG must be contained in the Organization identified by organization id.

            '
          $ref: '#/components/schemas/CloudResourceGroupUxid'
        location:
          description: GCP Location to use for cloud-based resources. If omitted,
            the location of the source resource will be used.
          type: string
        additionalPolicies:
          description: 'Additional policies to attached to the cloned workspace. If
            the

            additional policies create a conflict with the existing workspace,

            cloning will fail.

            '
          $ref: '#/components/schemas/WsmPolicyInputs'
        additionalProperties:
          description: 'Additional properties to apply to the cloned workspace. These

            new properties are merged with properties of the source workspace.

            If a new property has the same key as a source property,

            the new property value is used.

            '
          $ref: '#/components/schemas/Properties'
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CloneWorkspaceV2Result:
      description: Response for workspace clone, including results for each controlled
        or referenced resource eligible to be cloned.
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        cloneResult:
          $ref: '#/components/schemas/ClonedWorkspace'
    ClonedControlledGcpBigQueryDataset:
      description: Response object for clone of a BigQuery dataset. Destination workspace
        and resource IDs are available in the bucket's metadata object.
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        dataset:
          $ref: '#/components/schemas/GcpBigQueryDatasetResource'
    ClonedControlledGcpGcsBucket:
      description: 'Response object for clone of a GCS Bucket. Destination workspace
        and resource IDs are available in the bucket''s metadata object. TODO: generalize
        so there''s a single response type for all resource clones?'
      type: object
      properties:
        effectiveCloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        sourceWorkspaceId:
          description: ID of the workspace of the source resource for this clone
          type: string
          format: uuid
        sourceResourceId:
          description: ID of the source resource
          type: string
          format: uuid
        bucket:
          $ref: '#/components/schemas/CreatedControlledGcpGcsBucket'
    ClonedWorkspace:
      description: Flight result class for workspace clone. Indicates status for each
        resource cloned (or skipped).
      type: object
      properties:
        sourceWorkspaceId:
          type: string
          format: uuid
        destinationWorkspaceId:
          type: string
          format: uuid
        destinationUserFacingId:
          $ref: '#/components/schemas/UserFacingId'
        resources:
          type: array
          items:
            $ref: '#/components/schemas/ResourceCloneDetails'
    CloningInstructionsEnum:
      type: string
      description: "How to clone resource:\n  * COPY_NOTHING: Don't clone resource.\n\
        \  * COPY_DEFINITION: Only used for controlled resources. Create new controlled\
        \ resource\n    and new cloud resource with same metadata, but don't copy\
        \ any data. For example\n    for GCS bucket, create new GCS bucket with same\
        \ region/lifecycle rules as source\n    bucket. Files will not be copied over.\n\
        \  * COPY_RESOURCE: Only used for controlled resources. Create new controlled\
        \ resource\n    and new cloud resource, with data copied over.  For example\
        \ for GCS bucket,\n    create new GCS bucket with same region/lifecycle rules\
        \ as source bucket. Copy files\n    from source bucket to new bucket.\n  *\
        \ COPY_REFERENCE: Used for controlled and referenced resources. Create new\
        \ referenced resource\n    that points to same cloud resource as source resource.\n\
        \  * COPY_LINK_REFERENCE: Used for controlled and referenced resources. Create\
        \ a new referenced resource\n    that points to the same cloud resource as\
        \ the source resource, AND link the source workspace\n    policy to the destination\
        \ workspace policy; changes in the source will propagate to the destination."
      enum:
        - COPY_NOTHING
        - COPY_DEFINITION
        - COPY_RESOURCE
        - COPY_REFERENCE
        - COPY_LINK_REFERENCE
    CloudPlatform:
      type: string
      description: Enum representing a cloud platform type.
      enum:
        - GCP
        - AZURE
        - AWS
    CloudResourceGroupId:
      type: string
      format: uuid
      description: Unique id of a cloud resource group containing a workspace
    CloudResourceGroupUxid:
      type: string
      description: A UXID representing either a UUID or a UFID
    ControlledDataprocClusterUpdateParameters:
      description: Cluster parameters that can be updated. Cluster lifecycle rules
        can be modified or removed on clusters created with lifecycle rules, though
        this isn't documented. See https://cloud.google.com/dataproc/docs/reference/rest/v1/projects.regions.clusters/patch#query-parameters
        for list other updatable configurations.
      properties:
        numPrimaryWorkers:
          type: integer
          format: int32
          description: Number of primary workers to scale to.
        numSecondaryWorkers:
          type: integer
          format: int32
          description: Number of secondary workers to scale to.
        autoscalingPolicy:
          type: string
          description: URI of autoscaling policy.
        lifecycleConfig:
          $ref: '#/components/schemas/GcpDataprocClusterLifecycleConfig'
        gracefulDecommissionTimeout:
          type: string
          description: Duration to wait for graceful decommission to finish. See https://cloud.google.com/dataproc/docs/concepts/compute/dataproc-cluster-lifecycle#graceful_decommission_timeout.
          example: 1800s
    ControlledFlexibleResourceCreationParameters:
      description: Properties specific to flexible resource set on creation.
      type: object
      required:
        - typeNamespace
        - type
      properties:
        typeNamespace:
          description: Namespace of the type; e.g., 'terra'
          type: string
        type:
          description: Type of the flexible resource.
          type: string
        data:
          description: JSON encoded in base 64.
          type: string
          format: byte
    ControlledResourceCommonFields:
      type: object
      required:
        - cloningInstructions
        - accessScope
        - managedBy
      description: 'Common information used in all create controlled resource requests.
        Either displayName or name must be provided.

        '
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        folderId:
          $ref: '#/components/schemas/FolderId'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        accessScope:
          $ref: '#/components/schemas/AccessScope'
        managedBy:
          $ref: '#/components/schemas/ManagedBy'
        privateResourceUser:
          $ref: '#/components/schemas/PrivateResourceUser'
        resourceId:
          type: string
          format: uuid
        properties:
          $ref: '#/components/schemas/Properties'
    ControlledResourceIamRole:
      description: Enum containing all IAM roles on controlled resources available
        to users
      type: string
      enum:
        - READER
        - WRITER
        - EDITOR
    ControlledResourceMetadata:
      type: object
      properties:
        accessScope:
          $ref: '#/components/schemas/AccessScope'
        managedBy:
          $ref: '#/components/schemas/ManagedBy'
        privateResourceUser:
          $ref: '#/components/schemas/PrivateResourceUser'
        privateResourceState:
          $ref: '#/components/schemas/PrivateResourceState'
        region:
          description: 'A valid region string representation of the cloud resource.

            '
          type: string
    CreateAwsS3ExternalBucketReferenceRequestBody:
      type: object
      description: A request to create a reference to an AWS S3 External Bucket.
      required:
        - metadata
        - s3ExternalBucket
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        s3ExternalBucket:
          $ref: '#/components/schemas/AwsReferencedS3ExternalBucketCreationParameters'
    CreateAwsS3FolderReferenceRequestBody:
      type: object
      description: A request to create a reference to a AWS S3 Folder.
      required:
        - metadata
        - s3folder
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        s3folder:
          $ref: '#/components/schemas/AwsReferencedS3FolderCreationParameters'
    CreateCloudContextRequest:
      type: object
      required:
        - cloudPlatform
        - jobControl
      description: 'Request body for asynchronously creating a cloud context for a
        workspace.

        Contains the CloudPlatform for the context and the JobControl object.

        For GCP, a project is created to contain the cloud resources of the context.

        and a subscription obtained from the spend profile linked to the parent workspace.

        '
      properties:
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CreateCloudContextResult:
      type: object
      description: 'The result of a call to create a cloud context for a workspace.
        Contains

        a JobReport detailing the async operation, and either a GcpContext or AwsContext
        (if operation complete)

        or an ErrorReport detailing an error.

        '
      required:
        - jobReport
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        gcpContext:
          $ref: '#/components/schemas/GcpContext'
        awsContext:
          $ref: '#/components/schemas/AwsContext'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    CreateControlledAwsEc2InstanceRequestBody:
      description: Payload for requesting a new controlled AWS EC2 Virtual Machine
        instance resource.
      type: object
      required:
        - common
        - awsEc2Instance
        - jobControl
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        awsEc2Instance:
          $ref: '#/components/schemas/AwsEc2InstanceCreationParameters'
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CreateControlledAwsEc2InstanceResult:
      description: Response Payload for requesting a new controlled AWS EC2 Virtual
        Machine instance resource.
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        awsEc2Instance:
          $ref: '#/components/schemas/AwsEc2InstanceResource'
    CreateControlledAwsS3ExternalBucketRequestBody:
      description: Payload for requesting a new controlled externally-managed AWS
        S3 Storage Bucket resource.
      type: object
      required:
        - common
        - awsS3ExternalBucket
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        awsS3ExternalBucket:
          $ref: '#/components/schemas/AwsS3ExternalBucketCreationParameters'
    CreateControlledAwsS3StorageFolderRequestBody:
      description: Payload for requesting a new controlled AWS S3 Storage Folder resource.
      type: object
      required:
        - common
        - awsS3StorageFolder
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        awsS3StorageFolder:
          $ref: '#/components/schemas/AwsS3StorageFolderCreationParameters'
    CreateControlledAwsSageMakerNotebookRequestBody:
      description: Payload for requesting a new controlled AWS SageMaker Notebook
        instance resource.
      type: object
      required:
        - common
        - awsSageMakerNotebook
        - jobControl
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        awsSageMakerNotebook:
          $ref: '#/components/schemas/AwsSageMakerNotebookCreationParameters'
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CreateControlledAwsSageMakerNotebookResult:
      description: Response Payload for requesting a new controlled AWS SageMaker
        Notebook instance resource.
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        awsSageMakerNotebook:
          $ref: '#/components/schemas/AwsSageMakerNotebookResource'
    CreateControlledFlexibleResourceRequestBody:
      description: Payload for requesting a new controlled flexible resource.
      type: object
      required:
        - common
        - flexibleResource
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        flexibleResource:
          $ref: '#/components/schemas/ControlledFlexibleResourceCreationParameters'
    CreateControlledGcpAiNotebookInstanceRequestBody:
      description: Payload for requesting a new controlled GCS Api notebook instance.
      type: object
      required:
        - common
        - aiNotebookInstance
        - jobControl
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        aiNotebookInstance:
          $ref: '#/components/schemas/GcpAiNotebookInstanceCreationParameters'
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CreateControlledGcpBigQueryDatasetRequestBody:
      description: Payload for requesting a new controlled BigQuery dataset resource.
      type: object
      required:
        - common
        - dataset
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        dataset:
          $ref: '#/components/schemas/GcpBigQueryDatasetCreationParameters'
    CreateControlledGcpDataprocClusterRequestBody:
      description: Payload for requesting a new controlled Dataproc cluster.
      type: object
      required:
        - common
        - dataprocCluster
        - jobControl
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        dataprocCluster:
          $ref: '#/components/schemas/GcpDataprocClusterCreationParameters'
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CreateControlledGcpGceInstanceRequestBody:
      description: Payload for requesting a new controlled GCP GCE instance.
      type: object
      required:
        - common
        - gceInstance
        - jobControl
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        gceInstance:
          $ref: '#/components/schemas/GcpGceInstanceCreationParameters'
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CreateControlledGcpGcsBucketRequestBody:
      description: Payload for requesting a new controlled GCS bucket resource.
      type: object
      required:
        - common
        - gcsBucket
      properties:
        common:
          $ref: '#/components/schemas/ControlledResourceCommonFields'
        gcsBucket:
          $ref: '#/components/schemas/GcpGcsBucketCreationParameters'
    CreateFolderRequestBody:
      type: object
      required:
        - displayName
      properties:
        displayName:
          description: 'The human readable name of the folder. The folder name must
            be

            unique within its parent folder directories.

            '
          type: string
        description:
          description: A description of the folder
          type: string
        parentFolderId:
          $ref: '#/components/schemas/FolderId'
        properties:
          $ref: '#/components/schemas/Properties'
    CreateGcpBigQueryDataTableReferenceRequestBody:
      type: object
      description: A request to create a reference to a BigQuery data table.
      required:
        - metadata
        - dataTable
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        dataTable:
          $ref: '#/components/schemas/GcpBigQueryDataTableAttributes'
    CreateGcpBigQueryDatasetReferenceRequestBody:
      type: object
      description: A request to create a reference to a BigQuery dataset.
      required:
        - metadata
        - dataset
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        dataset:
          $ref: '#/components/schemas/GcpBigQueryDatasetAttributes'
    CreateGcpGcsBucketReferenceRequestBody:
      type: object
      description: A request to create a reference to a GCS bucket.
      required:
        - metadata
        - bucket
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        bucket:
          $ref: '#/components/schemas/GcpGcsBucketAttributes'
    CreateGcpGcsObjectReferenceRequestBody:
      type: object
      description: A request to create a reference to a GCS object.
      required:
        - metadata
        - file
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        file:
          $ref: '#/components/schemas/GcpGcsObjectAttributes'
    CreateGitRepoReferenceRequestBody:
      type: object
      description: A request to create a reference to a Git repo.
      required:
        - metadata
        - gitrepo
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        gitrepo:
          $ref: '#/components/schemas/GitRepoAttributes'
    CreateNatGatewayRequestBody:
      description: Request payload for creating a NAT Gateway.
      type: object
      required:
        - region
      properties:
        region:
          description: Region to create the NAT Gateway in.
          type: string
    CreateTerraWorkspaceReferenceRequestBody:
      type: object
      description: A request to create a reference to a Terra workspace
      required:
        - metadata
        - referencedWorkspace
      properties:
        metadata:
          $ref: '#/components/schemas/ReferenceResourceCommonFields'
        referencedWorkspace:
          $ref: '#/components/schemas/TerraWorkspaceAttributes'
    CreateWorkspaceV2Request:
      type: object
      required:
        - id
        - jobControl
      properties:
        id:
          description: The ID of the workspace
          type: string
          format: uuid
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the workspace
          type: string
        policies:
          $ref: '#/components/schemas/WsmPolicyInputs'
        stage:
          $ref: '#/components/schemas/WorkspaceStageModel'
        properties:
          $ref: '#/components/schemas/Properties'
        applicationIds:
          description: List of application ids to enable for this workspace
          type: array
          items:
            type: string
        organizationId:
          description: If stage is CRG, organizationId must be provided.
          $ref: '#/components/schemas/OrganizationUxid'
        cloudResourceGroupId:
          description: 'If stage is CRG, cloudResourceGroupId must be provided. The
            referenced

            pod must be contained in the Organization identified by organization id.

            '
          $ref: '#/components/schemas/CloudResourceGroupUxid'
        cloudPlatform:
          description: 'Optional cloud platform for the cloud context to create within
            the workspace.

            If stage is CRG, cloudPlatform may not be specified.

            '
          $ref: '#/components/schemas/CloudPlatform'
        region:
          description: Optional valid region for the cloud platform
          type: string
        spendProfile:
          description: 'ID of the spend profile for the cloud context, if any.

            If stage is CRG, spendProfile may not be specified.

            '
          type: string
        jobControl:
          $ref: '#/components/schemas/JobControl'
    CreateWorkspaceV2Result:
      description: Result of an asynchronous workspace create
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        workspaceId:
          type: string
          format: uuid
    CreatedControlledAwsS3ExternalBucket:
      description: Response Payload for requesting a new controlled externally-managed
        AWS S3 Storage Bucket resource.
      type: object
      required:
        - resourceId
        - awsS3ExternalBucket
      properties:
        resourceId:
          description: UUID of a newly-created resource.
          type: string
          format: uuid
        awsS3ExternalBucket:
          $ref: '#/components/schemas/AwsS3ExternalBucketResource'
    CreatedControlledAwsS3StorageFolder:
      description: Response Payload for requesting a new controlled AWS S3 Storage
        Folder resource.
      type: object
      required:
        - resourceId
        - awsS3StorageFolder
      properties:
        resourceId:
          description: UUID of a newly-created resource.
          type: string
          format: uuid
        awsS3StorageFolder:
          $ref: '#/components/schemas/AwsS3StorageFolderResource'
    CreatedControlledFlexibleResource:
      description: Response payload for requesting a new controlled flexible resource.
      type: object
      required:
        - resourceId
        - flexibleResource
      properties:
        resourceId:
          description: UUID of newly-created resource.
          type: string
          format: uuid
        flexibleResource:
          $ref: '#/components/schemas/FlexibleResource'
    CreatedControlledGcpAiNotebookInstanceResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        aiNotebookInstance:
          $ref: '#/components/schemas/GcpAiNotebookInstanceResource'
    CreatedControlledGcpBigQueryDataset:
      description: Response Payload for requesting a new controlled BigQuery dataset.
      type: object
      required:
        - resourceId
        - bigQueryDataset
      properties:
        resourceId:
          description: UUID of a newly-created resource.
          type: string
          format: uuid
        bigQueryDataset:
          $ref: '#/components/schemas/GcpBigQueryDatasetResource'
    CreatedControlledGcpDataprocClusterResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        dataprocCluster:
          $ref: '#/components/schemas/GcpDataprocClusterResource'
    CreatedControlledGcpGceInstanceResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        gceInstance:
          $ref: '#/components/schemas/GcpGceInstanceResource'
    CreatedControlledGcpGcsBucket:
      description: Response Payload for requesting a new controlled GCS bucket.
      type: object
      required:
        - resourceId
        - gcpBucket
      properties:
        resourceId:
          description: UUID of a newly-created resource.
          type: string
          format: uuid
        gcpBucket:
          $ref: '#/components/schemas/GcpGcsBucketResource'
    CreatedWorkspace:
      type: object
      required:
        - id
      properties:
        id:
          description: UUID of a newly-created workspace
          type: string
          format: uuid
    DataprocClusterCloudId:
      description: Dataproc cluster cloud native ID
      type: object
      required:
        - generatedDataprocClusterCloudId
      properties:
        generatedDataprocClusterCloudId:
          type: string
    DefaultPartitionLifetime:
      description: Optional. Default lifetime (in seconds) for partitions in newly
        created partitioned tables.
      type: integer
      format: int64
    DefaultTableLifetime:
      description: Optional. Default lifetime (in seconds) for newly created tables.
      type: integer
      format: int64
    DeleteCloudContextV2Request:
      type: object
      required:
        - jobControl
      description: 'Request body for asynchronously deleting a cloud context for a
        workspace.

        '
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
    DeleteControlledAwsResourceRequestBody:
      type: object
      required:
        - jobControl
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
        forceDelete:
          description: Attempt to force delete the resource
          type: boolean
          default: false
    DeleteControlledAwsResourceResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    DeleteControlledGcpAiNotebookInstanceRequest:
      type: object
      required:
        - jobControl
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
    DeleteControlledGcpAiNotebookInstanceResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    DeleteControlledGcpDataprocClusterRequest:
      type: object
      required:
        - jobControl
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
    DeleteControlledGcpDataprocClusterResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    DeleteControlledGcpGceInstanceRequest:
      type: object
      required:
        - jobControl
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
    DeleteControlledGcpGceInstanceResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    DeleteControlledGcpGcsBucketRequest:
      type: object
      required:
        - jobControl
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
    DeleteControlledGcpGcsBucketResult:
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    DeleteWorkspaceV2Request:
      type: object
      required:
        - jobControl
      description: 'Request body for asynchronously deleting a workspace.

        '
      properties:
        jobControl:
          $ref: '#/components/schemas/JobControl'
    DisplayName:
      type: string
    EnumerateJobsResult:
      description: result of an enumerateJobs request
      type: object
      properties:
        totalResults:
          type: integer
        pageToken:
          type: string
        results:
          description: List of enumerated jobs
          type: array
          items:
            $ref: '#/components/schemas/EnumeratedJob'
    EnumeratedJob:
      description: 'One job returned by the enumerate jobs request. The jobReport
        is always present.

        If the job failed, the error report is present. Depending on the operation,
        the

        resource information

        '
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        jobDescription:
          type: string
        operationType:
          $ref: '#/components/schemas/OperationType'
        resourceType:
          $ref: '#/components/schemas/ResourceType'
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        resourceAttributes:
          description: Data specific to the type of resource and whether it is controlled
            or not
          $ref: '#/components/schemas/ResourceAttributesUnion'
        destinationResourceId:
          description: 'For resource clone operations, the ID of the destination resource.
            Null otherwise.

            '
          type: string
          format: uuid
    ErrorReport:
      type: object
      required:
        - message
        - statusCode
        - causes
      properties:
        message:
          type: string
        statusCode:
          type: integer
        causes:
          type: array
          items:
            type: string
    FlexibleResource:
      type: object
      description: A flexible resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/FlexibleResourceAttributes'
    FlexibleResourceAttributes:
      description: Attributes of a flexible resource.
      type: object
      required:
        - typeNamespace
        - type
      properties:
        typeNamespace:
          description: Namespace of the type; e.g., 'terra'
          type: string
        type:
          description: Type of the flexible resource.
          type: string
        data:
          description: JSON (decoded from base64).
          type: string
    FlexibleResourceUpdateParameters:
      description: Parameters that may be changed by a user.
      properties:
        data:
          description: JSON encoded in base 64.
          type: string
          format: byte
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    Folder:
      type: object
      required:
        - id
        - displayName
        - createdBy
        - createdDate
        - lastUpdatedBy
        - lastUpdatedDate
      properties:
        id:
          description: The ID of the folder. Immutable.
          $ref: '#/components/schemas/FolderId'
        displayName:
          description: The human readable name of the folder.
          type: string
        description:
          type: string
        parentFolderId:
          $ref: '#/components/schemas/FolderId'
        properties:
          $ref: '#/components/schemas/Properties'
        createdBy:
          description: User email of whom created the folder
          type: string
        createdDate:
          description: Timestamp when the folder is created
          type: string
          format: date-time
        lastUpdatedBy:
          description: User email of whom last updated the folder
          type: string
        lastUpdatedDate:
          description: Timestamp where the folder was last updated
          type: string
          format: date-time
    FolderId:
      description: Id of a given folder. Unique and immutable within a workspace.
      type: string
      format: uuid
    FolderList:
      type: object
      required:
        - folders
      properties:
        folders:
          type: array
          items:
            $ref: '#/components/schemas/Folder'
    GceInstanceCloudId:
      description: GCE instance native ID
      type: object
      required:
        - generatedGceInstanceCloudId
      properties:
        generatedGceInstanceCloudId:
          type: string
    GcpAiNotebookInstanceAcceleratorConfig:
      description: The hardware accelerator used on this instance. If you use accelerators,
        make sure that your configuration has enough vCPUs and memory to support the
        machineType you have selected. See https://cloud.google.com/ai-platform/notebooks/docs/reference/rest/v1/projects.locations.instances#AcceleratorConfig
      type: object
      required:
        - type
        - coreCount
      properties:
        type:
          description: Type of this accelerator
          type: string
        coreCount:
          description: Count of cores of this accelerator.
          type: integer
          format: int64
    GcpAiNotebookInstanceAttributes:
      description: AI Notebook instance properties included in post-creation, get,
        and update. Others must be retrieved from GCP using the specification.
      type: object
      required:
        - projectId
        - location
        - instanceId
      properties:
        projectId:
          description: The GCP project id for the project containing the notebook
            instance.
          type: string
        location:
          description: The GCP location containing the notebook instance, e.g. 'us-east1-b'
          type: string
        instanceId:
          description: An instance id unique to this project and location.
          type: string
    GcpAiNotebookInstanceContainerImage:
      description: Either this or vmImage must be specified. Definition of a container
        image for starting a notebook instance with the environment installed in a
        container. See https://cloud.google.com/ai-platform/notebooks/docs/reference/rest/v1/ContainerImage
      type: object
      required:
        - repository
      properties:
        repository:
          description: 'Required. The path to the container image repository. For
            example: ''gcr.io/{project_id}/{imageName}'''
          type: string
        tag:
          description: The tag of the container image. If not specified, this defaults
            to the latest tag.
          type: string
    GcpAiNotebookInstanceCreationParameters:
      description: AI Platform Notebook instance specific properties to be set on
        creation. These are a subset of the values accepted by the GCP AI Platforms
        API. See https://cloud.google.com/ai-platform/notebooks/docs/reference/rest/v1/projects.locations.instances/create
      type: object
      required:
        - machineType
      properties:
        instanceId:
          description: An instanceId unique to this project and location. Must be
            1-63 characters, using lower case letters, numbers, and dashes. The first
            character must be a lower case letter, and the last character must not
            be a dash.
          type: string
        location:
          description: The canonical GCP id for this location. For example, \'us-east1\'.
          type: string
        postStartupScript:
          description: Path to a Bash script that automatically runs after a notebook
            instance fully boots up. If path is not specified, a default startup script
            will run to install NextFlow and Terra CLI to the notebook instance. The
            path must be a URL or Cloud Storage path (gs://path-to-file/file-name).
            If the path is a cloud storage path, the created VM instance's service
            account's credentials is used to access it.
          type: string
        machineType:
          description: The Compute Engine machine type of this instance, see https://cloud.google.com/compute/docs/machine-types
          type: string
        acceleratorConfig:
          $ref: '#/components/schemas/GcpAiNotebookInstanceAcceleratorConfig'
        installGpuDriver:
          description: Whether the end user authorizes Google Cloud to install GPU
            driver on this instance. If this field is empty or set to false, the GPU
            driver won't be installed. Only applicable to instances with GPUs.
          type: boolean
        customGpuDriverPath:
          description: Specify a custom Cloud Storage path where the GPU driver is
            stored. If not specified, we'll automatically choose from official GPU
            drivers.
          type: string
        bootDiskType:
          description: The type of the boot disk attached to this instance, defaults
            to standard persistent disk (PD_STANDARD). See https://cloud.google.com/ai-platform/notebooks/docs/reference/rest/v1/projects.locations.instances#DiskType
          type: string
        bootDiskSizeGb:
          description: Input only. The size of the boot disk in GB attached to this
            instance, up to a maximum of 64000 GB (64 TB). The minimum recommended
            value is 100 GB. If not specified, this defaults to 100.
          type: integer
          format: int64
        dataDiskType:
          description: Input only. The type of the data disk attached to this instance,
            defaults to standard persistent disk (PD_STANDARD). See https://cloud.google.com/ai-platform/notebooks/docs/reference/rest/v1/projects.locations.instances#DiskType
          type: string
        dataDiskSizeGb:
          description: Input only. The size of the data disk in GB attached to this
            instance, up to a maximum of 64000 GB (64 TB). If not specified, this
            defaults to 100.
          type: integer
          format: int64
        metadata:
          description: 'Custom metadata to apply to this instance. Some metadata keys
            are reserved by Terra and will throw a bad request error if specified:
            ''proxy-mode''.'
          type: object
          additionalProperties:
            type: string
        vmImage:
          $ref: '#/components/schemas/GcpAiNotebookInstanceVmImage'
        containerImage:
          $ref: '#/components/schemas/GcpAiNotebookInstanceContainerImage'
    GcpAiNotebookInstanceResource:
      type: object
      description: Description of a AI Notebook Instance resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GcpAiNotebookInstanceAttributes'
    GcpAiNotebookInstanceVmImage:
      description: Either this or containerImage must be specified. Definition of
        a custom Compute Engine virtual machine image for starting a notebook instance
        with the environment installed directly on the VM. See https://cloud.google.com/ai-platform/notebooks/docs/reference/rest/v1/VmImage
      type: object
      required:
        - projectId
      properties:
        projectId:
          description: 'The name of the Google Cloud project that this VM image belongs
            to. Format: ''projects/{project_id}'''
          type: string
        imageName:
          description: Either this or imageFamily must be specified. Use VM image
            name to find the image.
          type: string
        imageFamily:
          description: Either this or imageName must be specified. Use this VM image
            family to find the image; the newest image in this family will be used.
          type: string
    GcpAiNotebookUpdateParameters:
      description: Parameters that may be changed by a user. Location and dataset
        id are fixed upon create.
      properties:
        metadata:
          description: 'A map of custom metadata to apply to this instance. Some metadata
            keys are reserved by Terra and will throw a bad request error if specified:
            ''proxy-mode'', ''terra-workspace-id'', ''terra-cli-server''.'
          type: object
          additionalProperties:
            type: string
    GcpBigQueryDataTableAttributes:
      description: Attributes of a BigQuery data table
      type: object
      required:
        - projectId
        - datasetId
        - dataTableId
      properties:
        projectId:
          type: string
        datasetId:
          type: string
        dataTableId:
          type: string
    GcpBigQueryDataTableResource:
      type: object
      description: A reference to a BigQuery data table.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GcpBigQueryDataTableAttributes'
    GcpBigQueryDatasetAttributes:
      description: Attributes of a BigQuery dataset
      type: object
      required:
        - projectId
        - datasetId
      properties:
        projectId:
          type: string
        datasetId:
          type: string
    GcpBigQueryDatasetCreationParameters:
      description: Dataset-specific properties to be set on creation. These are a
        subset of the values accepted by the BigQuery API.
      type: object
      properties:
        datasetId:
          description: A valid dataset name per https://cloud.google.com/bigquery/docs/datasets#dataset-naming.
            Optional. If not set, resource name is used.
          type: string
        location:
          description: A valid dataset location per https://cloud.google.com/bigquery/docs/locations.
          type: string
        defaultTableLifetime:
          $ref: '#/components/schemas/DefaultTableLifetime'
        defaultPartitionLifetime:
          $ref: '#/components/schemas/DefaultPartitionLifetime'
    GcpBigQueryDatasetResource:
      type: object
      description: A reference to a BigQuery dataset.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GcpBigQueryDatasetAttributes'
    GcpBigQueryDatasetUpdateParameters:
      description: Parameters that may be changed by a user. Location and dataset
        id are fixed upon create.
      properties:
        defaultTableLifetime:
          description: Optional. Default lifetime (in seconds) for newly created tables.
            Specify zero (0) to unset an existing value. The default table lifetime
            will not be updated if this is omitted.
          type: integer
          format: int64
        defaultPartitionLifetime:
          description: Optional. Default lifetime (in seconds) for partitions in newly
            created partitioned tables. Specify zero (0) to unset an existing value.
            The default partition lifetime will not be updated if this is omitted.
          type: integer
          format: int64
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    GcpContext:
      type: object
      description: The GCP cloud context associated with a workspace.
      required:
        - projectId
      properties:
        projectId:
          description: The ID of the GCP project associated with the workspace.
          type: string
        operationState:
          $ref: '#/components/schemas/OperationState'
    GcpDataprocClusterAcceleratorConfig:
      description: The hardware accelerator used on instances. If you use accelerators,
        make sure that your configuration has enough vCPUs and memory to support the
        machineType you have selected. See https://cloud.google.com/dataproc/docs/reference/rest/v1/InstanceGroupConfig#AcceleratorConfig
      type: object
      required:
        - type
        - cardCount
      properties:
        type:
          description: Type of this accelerator
          type: string
        cardCount:
          description: Number of cards of this accelerator.
          type: integer
          format: int32
    GcpDataprocClusterAttributes:
      description: Dataproc cluster properties included in post-creation, get, and
        update. Others must be retrieved from GCP using the specification.
      type: object
      required:
        - projectId
        - region
        - clusterId
      properties:
        projectId:
          description: The GCP project id for the project containing the dataproc
            cluster.
          type: string
        region:
          description: The GCP region containing the dataproc cluster, e.g. 'us-east1'
          type: string
        clusterId:
          description: An dataproc cluster id unique to this project and region.
          type: string
    GcpDataprocClusterCreationParameters:
      type: object
      required:
        - configBucket
        - tempBucket
        - managerNodeConfig
      properties:
        clusterId:
          type: string
          description: Dataproc cluster name.
        region:
          type: string
          description: GCP region.
        imageVersion:
          type: string
          description: Dataproc image version with specific software versions installed
            for Spark, Hadoop, etc. Defaults to the latest debian image if not specified.
            See https://cloud.google.com/dataproc/docs/concepts/versioning/dataproc-version-clusters#supported_dataproc_versions.
        initializationScripts:
          type: array
          items:
            type: string
          description: List of initialization scripts to run on create. In gs url
            format.
        components:
          type: array
          items:
            type: string
          uniqueItems: true
          description: List of optional components to install on the cluster manager
            node. See full list of available components here https://cloud.google.com/dataproc/docs/concepts/components/overview.
        properties:
          type: object
          additionalProperties:
            type: string
          description: Map of additional properties to set on the cluster. See https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/cluster-properties.
        configBucket:
          type: string
          format: uuid
          description: Staging bucket controlled resource uuid.
        tempBucket:
          type: string
          format: uuid
          description: Temp bucket controlled resource uuid.
        autoscalingPolicy:
          type: string
          description: URI of autoscaling policy.
        metadata:
          type: object
          description: Metadata key-value pairs.
          additionalProperties:
            type: string
        managerNodeConfig:
          $ref: '#/components/schemas/GcpDataprocClusterInstanceGroupConfig'
        primaryWorkerConfig:
          $ref: '#/components/schemas/GcpDataprocClusterInstanceGroupConfig'
        secondaryWorkerConfig:
          $ref: '#/components/schemas/GcpDataprocClusterInstanceGroupConfig'
        lifecycleConfig:
          $ref: '#/components/schemas/GcpDataprocClusterLifecycleConfig'
    GcpDataprocClusterDiskConfig:
      description: Specifies the config of disk options for a group of VM instances.
        See https://cloud.google.com/dataproc/docs/reference/rest/v1/InstanceGroupConfig#DiskConfig
      type: object
      properties:
        bootDiskType:
          type: string
          default: pd-standard
          description: The type of the boot disk.
        bootDiskSizeGb:
          type: integer
          format: int32
          default: 500
          description: The size of the boot disk in GB.
        numLocalSsds:
          type: integer
          format: int32
          default: 0
          description: The number of local SSDs.
        localSsdInterface:
          type: string
          default: scsi
          description: The interface of local SSDs.
    GcpDataprocClusterInstanceGroupConfig:
      type: object
      required:
        - numInstances
        - machineType
      properties:
        numInstances:
          type: integer
          format: int32
          description: Number of instances in the instance group.
        machineType:
          type: string
          description: Compute engine machine type.
        imageUri:
          type: string
          description: Compute engine image used for cluster instances.
        acceleratorConfig:
          $ref: '#/components/schemas/GcpDataprocClusterAcceleratorConfig'
        diskConfig:
          $ref: '#/components/schemas/GcpDataprocClusterDiskConfig'
        preemptibility:
          type: string
          enum:
            - NON_PREEMPTIBLE
            - PREEMPTIBLE
            - SPOT
          description: Optionally specify instance preemptibility. Default is "NON_PREEMPTIBLE".
            See https://cloud.google.com/dataproc/docs/concepts/compute/secondary-vms.
    GcpDataprocClusterLifecycleConfig:
      description: Specifies the config of lifecycle options for a cluster. See https://cloud.google.com/dataproc/docs/reference/rest/v1/ClusterConfig#LifecycleConfig
      type: object
      properties:
        idleDeleteTtl:
          type: string
          description: Duration of idling before cluster is deleted. See https://cloud.google.com/dataproc/docs/concepts/configuring-clusters/scheduled-deletion.
          example: 1800s
        autoDeleteTime:
          type: string
          format: date-time
          description: Date of cluster deletion in UTC "Zulu" format. Must not be
            specified if autoDeleteTtl is specified.
          example: 2014-10-02 15:01:23.045123+00:00
        autoDeleteTtl:
          type: string
          description: Duration of cluster life in seconds. Must not be specified
            if autoDeleteTime is specified.
          example: 3.5s
    GcpDataprocClusterResource:
      type: object
      description: Description of a Dataproc cluster resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GcpDataprocClusterAttributes'
    GcpGceInstanceAttributes:
      description: GCE instance properties included in post-creation, get, and update.
        Others must be retrieved from GCP using the specification.
      type: object
      required:
        - projectId
        - zone
        - instanceId
      properties:
        projectId:
          description: The GCP project id for the project containing the instance.
          type: string
        zone:
          description: The GCP zone containing the instance, e.g. 'us-east1-b'
          type: string
        instanceId:
          description: An instance name unique to this project and zone.
          type: string
    GcpGceInstanceCreationParameters:
      description: GCE instance specific properties to be set on creation. These are
        a subset of the values accepted by the GCP Compute API. See https://cloud.google.com/compute/docs/reference/rest/v1/instances/insert
      type: object
      required:
        - machineType
      properties:
        instanceId:
          description: An instanceId unique to this project and location. Must be
            1-63 characters, using lower case letters, numbers, and dashes. The first
            character must be a lower case letter, and the last character must not
            be a dash.
          type: string
        zone:
          description: The name of the zone for this request. For example, \'us-east1-b\'.
          type: string
        machineType:
          description: The Compute Engine machine type of this instance, see https://cloud.google.com/compute/docs/machine-types
          type: string
        guestAccelerators:
          type: array
          items:
            $ref: '#/components/schemas/GcpGceInstanceGuestAccelerator'
        metadata:
          description: 'Custom metadata to apply to this instance. Some metadata keys
            are reserved by Terra and will throw a bad request error if specified:
            \''terra-workspace-id\'', \''terra-cli-server\''.'
          type: object
          additionalProperties:
            type: string
        vmImage:
          description: Custom Compute Engine virtual machine image for starting the
            instance with the environment installed directly on the VM. Specify the
            image by its family name, or use a specific version of a public operating
            system image.
          type: string
        dataDiskType:
          description: The type of the data disk attached to this instance, defaults
            to standard persistent disk (pd-standard). See https://cloud.google.com/compute/docs/disks#disk-types
          type: string
        dataDiskSizeGb:
          description: The size of the data disk in GB attached to this instance,
            up to a maximum of 64000 GB (64 TB). If not specified, this defaults to
            500.
          type: integer
          format: int64
    GcpGceInstanceGuestAccelerator:
      description: The hardware accelerator used on this instance. If you use accelerators,
        make sure that your configuration has enough vCPUs and memory to support the
        machineType you have selected.
      type: object
      required:
        - type
        - cardCount
      properties:
        type:
          description: Type of this accelerator
          type: string
        cardCount:
          description: Count of cards of this accelerator.
          type: integer
    GcpGceInstanceResource:
      type: object
      description: Description of a GCE Instance resource.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GcpGceInstanceAttributes'
    GcpGceUpdateParameters:
      description: Parameters that may be changed by a user.
      properties:
        metadata:
          description: 'A map of custom metadata to apply to this instance. Some metadata
            keys are reserved by Terra and will throw a bad request error if specified:
            ''terra-workspace-id'', ''terra-cli-server''.'
          type: object
          additionalProperties:
            type: string
    GcpGcsBucketAttributes:
      description: Bucket properties included in post-creation, get, and update. Others
        must be retrieved from GCS using the name.
      type: object
      required:
        - bucketName
      properties:
        bucketName:
          description: Name of created bucket (not the resource name).
          type: string
    GcpGcsBucketCreationParameters:
      description: Bucket-specific properties to be set on creation. These are a subset
        of the values accepted by the Gcp Storage API.
      type: object
      properties:
        name:
          description: A valid bucket name per https://cloud.google.com/storage/docs/naming-buckets.
          type: string
        location:
          description: A valid bucket location per https://cloud.google.com/storage/docs/locations.
          type: string
        defaultStorageClass:
          $ref: '#/components/schemas/GcpGcsBucketDefaultStorageClass'
        lifecycle:
          $ref: '#/components/schemas/GcpGcsBucketLifecycle'
    GcpGcsBucketDefaultStorageClass:
      description: Type and availability of objects in a bucket, described at https://cloud.google.com/storage/docs/storage-classes.
        This list does not include legacy types that apply to some existing buckets.
      type: string
      enum:
        - STANDARD
        - NEARLINE
        - COLDLINE
        - ARCHIVE
    GcpGcsBucketLifecycle:
      description: Options to control automatic deletion or storage class change for
        a bucket. Described at https://cloud.google.com/storage/docs/lifecycle.
      type: object
      required:
        - rules
      properties:
        rules:
          description: List of rules for this bucket
          type: array
          items:
            $ref: '#/components/schemas/GcpGcsBucketLifecycleRule'
    GcpGcsBucketLifecycleRule:
      description: A lifecycle rule for a bucket.
      type: object
      required:
        - action
      properties:
        action:
          $ref: '#/components/schemas/GcpGcsBucketLifecycleRuleAction'
        condition:
          $ref: '#/components/schemas/GcpGcsBucketLifecycleRuleCondition'
    GcpGcsBucketLifecycleRuleAction:
      description: The lifecycle action to take. See https://cloud.google.com/storage/docs/lifecycle#actions.
      type: object
      required:
        - type
      properties:
        storageClass:
          $ref: '#/components/schemas/GcpGcsBucketDefaultStorageClass'
        type:
          $ref: '#/components/schemas/GcpGcsBucketLifecycleRuleActionType'
    GcpGcsBucketLifecycleRuleActionType:
      description: Type of action to perform. Formatted like our Java enums, but spelled
        in Camel case in Gcp API.
      type: string
      enum:
        - DELETE
        - SET_STORAGE_CLASS
    GcpGcsBucketLifecycleRuleCondition:
      description: The condition(s) under which the action will be taken.
      type: object
      properties:
        age:
          description: Age of an object (in days). This condition is satisfied when
            an object reaches the specified age.
          type: integer
        createdBefore:
          description: This condition is satisfied when an object is created before
            midnight of the specified date in UTC.
          type: string
          format: date-time
        customTimeBefore:
          description: This condition is satisfied when the customTime metadata for
            the object is set to an earlier date than the date used in this lifecycle
            condition.
          type: string
          format: date-time
        daysSinceCustomTime:
          description: Days since the date set in the customTime metadata for the
            object. This condition is satisfied when the current date and time is
            at least the specified number of days after the customTime.
          type: integer
        daysSinceNoncurrentTime:
          description: Relevant only for versioned objects. This condition is satisfied
            when an object has been noncurrent for more than the specified number
            of days.
          type: integer
        live:
          description: Relevant only for versioned objects. If the value is true,
            this condition matches the live version of objects; if the value is false,
            it matches noncurrent versions of objects.
          type: boolean
        matchesStorageClass:
          description: Objects having any of the storage classes specified by this
            condition will be matched. Values include "STANDARD", "NEARLINE", "COLDLINE",
            "ARCHIVE", "MULTI_REGIONAL", "REGIONAL", and "DURABLE_REDUCED_AVAILABILITY".
          type: array
          items:
            $ref: '#/components/schemas/GcpGcsBucketDefaultStorageClass'
        noncurrentTimeBefore:
          description: Relevant only for versioned objects. This condition is satisfied
            for objects that became noncurrent on a date prior to the one specified
            in this condition.
          type: string
          format: date-time
        numNewerVersions:
          description: Relevant only for versioned objects. If the value is N, this
            condition is satisfied when there are at least N versions (including the
            live version) newer than this version of the object.
          type: integer
    GcpGcsBucketResource:
      type: object
      description: Description of a GCS bucket.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GcpGcsBucketAttributes'
    GcpGcsBucketUpdateParameters:
      description: Parameters that may be changed by a user. Location and Bucket name
        are fixed upon create.
      type: object
      properties:
        defaultStorageClass:
          $ref: '#/components/schemas/GcpGcsBucketDefaultStorageClass'
        lifecycle:
          $ref: '#/components/schemas/GcpGcsBucketLifecycle'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    GcpGcsObjectAttributes:
      description: GCS object properties included in post-creation, get, and update.
        Others must be retrieved from GCS using the name.
      type: object
      required:
        - bucketName
        - fileName
      properties:
        bucketName:
          description: Name of created bucket (not the resource name).
          type: string
        fileName:
          description: Full path to the file in the gcs bucket.
          type: string
    GcpGcsObjectResource:
      type: object
      description: Description of a GCS object.
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GcpGcsObjectAttributes'
    GcsBucketCloudName:
      type: object
      required:
        - generatedBucketCloudName
      properties:
        generatedBucketCloudName:
          type: string
    GenerateAwsResourceCloudNameRequestBody:
      type: object
      required:
        - awsResourceName
      properties:
        awsResourceName:
          type: string
    GenerateGcpAiNotebookCloudIdRequestBody:
      type: object
      required:
        - aiNotebookName
      properties:
        aiNotebookName:
          type: string
    GenerateGcpBigQueryDatasetCloudIDRequestBody:
      type: object
      required:
        - bigQueryDatasetName
      properties:
        bigQueryDatasetName:
          type: string
    GenerateGcpDataprocClusterCloudIdRequestBody:
      type: object
      required:
        - dataprocClusterName
      properties:
        dataprocClusterName:
          type: string
    GenerateGcpGceInstanceCloudIdRequestBody:
      type: object
      required:
        - instanceName
      properties:
        instanceName:
          type: string
    GenerateGcpGcsBucketCloudNameRequestBody:
      type: object
      required:
        - gcsBucketName
      properties:
        gcsBucketName:
          type: string
    GitRepoAttributes:
      description: Attributes of a Git repository
      type: object
      required:
        - gitRepoUrl
      properties:
        gitRepoUrl:
          description: URL for cloning the git repository, could be an HTTPs or SSH
            url.
          type: string
    GitRepoResource:
      type: object
      description: A git repository resource
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/GitRepoAttributes'
    GrantRoleRequestBody:
      description: The body for a request to grant a role to a single user.
      type: object
      required:
        - memberEmail
      properties:
        memberEmail:
          type: string
        notifyMember:
          type: boolean
          default: false
    IamRole:
      description: Enum containing all valid IAM roles on a Workspace
      type: string
      enum:
        - DISCOVERER
        - READER
        - WRITER
        - APPLICATION
        - OWNER
        - PROJECT_OWNER
        - SUPPORT
    JobControl:
      type: object
      required:
        - id
      properties:
        id:
          description: Unique identifier for the job. Best practice is for job identifier
            to be a UUID, a ShortUUID, or other globally unique identifier.
          type: string
    JobReport:
      type: object
      required:
        - id
        - status
        - statusCode
        - resultURL
      properties:
        id:
          description: caller-provided unique identifier for the job
          type: string
        description:
          description: caller-provided description of the job
          type: string
        status:
          description: status of the job
          type: string
          enum:
            - RUNNING
            - SUCCEEDED
            - FAILED
        statusCode:
          description: HTTP code providing status of the job.
          type: integer
        submitted:
          description: timestamp when the job was submitted; in ISO-8601 format
          type: string
        completed:
          description: timestamp when the job completed - in ISO-8601 format. Present
            if status is SUCCEEDED or FAILED.
          type: string
        resultURL:
          description: URL where the result of the job can be retrieved. Equivalent
            to a Location header in HTTP.
          type: string
    JobResult:
      type: object
      description: 'The result of an async call that triggers a stairway job in WSM.

        '
      required:
        - jobReport
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    JobStateFilter:
      type: string
      enum:
        - ALL
        - ACTIVE
        - COMPLETED
    LoadUrlListRequestBody:
      description: 'Request to load signed urls files to a gcs bucket.

        '
      type: object
      properties:
        manifestFileUrl:
          description: "public url (http or https only) to the tsv file that contains\
            \ the \nlist of files.\n"
          type: string
    LoadUrlListResult:
      description: Response for loading signed url lists to gcs bucket.
      type: object
      properties:
        jobReport:
          $ref: '#/components/schemas/JobReport'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
    ManagedBy:
      type: string
      description: Specifies the controller of the resource, workspace users or an
        application
      enum:
        - USER
        - APPLICATION
    MergeCheckRequest:
      description: Request with a workspace id
      type: object
      required:
        - workspaceId
      properties:
        workspaceId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
    Name:
      type: string
      pattern: ^[a-zA-Z0-9][-_a-zA-Z0-9]{0,1023}$
    OperationState:
      type: object
      description: Common operation state properties for cloud context and workspaces
      required:
        - state
      properties:
        state:
          $ref: '#/components/schemas/State'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        jobId:
          type: string
    OperationType:
      type: string
      description: Types of job operations
      enum:
        - APPLICATION_DISABLED
        - APPLICATION_ENABLED
        - CLONE
        - CREATE
        - DELETE
        - GRANT_WORKSPACE_ROLE
        - REMOVE_WORKSPACE_ROLE
        - SYSTEM_CLEANUP
        - UPDATE
        - ADMIN_UPDATE
        - DATA_TRANSFER
        - UNKNOWN
    OrganizationId:
      type: string
      format: uuid
      description: Unique id of the organization containing the CRG containing the
        workspace
    OrganizationUxid:
      type: string
      description: A UXID representing either a UUID or a UFID
    PrivateResourceState:
      description: The possible states of ownership of a private resource. When a
        resource is abandoned, the assigned user loses permission to access it.
      type: string
      enum:
        - ABANDONED
        - ACTIVE
        - INITIALIZING
        - NOT_APPLICABLE
    PrivateResourceUser:
      description: 'This text describes the target state: Applications may optionally
        specify a workspace user to have access to the private resource by providing
        this element. If this element is not specified, workspace users will have
        no direct access to the associated cloud resource. If this element is specified
        both fields are required.'
      type: object
      required:
        - userName
        - privateResourceIamRole
      properties:
        userName:
          description: email of the workspace user to grant access
          type: string
        privateResourceIamRole:
          $ref: '#/components/schemas/ControlledResourceIamRole'
    Properties:
      description: Optional list of key-value pairs of strings
      type: array
      items:
        $ref: '#/components/schemas/Property'
    Property:
      type: object
      required:
        - key
        - value
      properties:
        key:
          description: 'String to identify the key. Keys must be 1-1024 characters,
            using letters,

            numbers, dashes, and underscores and must not start with a dash or underscore.

            '
          type: string
        value:
          description: Arbitrary string value
          type: string
    PropertyKeys:
      description: A list of string keys used for properties
      type: array
      items:
        type: string
    ReferenceResourceCommonFields:
      type: object
      required:
        - cloningInstructions
      description: 'Common information used in all create referenced resource requests.
        Either displayName or name must be provided.

        '
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        folderId:
          $ref: '#/components/schemas/FolderId'
        properties:
          $ref: '#/components/schemas/Properties'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    ReferencedResourceMetadata:
      type: object
      properties:
        resolvedAccess:
          $ref: '#/components/schemas/ResolvedResourceAccessLevel'
        resolvedAttributes:
          $ref: '#/components/schemas/ResolvedResourceAttributesUnion'
    Regions:
      type: array
      description: List of regions (e.g. us-central1, us-west1)
      items:
        uniqueItems: true
        type: string
    ResolvedAwsS3ExternalBucketAttributes:
      description: Attributes containing the
      type: object
      required:
        - bucketName
        - tags
      properties:
        bucketName:
          description: The name of the underlying bucket associated with this resource.
          type: string
        prefix:
          description: Optional prefix path within the bucket.
          type: string
        tags:
          description: IAM tags needed for this resource
          type: object
          additionalProperties:
            type: string
    ResolvedResource:
      type: object
      description: 'A description of a referenced resource and the caller''s access
        on its underlying resource.

        '
      properties:
        id:
          description: The ID of the resource.
          type: string
          format: uuid
        resourceType:
          $ref: '#/components/schemas/ResourceType'
        accessLevel:
          $ref: '#/components/schemas/ResolvedResourceAccessLevel'
        attributes:
          $ref: '#/components/schemas/ResolvedResourceAttributesUnion'
    ResolvedResourceAccessLevel:
      description: Enum containing valid access levels.
      type: string
      enum:
        - WRITER
        - READER
        - NONE
    ResolvedResourceAttributesUnion:
      type: object
      description: 'Union of resolved resource attributes.

        '
      properties:
        awsS3ExternalBucket:
          $ref: '#/components/schemas/ResolvedAwsS3ExternalBucketAttributes'
    ResourceAttributesUnion:
      type: object
      description: 'This object is a union of reference to each resource type''s attributes.

        Exactly one will be populated based on the ResourceType in the

        ResourceDescription. The value of the other references is undefined.

        '
      properties:
        gcpBqDataset:
          $ref: '#/components/schemas/GcpBigQueryDatasetAttributes'
        gcpBqDataTable:
          $ref: '#/components/schemas/GcpBigQueryDataTableAttributes'
        gcpDataprocCluster:
          $ref: '#/components/schemas/GcpDataprocClusterAttributes'
        gcpGceInstance:
          $ref: '#/components/schemas/GcpGceInstanceAttributes'
        gcpGcsBucket:
          $ref: '#/components/schemas/GcpGcsBucketAttributes'
        gcpGcsObject:
          $ref: '#/components/schemas/GcpGcsObjectAttributes'
        gcpAiNotebookInstance:
          $ref: '#/components/schemas/GcpAiNotebookInstanceAttributes'
        awsS3ExternalBucket:
          $ref: '#/components/schemas/AwsS3ExternalBucketAttributes'
        awsS3ExternalBucketReference:
          $ref: '#/components/schemas/AwsS3ExternalBucketReferenceAttributes'
        awsS3StorageFolder:
          $ref: '#/components/schemas/AwsS3StorageFolderAttributes'
        awsSageMakerNotebook:
          $ref: '#/components/schemas/AwsSageMakerNotebookAttributes'
        awsEc2Instance:
          $ref: '#/components/schemas/AwsEc2InstanceAttributes'
        gitRepo:
          $ref: '#/components/schemas/GitRepoAttributes'
        terraWorkspace:
          $ref: '#/components/schemas/TerraWorkspaceAttributes'
        flexibleResource:
          $ref: '#/components/schemas/FlexibleResourceAttributes'
    ResourceCloneDetails:
      description: A structure to give provenance of a controlled or referenced resource
        clone
      type: object
      properties:
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        resourceType:
          $ref: '#/components/schemas/ResourceType'
        stewardshipType:
          $ref: '#/components/schemas/StewardshipType'
        sourceResourceId:
          description: resource ID of the original resource
          type: string
          format: uuid
        destinationResourceId:
          description: resource ID of the cloned resource, or null if failed or skipped
          type: string
          format: uuid
        destinationFolderId:
          $ref: '#/components/schemas/FolderId'
        result:
          $ref: '#/components/schemas/CloneResourceResult'
        errorMessage:
          description: If result is FAILED, a short description of the cause, if available.
          type: string
        name:
          description: name of the resource (same as source)
          type: string
        displayName:
          description: display name of the resource (same as source)
          type: string
        description:
          description: description of the destination resource (same as source)
          type: string
    ResourceDescription:
      type: object
      required:
        - metadata
        - resourceAttributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        resourceAttributes:
          description: Data specific to the type of resource and whether it is controlled
            or not
          $ref: '#/components/schemas/ResourceAttributesUnion'
    ResourceFilterByAssignedUser:
      type: object
      required:
        - userName
      properties:
        userName:
          description: Username of a assigned user to filter resources
          type: string
        offset:
          description: The number of items to skip before starting to collect the
            result set.
          type: integer
          minimum: 0
          default: 0
        limit:
          description: The maximum number of items to return
          type: integer
          minimum: 1
          default: 100
    ResourceLineage:
      type: array
      items:
        $ref: '#/components/schemas/ResourceLineageEntry'
    ResourceLineageEntry:
      type: object
      required:
        - sourceWorkspaceId
        - sourceResourceId
      description: Resource lineage entry describing a single clone operation
      properties:
        sourceWorkspaceId:
          type: string
          format: uuid
        sourceResourceId:
          type: string
          format: uuid
    ResourceList:
      type: object
      required:
        - resources
      properties:
        resources:
          description: Enumerated list of controlled and referenced resources
          type: array
          items:
            $ref: '#/components/schemas/ResourceDescription'
    ResourceMetadata:
      type: object
      required:
        - workspaceId
        - resourceId
        - name
        - resourceType
        - stewardshipType
        - createdBy
        - createdDate
        - lastUpdatedBy
        - lastUpdatedDate
      properties:
        workspaceId:
          type: string
          format: uuid
        resourceId:
          type: string
          format: uuid
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        folderId:
          $ref: '#/components/schemas/FolderId'
        resourceType:
          $ref: '#/components/schemas/ResourceType'
        stewardshipType:
          $ref: '#/components/schemas/StewardshipType'
        cloudPlatform:
          $ref: '#/components/schemas/CloudPlatform'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        controlledResourceMetadata:
          description: Present if stewardship type is CONTROLLED
          $ref: '#/components/schemas/ControlledResourceMetadata'
        referencedResourceMetadata:
          description: Present if stewardship type is REFERENCED
          $ref: '#/components/schemas/ReferencedResourceMetadata'
        resourceLineage:
          $ref: '#/components/schemas/ResourceLineage'
        properties:
          $ref: '#/components/schemas/Properties'
        createdBy:
          description: User email of whom created the resource
          type: string
        createdDate:
          description: Timestamp when the resource is created
          type: string
          format: date-time
        lastUpdatedBy:
          description: User email of whom last updated the resource
          type: string
        lastUpdatedDate:
          description: Timestamp where the resource was last updated
          type: string
          format: date-time
        state:
          $ref: '#/components/schemas/State'
        errorReport:
          $ref: '#/components/schemas/ErrorReport'
        jobId:
          type: string
    ResourceType:
      description: Enum containing valid resource types. Used for enumeration
      type: string
      enum:
        - AI_NOTEBOOK
        - BIG_QUERY_DATASET
        - BIG_QUERY_DATA_TABLE
        - GCE_INSTANCE
        - GCS_BUCKET
        - GCS_OBJECT
        - DATAPROC_CLUSTER
        - AWS_S3_EXTERNAL_BUCKET
        - AWS_S3_EXTERNAL_BUCKET_REFERENCE
        - AWS_S3_STORAGE_FOLDER
        - AWS_SAGEMAKER_NOTEBOOK
        - AWS_EC2_INSTANCE
        - GIT_REPO
        - TERRA_WORKSPACE
        - FLEXIBLE_RESOURCE
    ResourceUnion:
      type: object
      description: 'This object is a union of reference to each resource type''s resource
        object.

        Exactly one will be populated based on the ResourceType.

        The value of the other references is undefined.

        '
      properties:
        gcpBqDataset:
          $ref: '#/components/schemas/GcpBigQueryDatasetResource'
        gcpBqDataTable:
          $ref: '#/components/schemas/GcpBigQueryDataTableResource'
        gcpDataprocCluster:
          $ref: '#/components/schemas/GcpDataprocClusterResource'
        gcpGceInstance:
          $ref: '#/components/schemas/GcpGceInstanceResource'
        gcpGcsBucket:
          $ref: '#/components/schemas/GcpGcsBucketResource'
        gcpGcsObject:
          $ref: '#/components/schemas/GcpGcsObjectResource'
        gcpAiNotebookInstance:
          $ref: '#/components/schemas/GcpAiNotebookInstanceResource'
        awsS3ExternalBucket:
          $ref: '#/components/schemas/AwsS3ExternalBucketResource'
        awsS3ExternalBucketReference:
          $ref: '#/components/schemas/AwsS3ExternalBucketReferenceResource'
        awsS3StorageFolder:
          $ref: '#/components/schemas/AwsS3StorageFolderResource'
        awsSageMakerNotebook:
          $ref: '#/components/schemas/AwsSageMakerNotebookResource'
        gitRepo:
          $ref: '#/components/schemas/GitRepoResource'
        terraWorkspace:
          $ref: '#/components/schemas/TerraWorkspaceResource'
        flexibleResource:
          $ref: '#/components/schemas/FlexibleResource'
    RoleBinding:
      description: A binding between an IAM role and users with that role
      type: object
      required:
        - role
      properties:
        role:
          $ref: '#/components/schemas/IamRole'
        members:
          description: A list of users that this role applies to
          type: array
          items:
            type: string
    RoleBindingList:
      description: A list of role bindings
      type: array
      items:
        $ref: '#/components/schemas/RoleBinding'
    State:
      type: string
      description: WSM object state
      enum:
        - BROKEN
        - CREATING
        - DELETING
        - READY
        - UPDATING
    StewardshipType:
      description: Enum containing valid stewardship types. Used for enumeration
      type: string
      enum:
        - REFERENCED
        - CONTROLLED
    SystemVersion:
      type: object
      required:
        - gitTag
        - gitHash
        - github
        - build
      properties:
        gitTag:
          type: string
          description: Git tag of currently deployed app.
        gitHash:
          type: string
          description: Git hash of currently deployed app.
        github:
          type: string
          description: Github link to currently deployed commit.
        build:
          type: string
          description: Version of the currently deployed app declared in build.gradle.
            Client and server versions are linked.
        oldestSupportedCliVersion:
          type: string
          description: 'For the terra CLI client, the oldest version known to work
            with the current version of WSM.

            '
    TerraWorkspaceAttributes:
      description: Terra workspace attributes
      type: object
      required:
        - referencedWorkspaceId
      properties:
        referencedWorkspaceId:
          description: UUID for the workspace that this resource points to
          type: string
          format: uuid
    TerraWorkspaceResource:
      type: object
      description: A reference to a Terra workspace
      required:
        - metadata
        - attributes
      properties:
        metadata:
          description: the resource metadata common to all resources
          $ref: '#/components/schemas/ResourceMetadata'
        attributes:
          $ref: '#/components/schemas/TerraWorkspaceAttributes'
    UpdateBigQueryDataTableReferenceRequestBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        projectId:
          type: string
        datasetId:
          type: string
        dataTableId:
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    UpdateBigQueryDatasetReferenceRequestBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        projectId:
          type: string
        datasetId:
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    UpdateCommonResourceMetadataBody:
      type: object
      properties:
        name:
          description: New name to give to this resource. Will not be updated if this
            is omitted.
          $ref: '#/components/schemas/Name'
        displayName:
          description: New display name to give to this resource. Will not be updated
            if this is omitted.
          $ref: '#/components/schemas/DisplayName'
        description:
          description: New description to give to this resource. Will not be updated
            if this is omitted.
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        updateProperties:
          $ref: '#/components/schemas/Properties'
        deleteProperties:
          $ref: '#/components/schemas/PropertyKeys'
    UpdateControlledAwsEc2InstanceRequestBody:
      type: object
      description: Update an AWS EC2 Virtual Machine resource's metadata.
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
    UpdateControlledAwsS3ExternalBucketRequestBody:
      type: object
      description: Update an AWS S3 Storage folder's metadata.
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        updateParameters:
          $ref: '#/components/schemas/AwsS3ExternalBucketUpdateParameters'
    UpdateControlledAwsS3StorageFolderRequestBody:
      type: object
      description: Update an AWS S3 Storage folder's metadata.
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
    UpdateControlledAwsSageMakerNotebookRequestBody:
      type: object
      description: Update an AWS SageMaker Notebook resource's metadata.
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
    UpdateControlledFlexibleResourceRequestBody:
      type: object
      description: Update a flexible resource's metadata and attributes (type, data,
        and the type's namespace). This operation completely overrides the data field
        (if specified in the update parameters).
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        updateParameters:
          $ref: '#/components/schemas/FlexibleResourceUpdateParameters'
    UpdateControlledGcpAiNotebookInstanceRequestBody:
      type: object
      description: Update an AI notebook's metadata
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        updateParameters:
          $ref: '#/components/schemas/GcpAiNotebookUpdateParameters'
    UpdateControlledGcpBigQueryDatasetRequestBody:
      type: object
      description: Update a BigQuery dataset's metadata and expiration times.
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        updateParameters:
          $ref: '#/components/schemas/GcpBigQueryDatasetUpdateParameters'
    UpdateControlledGcpDataprocClusterRequestBody:
      type: object
      description: Update a Dataproc cluster's metadata
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        updateParameters:
          $ref: '#/components/schemas/ControlledDataprocClusterUpdateParameters'
    UpdateControlledGcpGceInstanceRequestBody:
      type: object
      description: Update an GCE instance metadata
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        updateParameters:
          $ref: '#/components/schemas/GcpGceUpdateParameters'
    UpdateControlledGcpGcsBucketRequestBody:
      type: object
      description: Update a GCS bucket's metadata and lifecycle rules.
      properties:
        name:
          description: Optional. New name to give to this resource. The resource name
            will not be updated if this is omitted.
          type: string
        displayName:
          description: Optional. New display name to give to this resource. The display
            name will not be updated if this is omitted.
          type: string
        description:
          description: Optional. New description to give to this resource. The resource
            description will not be updated if this is omitted.
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        updateParameters:
          $ref: '#/components/schemas/GcpGcsBucketUpdateParameters'
    UpdateFolderId:
      type: object
      description: 'Whether to update the folderId. If omitted, the folderId will
        not be updated,

        if defined but child property folderId is not provided, then the request is
        to unset the folderId.

        '
      properties:
        folderId:
          $ref: '#/components/schemas/FolderId'
    UpdateFolderRequestBody:
      type: object
      properties:
        displayName:
          description: The human readable name of the folder
          type: string
        description:
          description: A description of the folder
          type: string
        parentFolderId:
          description: "The parent folder id to update this folder to. When null and\
            \ \nupdateParent is false, do not update. When null and\nupdateParent\
            \ is true, move the folder to be the top-level.\n"
          $ref: '#/components/schemas/FolderId'
        updateParent:
          description: 'Whether to update parent folder id.

            '
          type: boolean
          default: false
    UpdateGcsBucketObjectReferenceRequestBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        bucketName:
          description: Name of created bucket (not the resource name).
          type: string
        objectName:
          description: Full path to the file in the gcs bucket.
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    UpdateGcsBucketReferenceRequestBody:
      type: object
      description: Fields updatable on a GCS bucket. Leave properties null to keep
        them the same.
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        bucketName:
          description: Name of created bucket (not the resource name).
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    UpdateGitRepoReferenceRequestBody:
      type: object
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        gitRepoUrl:
          description: the url for cloning the corresponding git repository
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    UpdateS3ExternalBucketReferenceRequestBody:
      type: object
      description: Fields updatable on an S3 folder. Leave properties null to keep
        them the same.
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    UpdateS3FolderReferenceRequestBody:
      type: object
      description: Fields updatable on an S3 folder. Leave properties null to keep
        them the same.
      properties:
        name:
          $ref: '#/components/schemas/Name'
        displayName:
          $ref: '#/components/schemas/DisplayName'
        description:
          type: string
        updateFolderId:
          $ref: '#/components/schemas/UpdateFolderId'
        s3Uri:
          description: s3 URI path.
          type: string
        region:
          description: region of the updated s3 bucket
          type: string
        cloningInstructions:
          $ref: '#/components/schemas/CloningInstructionsEnum'
    UpdateWorkspaceRequestBody:
      type: object
      properties:
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the workspace
          type: string
    UpdateWorkspacesByCrgRequest:
      description: 'Provide the new billing account of the CRG. If we allow additional
        changes, they can be

        added to the request and we can make billing account optional.

        '
      type: object
      required:
        - gcpBillingAccount
        - jobControl
      properties:
        gcpBillingAccount:
          description: The new billing account for workspaces in a CRG
          type: string
        jobControl:
          $ref: '#/components/schemas/JobControl'
    UserFacingId:
      description: 'Human-settable, mutable id. Must have 3-63 characters, contain
        lowercase letters, numbers, dashes, or

        underscores, and start with lowercase letter or number.

        '
      type: string
    WorkspaceApplicationDescription:
      type: object
      required:
        - workspaceId
        - applicationId
        - applicationState
        - workspaceApplicationState
      properties:
        workspaceId:
          description: The ID of the workspace
          type: string
          format: uuid
        applicationId:
          description: The ID of the application
          type: string
          format: string
        displayName:
          description: The human readable name of the application
          type: string
        description:
          description: A description of the application
          type: string
        applicationState:
          $ref: '#/components/schemas/ApplicationState'
        workspaceApplicationState:
          $ref: '#/components/schemas/WorkspaceApplicationState'
    WorkspaceApplicationDescriptionList:
      type: object
      required:
        - applications
      properties:
        applications:
          description: A list of known applications and their relationship to the
            workspace
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceApplicationDescription'
    WorkspaceApplicationState:
      description: State of the application in the workspace.
      type: string
      enum:
        - ENABLED
        - DISABLED
    WorkspaceDescription:
      type: object
      required:
        - id
        - userFacingId
        - highestRole
        - createdBy
        - lastUpdatedBy
        - createdDate
        - lastUpdatedDate
      properties:
        id:
          description: The ID of the workspace. Immutable.
          type: string
          format: uuid
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the workspace
          type: string
        highestRole:
          description: 'Highest role of requester. If requester is both reader and
            writer, writer will be

            returned.

            '
          $ref: '#/components/schemas/IamRole'
        spendProfile:
          deprecated: true
          description: ID of provided spend profile. DEPRECATED. Use spend profile
            in the cloud context
          type: string
        stage:
          $ref: '#/components/schemas/WorkspaceStageModel'
        gcpContext:
          description: GCP context, if one exists
          $ref: '#/components/schemas/GcpContext'
        awsContext:
          description: AWS context, if one exists
          $ref: '#/components/schemas/AwsContext'
        orgId:
          $ref: '#/components/schemas/OrganizationId'
        crgId:
          $ref: '#/components/schemas/CloudResourceGroupId'
        properties:
          $ref: '#/components/schemas/Properties'
        createdDate:
          description: Timestamp when the workspace is created
          type: string
          format: date-time
        createdBy:
          description: User email of whom created the workspace
          type: string
        lastUpdatedDate:
          description: Timestamp of the latest workspace change
          type: string
          format: date-time
        lastUpdatedBy:
          description: User email of whom made the last update to the workspace
          type: string
        policies:
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyInput'
        missingAuthDomains:
          type: array
          description: The auth domains that the user is missing for this workspace
          items:
            type: string
        operationState:
          $ref: '#/components/schemas/OperationState'
        cloneJobId:
          description: Job id of the workspace clone operation when this is the target
            workspace; null otherwise
          type: string
    WorkspaceDescriptionList:
      type: object
      required:
        - workspaces
      properties:
        workspaces:
          description: A list of workspaces
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceDescription'
    WorkspaceFilter:
      type: object
      properties:
        gcpProjectIds:
          description: GCP project ids of the workspaces
          type: array
          items:
            type: string
        podIds:
          description: pod ids of the workspaces
          type: array
          items:
            type: string
            format: uuid
        orgIds:
          description: org ids of the workspaces
          type: array
          items:
            type: string
            format: uuid
        offset:
          description: The number of items to skip before starting to collect the
            result set.
          type: integer
          minimum: 0
          default: 0
        limit:
          description: The maximum number of items to return
          type: integer
          minimum: 1
          default: 100
    WorkspaceInfo:
      description: Reduced set of information about a workspace. Does not include
        Sam info (policies, auth domains, etc.) from WorkspaceDescription.
      type: object
      required:
        - id
        - userFacingId
        - createdBy
        - createdDate
      properties:
        id:
          description: The ID of the workspace. Immutable.
          type: string
          format: uuid
        userFacingId:
          $ref: '#/components/schemas/UserFacingId'
        displayName:
          description: The human readable name of the workspace
          type: string
        description:
          description: A description of the workspace
          type: string
        crgId:
          $ref: '#/components/schemas/CloudResourceGroupId'
        createdDate:
          description: Timestamp when the workspace is created
          type: string
          format: date-time
        createdBy:
          description: User email of whom created the workspace
          type: string
    WorkspaceInfoList:
      type: object
      required:
        - workspaces
      properties:
        workspaces:
          description: A list of workspaces
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceInfo'
    WorkspaceStageModel:
      description: Enum for possible different types of workspaces; CRG is supported
        as a synonym for POD.
      type: string
      enum:
        - POD_WORKSPACE
        - CRG_WORKSPACE
    WsmPolicy:
      type: object
      required:
        - objectId
        - component
        - objectType
      properties:
        objectId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
        component:
          $ref: '#/components/schemas/WsmPolicyComponent'
        objectType:
          $ref: '#/components/schemas/WsmPolicyObjectType'
        attributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        effectiveAttributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        deleted:
          type: boolean
        sourcesObjectIds:
          type: array
          uniqueItems: true
          items:
            $ref: '#/components/schemas/WsmPolicyObjectId'
        createdDate:
          description: ISO 8601 format date-time of when TPS created the policy
          type: string
        lastUpdatedDate:
          description: ISO 8601 format date-time of the last update of the effective
            policy
          type: string
    WsmPolicyComponent:
      type: string
      description: Enum representing a policy-bearing Terra component.
      enum:
        - BPM
        - TDR
        - WSM
    WsmPolicyConflict:
      type: object
      description: Describes a policy conflict between two policies
      required:
        - targetPolicy
        - conflictPolicy
        - namespace
        - name
      properties:
        namespace:
          description: Namespace of the conflicting policy; e.g., terra
          type: string
        name:
          description: Name of the conflicting policy; e.g., group-constraint
          type: string
        targetPolicy:
          description: The target policy object under change
          $ref: '#/components/schemas/WsmPolicyDescription'
        conflictPolicy:
          description: The policy object attempting to combine the conflicting policy
          $ref: '#/components/schemas/WsmPolicyDescription'
    WsmPolicyDepth:
      type: integer
      description: Explain source depth.
      minimum: 0
      default: 1
    WsmPolicyDescription:
      type: object
      description: Description of a PAO
      required:
        - objectId
        - component
        - objectType
      properties:
        objectId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
        component:
          $ref: '#/components/schemas/WsmPolicyComponent'
        objectType:
          $ref: '#/components/schemas/WsmPolicyObjectType'
    WsmPolicyExplainResult:
      type: object
      properties:
        depth:
          $ref: '#/components/schemas/WsmPolicyDepth'
        objectId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
        explainObjects:
          description: List of WSM policy objects referenced in the explanation
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyObject'
        explanation:
          description: One explanation for each policy in the effective policies array
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyExplanation'
    WsmPolicyExplanation:
      description: 'Explanation of one policy input, providing the input and the sources

        that were combined to result in the policy. One of the sources can be the

        requested object itself. The policyExplanations may be empty/not present if

        this is a leaf in the explain graph.

        '
      type: object
      required:
        - objectId
        - policyInput
      properties:
        objectId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
        policyInput:
          $ref: '#/components/schemas/WsmPolicyInput'
        policyExplanations:
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyExplanation'
    WsmPolicyInput:
      type: object
      required:
        - namespace
        - name
      properties:
        namespace:
          description: Namespace of the policy input; e.g., 'terra'
          type: string
        name:
          description: Name of the policy input; e.g., 'region-constraint'
          type: string
        additionalData:
          description: Key-value pairs of additional data
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyPair'
    WsmPolicyInputs:
      type: object
      required:
        - inputs
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyInput'
    WsmPolicyLocation:
      description: TPS location object description.
      type: object
      required:
        - name
        - description
      properties:
        name:
          description: The location name
          type: string
        description:
          description: The location description
          type: string
        sublocations:
          description: Sub-locations contained within this location.
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyLocation'
        regions:
          $ref: '#/components/schemas/Regions'
    WsmPolicyMergeCheckResult:
      type: object
      required:
        - conflicts
        - resourcesWithConflict
      properties:
        conflicts:
          description: 'List of workspace conflicts.

            '
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyConflict'
        resourcesWithConflict:
          description: 'List of resources (by ID) in the target workspace with conflicting
            policy.

            '
          type: array
          items:
            type: string
            format: uuid
    WsmPolicyObject:
      type: object
      properties:
        objectId:
          $ref: '#/components/schemas/WsmPolicyObjectId'
        objectType:
          $ref: '#/components/schemas/WsmPolicyObjectType'
        component:
          $ref: '#/components/schemas/WsmPolicyComponent'
        deleted:
          description: Policy source has been deleted. Policies from the source still
            apply.
          type: boolean
        access:
          description: No access to the policy object. Policies from the source still
            apply.
          type: boolean
        name:
          description: Name of the policy object. Null if no access.
          type: string
        properties:
          description: The properties of the policy object. Empty if no access.
          $ref: '#/components/schemas/Properties'
        createdDate:
          description: ISO 8601 format date-time of when TPS created the policy
          type: string
        lastUpdatedDate:
          description: ISO 8601 format date-time of the last update of the effective
            policy
          type: string
    WsmPolicyObjectId:
      description: "The Terra object associated with this PAO; for example, a workspace\
        \ UUID associated \nwith its policy attribute object. Since these are UUIDs,\
        \ they will not conflict even \nthey are generated by different Terra components.\n"
      type: string
      format: uuid
    WsmPolicyObjectType:
      type: string
      description: Enum representing an object type of a policy-bearing Terra component.
      enum:
        - billing-profile
        - dataset
        - snapshot
        - workspace
    WsmPolicyPair:
      description: Container for key-value pairs of policy inputs
      type: object
      properties:
        key:
          type: string
        value:
          type: string
    WsmPolicyUpdateMode:
      type: string
      description: "Enum controlling how policy updates are processed.\nDRY_RUN -\
        \ conflict checking is done, but no updates are done\nFAIL_ON_CONFLICT - updates\
        \ are made if there are no conflicts\nENFORCE_CONFLICT - updates are made\
        \ and conflicts are propagated\n  to policy dependents. (Only valid on policy\
        \ update.)\n"
      enum:
        - DRY_RUN
        - FAIL_ON_CONFLICT
        - ENFORCE_CONFLICT
    WsmPolicyUpdateRequest:
      description: Update request body
      type: object
      required:
        - updateMode
      properties:
        removeAttributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        addAttributes:
          $ref: '#/components/schemas/WsmPolicyInputs'
        updateMode:
          $ref: '#/components/schemas/WsmPolicyUpdateMode'
    WsmPolicyUpdateResult:
      type: object
      required:
        - updateApplied
        - conflicts
      properties:
        updateApplied:
          description: 'true if the update was applied; false if it was not. The response
            code will be 200

            even if the update was not applied.

            '
          type: boolean
        resultingPolicy:
          description: 'resulting policy; this reflects the state of the policy as
            it would be if the update

            was applied. It does not necessarily reflect the policy state in Terra
            Policy Service

            '
          $ref: '#/components/schemas/WsmPolicy'
        conflicts:
          description: 'list of conflicts; may be present on success or failure, depending
            on the updateMode setting

            '
          type: array
          items:
            $ref: '#/components/schemas/WsmPolicyConflict'
  securitySchemes:
    authorization:
      type: oauth2
      flows:
        implicit:
          authorizationUrl: https://accounts.google.com/o/oauth2/auth
          scopes:
            openid: open id authorization
            email: email authorization
            profile: profile authorization
security:
  - authorization:
      - openid
      - email
      - profile