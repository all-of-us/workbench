openapi: 3.0.1
info:
  title: AllOfUs Workbench API
  description: |
    The API for the AllOfUs workbench.

    Throughout, we use integer/int64 in preference to string/date-time because Swagger's
    date formatting is inconsistent between server and client. Time values are stored as
    milliseconds since the UNIX epoch.

    Note: all requests tagged as "cron" must have the header X-Appengine-Cron:
    true, which app engine itself only sets when invoking as a cronjob.
    See https://cloud.google.com/appengine/docs/standard/java/config/cron#securing_urls_for_cron
    and o.p.w.interceptors.CronInterceptor which implements the header check.
  termsOfService: http://www.pmi-ops.org/terms_of_service.html
  contact:
    name: developer_help@pmi-ops.org
  license:
    name: BSD
  version: 0.1.0
servers:
- url: https://api.pmi-ops.org/
security:
- aou_oauth: []
paths:
  /v1/status:
    get:
      tags:
      - status
      description: Returns the status of the various services and integrations
      operationId: getStatus
      security: []
      responses:
        200:
          description: A map of system name to status.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusResponse'
  /v1/config:
    get:
      tags:
      - config
      description: Returns some server configuration data.
      operationId: getConfig
      security: []
      responses:
        200:
          description: Configuration data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConfigResponse'
  /v1/cdrVersionsByTier:
    get:
      tags:
      - cdrVersions
      description: |
        Returns all curated data repository (CDR) versions in all tiers that the user has access to
      operationId: getCdrVersionsByTier
      responses:
        200:
          description: A mapping of tiers to CDR versions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CdrVersionTiersResponse'
  /v1/status-alert:
    get:
      tags:
      - status-alert
      description: DEPRECATED - Returns status alert information if any exists.
      operationId: getStatusAlert
      security: []
      responses:
        200:
          description: A status alert information object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusAlert'
    post:
      tags:
      - status-alert
      description: Pushes new status alert information to all users
      operationId: postStatusAlert
      requestBody:
        description: the new status alert to use
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/StatusAlert'
        required: false
      responses:
        200:
          description: A status alert information object.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatusAlert'
      x-codegen-request-body-name: statusAlert
  /v2/status-alert:
    get:
      tags:
      - status-alert
      description: Returns status alert information if any exists.
      operationId: getStatusAlerts
      security: []
      responses:
        200:
          description: A status alert information object.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/StatusAlert'
  /v1/status-alert/{id}:
    delete:
      tags:
      - status-alert
      description: Deletes the specified status alert
      operationId: deleteStatusAlert
      parameters:
      - name: id
        in: path
        description: The ID of the status alert to delete
        required: true
        schema:
          type: integer
          format: int64
      responses:
        204:
          description: Request Received.
  /v1/profile:
    get:
      tags:
      - profile
      description: Returns the user's profile information
      operationId: getMe
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
    delete:
      tags:
      - profile
      description: Deletes the user's profile and gsuite account, does not clean up
        in firecloud.
      operationId: deleteProfile
      responses:
        204:
          description: Request Received.
          content: {}
    patch:
      tags:
      - profile
      description: Updates a users profile
      operationId: updateProfile
      requestBody:
        description: the new profile to use
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Profile'
        required: false
      responses:
        204:
          description: Request received.
          content: {}
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: updatedProfile
  /v1/getUserTermsOfServiceStatus:
    get:
      tags:
      - profile
      description: Returns if the logged in user has accepted the latest versions
        of the All of Us and Terra Terms of Service agreements
      operationId: getUserTermsOfServiceStatus
      responses:
        200:
          description: Returns true if user has accepted latest versions of the All
            of Us and Terra Terms of Service agreements
          content:
            application/json:
              schema:
                type: boolean
  /v1/signOut:
    post:
      tags:
      - user
      description: SignOut user's gsuite account
      operationId: signOut
      responses:
        204:
          description: User signout success
          content: {}
  /v1/acceptTermsOfService:
    post:
      tags:
      - profile
      description: User accepts current version of Terra and specific version Of All
        of Us Terms of Service
      operationId: acceptTermsOfService
      parameters:
      - name: termsOfServiceVersion
        in: query
        description: Version of the All of Us TOS that the user has acknowledged
        schema:
          type: integer
          format: int32
      responses:
        204:
          description: User has accepted AOU and Terra Terms of service.
          content: {}
  /v1/confirmProfile:
    post:
      tags:
      - profile
      description: Used by users to confirm that their profile is up to date, as part
        of the annual renewal compliance process.
      operationId: confirmProfile
      responses:
        204:
          description: Profile Confirmed.
          content: {}
  /v1/confirmPublications:
    post:
      tags:
      - profile
      description: Used by users to confirm that they have either reported any AoU-related
        publications, or they have none.
      operationId: confirmPublications
      responses:
        204:
          description: Publications Confirmed.
          content: {}
  /v1/is-username-taken:
    get:

      tags:
      - profile
      description: Checks to see if the given username is not available.
      operationId: isUsernameTaken
      security: []
      parameters:
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: The answer.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UsernameTakenResponse'
  /v1/update-contact-email:
    post:
      tags:
      - profile
      description: Only for accounts that have not logged in yet, update contact email.
      operationId: updateContactEmail
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateContactEmailRequest'
        required: false
      responses:
        200:
          description: Contact Email Updated
          content: {}
        400:
          description: Invalid contact email address
          content: {}
        403:
          description: Unable to process this request
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: updateContactEmailRequest
  /v1/resend-welcome-email:
    post:
      tags:
      - profile
      description: Resend welcome email
      operationId: resendWelcomeEmail
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ResendWelcomeEmailRequest'
        required: false
      responses:
        200:
          description: Welcome Email sent.
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: resendWelcomeEmail
  /v1/send-billing-setup-email:
    post:
      tags:
      - profile
      description: Send billing setup email to GCP partner
      operationId: sendBillingSetupEmail
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SendBillingSetupEmailRequest'
        required: false
      responses:
        200:
          description: Billing setup email sent.
          content: {}
        403:
          description: Forbidden
          content: {}
        500:
          description: Internal Server Error
          content: {}
      x-codegen-request-body-name: sendBillingSetupEmail
  /v1/google-account:
    post:
      tags:
      - profile
      description: Creates an account in the researchallofus.org domain.
      operationId: createAccount
      security: []
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
        required: false
      responses:
        200:
          description: Account created successfully.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Error occurred while creating account.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: createAccountRequest
  /v1/user/link-ras-account:
    post:
      tags:
      - profile
      description: Link user with a RAS account
      operationId: linkRasAccount
      requestBody:
        description: The authorization code from RAS.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RasLinkRequestBody'
        required: false
      responses:
        200:
          description: The user's account linking information.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: Forbidden
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: rasLinkRequestBody
  /v1/user/extendInitialCreditExpiration:
    post:
      tags:
      - profile
      description: User requests extension of initial credit expiration period
      operationId: extendInitialCreditExpiration
      responses:
        200:
          description: The user's initial credit expiration period has been extended.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/page-visits:
    post:
      tags:
      - profile
      description: Updates a users page visits
      operationId: updatePageVisits
      requestBody:
        description: the users pageVisits
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageVisit'
        required: false
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: pageVisit
  /v1/account/submit-data-user-code-of-conduct:
    post:
      tags:
      - profile
      description: Submits consent to the Data User Code of Conduct for researchers.
      operationId: submitDUCC
      parameters:
      - name: duccSignedVersion
        in: query
        description: Version \# of the Data User Code of Conduct that was signed.
        required: true
        schema:
          type: integer
      - name: initials
        in: query
        description: Initials of the user on the form.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
  /v1/account/sync-training-status:
    post:
      tags:
      - profile
      summary: Sync compliance training status
      description: Retrieves the Absorb training status for the user and updates access module
        completion times and access tier membership when appropriate
      operationId: syncComplianceTrainingStatus
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/account/sync-era-commons-status:
    post:
      tags:
      - profile
      summary: Sync eRA Commons status
      description: Retrieves and stores the current user's NIH / eRA Commons linkage
        status, fetched via the FireCloud API.
      operationId: syncEraCommonsStatus
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/account/sync-two-factor-auth-status:
    post:
      tags:
      - profile
      summary: Sync two factor auth status
      description: Syncs a user's 2FA status from google
      operationId: syncTwoFactorAuthStatus
      responses:
        200:
          description: The user's profile.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        404:
          description: User not found
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/auth-domain/{groupName}:
    post:
      tags:
      - authDomain
      description: This endpoint will create the registered auth domain.
      operationId: createAuthDomain
      parameters:
      - name: groupName
        in: path
        description: groupName
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully created auth domain
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthDomainCreatedResponse'
  /v1/userSearch/{accessTierShortName}/{term}:
    get:
      tags:
      - user
      description: |
        Return a page of users matching a search term and an access tier. Used by autocomplete for workspace sharing.
      operationId: userSearch
      parameters:
      - name: accessTierShortName
        in: path
        description: The shortName corresponding to an access tier to search in. Requesting
          user must also be a member of this tier.
        required: true
        schema:
          type: string
      - name: term
        in: path
        description: String to find in user's name or email address. Search is a case-insensitive
          substring match.
        required: true
        schema:
          type: string
      - name: pageToken
        in: query
        description: Pagination token retrieved from a previous call to user; used
          for retrieving additional pages of results.
        schema:
          type: string
      - name: pageSize
        in: query
        description: Maximum number of results to return in a response. Defaults to
          10.
        schema:
          type: integer
      - name: sortOrder
        in: query
        description: Sort order, either 'asc' or 'desc'. Defaults to 'asc' on the
          user's email.
        schema:
          type: string
      responses:
        200:
          description: The user information matching supplied search terms
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserResponse'
  /v1/user/billingAccounts:
    get:
      tags:
      - user
      description: Returns a list of billing accounts the caller can set a workspace's
        billing account to
      operationId: listBillingAccounts
      responses:
        200:
          description: List of billing accounts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkbenchListBillingAccountsResponse'
  /v1/runtimes/{workspaceNamespace}:
    get:
      tags:
      - runtime
      summary: Get the user's workspace runtime.
      description: Returns the current user's runtime, if any, which has been created
        for the given workspace.
      operationId: getRuntime
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: The runtime for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Runtime'
        404:
          description: No runtime exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - runtime
      summary: Create a workspace runtime.
      description: |
        Creates a new runtime for the current user in the given billing project. If a runtime already exists for the user in this billing project, a 409 conflict error is returned (even if the runtime is still initializing or is not in a ready state).
        TODO(RW-3697): Custom runtime creation params should be added as a body param here.
      operationId: createRuntime
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      requestBody:
        description: notebooks runtime definition
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Runtime'
        required: true
      responses:
        200:
          description: Runtime was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        409:
          description: A runtime for this user and workspace already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: runtime
    delete:
      tags:
      - runtime
      summary: Delete a workspace runtime.
      description: 'TODO(RW-3695): updateRuntime should be added as a PATCH endpoint
        here.'
      operationId: deleteRuntime
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: deleteDisk
        in: query
        description: Whether or not disk should be deleted if the runtime is using
          persistent disk. Default to false if not specified
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: No runtime exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - runtime
      summary: Updates the configuration of a runtime
      description: In order to update the configuration of a runtime, it must first
        be running or paused
      operationId: updateRuntime
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateRuntimeRequest'
        required: false
      responses:
        202:
          description: Runtime update request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: runtime
  /v1/runtimes/{workspaceNamespace}/localize:
    post:
      tags:
      - runtime
      summary: Localize files to the user's runtime.
      description: Localizes files to the runtime for the current user and given workspace.
        As a side-effect, JSON workspace environment files will also be localized
        to the runtime.
      operationId: localize
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - in: query
        name: localizeAllFiles
        description: |
          Optional query that will localize all files associate with this app. 
          If true, it will ignore fileNames in body and localize all files instead.
        required: false
        schema:
          type: boolean
          default: false
      requestBody:
        description: Localization request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RuntimeLocalizeRequest'
        required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RuntimeLocalizeResponse'
        404:
          description: Runtime or Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: body
  /v1/workspaces/{workspaceNamespace}/apps:
    get:
      tags:
      - apps
      summary: List user apps in workspace
      description: List user apps the caller has access to, in given workspaces
      operationId: listAppsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of user apps
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListAppsResponse'
        404:
          description: No user app exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
      - apps
      summary: Create a user app in this workspace.
      description: "Creates a new user app for the current user in the given workspace.\
        \ If a user app already \nexists for the user in this billing project, a 409\
        \ conflict error is returned (even if the \napp is still initializing or is\
        \ not in a ready state).\n"
      operationId: createApp
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      requestBody:
        description: User App definition
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateAppRequest'
        required: true
      responses:
        200:
          description: User App was created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: The specified workspace was not found.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: A user app for this user and workspace already exists.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: app
  /v1/workspaces/{workspaceNamespace}/apps/{appName}:
    delete:
      tags:
      - apps
      summary: Delete a workspace user app.
      operationId: deleteApp
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: appName
        in: path
        description: The name of the user app.
        required: true
        schema:
          type: string
      - name: deleteDisk
        in: query
        description: Whether or not the disk should be deleted if the user app is
          using a persistent disk. Default to false if not specified
        schema:
          type: boolean
          default: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: No user app exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - apps
      summary: Updates the configuration of a user app
      description: In order to update the configuration of a user app, it must first
        be running or paused
      operationId: updateApp
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: appName
        in: path
        description: The name of the user app.
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UserAppEnvironment'
        required: false
      responses:
        202:
          description: User App update request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        412:
          description: Compute is temporarily suspended for security reasons.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: app
  /v1/workspaces/{workspaceNamespace}/apps/{appName}/localize:
    post:
      tags:
      - apps
      summary: Localize files to the user's GKE App.
      description: Localize files to the user's GKE App.
      operationId: localizeApp
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: appName
        in: path
        description: The name of the user app.
        required: true
        schema:
          type: string
      - in: query
        name: localizeAllFiles
        description: |
          Optional query that will localize all files associate with this app. 
          If true, it will ignore fileNames in body and localize all files instead.
        required: false
        schema:
          type: boolean
          default: false
      requestBody:
        description: Localization request.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AppLocalizeRequest'
        required: false
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AppLocalizeResponse'
      x-codegen-request-body-name: body
  /v1/workspaces/{workspaceNamespace}/disks:
    get:
      tags:
      - disks
      summary: Lists persistent disks in the user's workspace. Only disks in READY/CREATING/RESTORING
        state will be returned.
      operationId: listOwnedDisksInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: The persistent disk for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDisksResponse'
        404:
          description: No persistent disk exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/workspaces/{workspaceNamespace}/disks/{diskName}:
    delete:
      tags:
      - disks
      summary: Delete a persistent disk.
      description: Delete a persistent disk by name.
      operationId: deleteDisk
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: diskName
        in: path
        description: diskName
        required: true
        schema:
          type: string
      responses:
        200:
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: No persistent disk exists for this user and workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    patch:
      tags:
      - disks
      summary: Updates the configuration of a persistent disk
      description: In order to update the configuration of a persistent disk, it must
        first be ready
      operationId: updateDisk
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: diskName
        in: path
        description: diskName
        required: true
        schema:
          type: string
      - name: diskSize
        in: query
        description: Update disk disk Size
        required: true
        schema:
          type: integer
      responses:
        200:
          description: Persistent disk update request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/workspaces:
    get:
      tags:
      - workspaces
      description: Returns all workspaces that a user has access to
      operationId: getWorkspaces
      responses:
        200:
          description: A list of workspace definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponseListResponse'
    post:
      tags:
      - workspaces
      description: Creates a workspace
      operationId: createWorkspace
      requestBody:
        description: workspace definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: false
      responses:
        200:
          description: The workspace that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      x-codegen-request-body-name: workspace
  /v1/workspaces/createAsync:
    post:
      tags:
      - workspaces
      description: Creates a workspace asynchronously
      operationId: createWorkspaceAsync
      requestBody:
        description: workspace definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Workspace'
        required: false
      responses:
        200:
          description: The workspace has been scheduled for creation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceOperation'
      x-codegen-request-body-name: workspace
  /v1/workspaces/operations/{id}:
    get:
      tags:
      - workspaces
      description: Returns a workspace operation, only accessible to the creator of
        the operation.
      operationId: getWorkspaceOperation
      parameters:
      - name: id
        in: path
        description: The workspace operation ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The asynchronous workspace operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceOperation'
  /v1/workspaces/featuredWorkspacesByCategory:
    get:
      tags:
        - Featured Workspace
      description: Fetches a list of published workspaces filtered by a specified category
      operationId: getFeaturedWorkspacesByCategory
      parameters:
        - name: category
          in: query
          description: The category of the featured workspace
          required: true
          schema:
            type: string
      responses:
        200:
          description: A list of workspace definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponseListResponse'
        400:
          description: Invalid category provided in the request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/workspaces/featured:
    get:
      tags:
        - Featured Workspace
      description: Returns a list of featured workspaces
      operationId: getFeaturedWorkspaces
      responses:
        200:
          description: A list of featured workspace entity objects including their featured
           workspace categories.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponseListResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/isNotebookTransferComplete:
    get:
      tags:
      - workspaces
      description: Checks if the notebooks have been copied to the workspace
      operationId: notebookTransferComplete
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
           due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: Returns true if the notebooks have been copied to the workspace
          content:
            application/json:
              schema:
                type: boolean
  /v1/workspaces/access/{workspaceNamespace}:
    get:
      tags:
      - workspaces
      description: Returns the WorkspaceAccessLevel Enum as String for  workspace
        namespace
      operationId: getWorkspaceAccess
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: A workspace access level string
          content:
            application/json:
              schema:
                type: string
        403:
          description: Forbidden
          content: {}
  /v1/workspaces/{workspaceNamespace}/{terraName}:
    get:
      tags:
      - workspaces
      description: Returns the workspace definition with the specified ID and namespace
      operationId: getWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
           due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A workspace response containing workspace and access level
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResponse'
        403:
          description: User doesnt have access to the workspace's access tier
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    delete:
      tags:
      - workspaces
      description: Deletes the workspace definition with the specified ID and namespace
      operationId: deleteWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        202:
          description: Workspace deletion request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
      - workspaces
      description: Modifies the workspace definition with the specified ID and namespace;
        fields that are omitted will not be modified
      operationId: updateWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: workspace definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateWorkspaceRequest'
        required: false
      responses:
        200:
          description: The updated workspace definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Workspace'
      x-codegen-request-body-name: workspace
  /v2/workspaces/{workspaceNamespace}/{terraName}/resources:
    get:
      tags:
      - workspaces
      description: Gets a user defined selection of objects contained within a workspace
      operationId: getWorkspaceResourcesV2
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: resourceTypesToFetch
        in: query
        description: Types of workspace resources to fetch. Currently only supports
          Cohorts, Cohort Reviews, Concept Sets, and Datasets
        style: form
        explode: false
        schema:
          type: array
          items:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResourceResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/billing-usage:
    get:
      tags:
      - workspaces
      description: Gets the free tier billing spend for a specified workspace
      operationId: getBillingUsage
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: The billing usage for a workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceBillingUsageResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/creator-free-credits-remaining:
    get:
      tags:
      - workspaces
      description: Gets the free credits remaining for the creator of a specified
        workspace
      operationId: getWorkspaceCreatorFreeCreditsRemaining
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: The free credits remaining for the creator of a workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceCreatorFreeCreditsRemainingResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/share:
    patch:
      tags:
      - workspaces
      description: Shares/unshares a workspace with the given users and permissions.
        Use the WorkspaceAccessLevel enum value "NO ACCESS" to unshare.  All existing
        users and roles who are not specified in this request are not affected.
      operationId: shareWorkspacePatch
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: users to share/unshare the workspace with
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ShareWorkspaceRequest'
        required: false
      responses:
        200:
          description: Successful share response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserRolesResponse'
      x-codegen-request-body-name: body
  /v1/workspaces/{workspaceNamespace}/{terraName}/duplicate:
    post:
      tags:
      - workspaces
      description: |
        Duplicate an existing workspace, with given modifications to workspace metadata. Caller will own the newly duplicated workspace, and must have read access to the source workspace. In addition to workspace metadata, the following will also be duplicated:
          - the associated Firecloud workspace
          - cohorts, along with reviews and annotations
          - notebooks located in the default notebook directory for this workspace
      operationId: cloneWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneWorkspaceRequest'
        required: false
      responses:
        200:
          description: Successful duplicate response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloneWorkspaceResponse'
      x-codegen-request-body-name: body
  /v1/workspaces/{workspaceNamespace}/{terraName}/duplicateAsync:
    post:
      tags:
      - workspaces
      description: |
        Asynchronously duplicate an existing workspace. Semantics otherwise match cloneWorkspace.
      operationId: duplicateWorkspaceAsync
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CloneWorkspaceRequest'
        required: false
      responses:
        200:
          description: Successful duplicate response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceOperation'
      x-codegen-request-body-name: body
  /v1/workspaces/{workspaceNamespace}/{terraName}/userRoles:
    get:
      tags:
      - workspaces
      description: Returns the user roles for all collaborators on a workspace
      operationId: getFirecloudWorkspaceUserRoles
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A list of workspace collaborators
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceUserRolesResponse'
  /v1/workspaces/{workspaceNamespace}/publishCommunityWorkspace:
    post:
      tags:
        - workspaces
      description: Publishes a workspace as Community Workspace by Owner
      operationId: publishCommunityWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: Successfully published the workspace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: Workspace is already published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        403:
          description: User cannot publish the workspace because they are not the owner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/workspaces/{workspaceNamespace}/publish:
    post:
      tags:
        - workspaceAdmin
      description: Publish the workspace so it features in the Featured Workspaces tab under requested 
        category.  Requires RESEARCHER_DATA_VIEW authority.
      operationId: publishWorkspaceViaDB
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      requestBody:
        description: The admin request to publish workspace
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PublishWorkspaceRequest'
      responses:
        200:
          description: Workspace has been published
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    delete:
      tags:
        - workspaceAdmin
      description: Unpublish a workspace removing it from Featured Workspaces tab. Requires
        RESEARCHER_DATA_VIEW authority.
      operationId: unpublishWorkspaceViaDB
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: Workspace has been unpublished
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/admin/workspaces/{workspaceNamespace}/audit:
    get:
      tags:
      - workspaceAdmin
      description: |
        Fetch audit logs involving this workspace as either a subject or object. Requires the RESEARCHER_DATA_VIEW authority.
      operationId: getWorkspaceAuditLogEntries
      parameters:
      - name: workspaceNamespace
        in: path
        description: |
          Firecloud Namespace for the AoU workspace to be queried.
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: |
          Maximum number of entries to return, sorted by timestamp descending.
        schema:
          type: integer
          default: 100
      - name: after
        in: query
        description: |
          Earliest time matched by the query (inclusive). Epoch millis.
          Note that while Swagger allows a date-time formatted string query parameter, it appears Spring doesn't handle that well today. It gives the error message described at https://github.com/swagger-api/swagger-codegen/issues/4113.
        schema:
          type: integer
          format: int64
          default: 0
      - name: before
        in: query
        description: |
          Upper bound on timestamp of most recent result (exclusive). Specified as milliseconds since Epoch (though declared as a string). Defaults to current timestamp.
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: |
            List of rows matching the query result. queryMetadata contains the workspaceDatabaaseId (for post-processing) as well as the query actually executed (as a starting point for exploring manually in BigQuery).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceAuditLogQueryResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebook-list:
    get:
      tags:
      - notebooks
      summary: Get details of Python files from google Bucket directory notebook
      description: Returns list of name and path of python files from google bucket,
        directory notebook.
      operationId: getNoteBookList
      parameters:
      - name: workspaceNamespace
        in: path
        description: workspaceNamespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of files
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDetail'
        404:
          description: Workspace not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/unsafe-self-bypass-access-requirements:
    post:
      tags:
      - userAdmin
      description: Updates the given user to bypass all access requirements
      operationId: unsafeSelfBypassAccessRequirements
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        403:
          description: Self bypass is disallowed in this environment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/users/{usernameWithoutGsuiteDomain}/audit:
    get:
      tags:
      - userAdmin
      description: |
        Fetch audit logs involving this user as either a subject or object. Requires the RESEARCHER_DATA_VIEW authority.
      operationId: getUserAuditLogEntries
      parameters:
      - name: usernameWithoutGsuiteDomain
        in: path
        description: |
          Username of user, not including the environment-specific domain, e.g. "@fake-research-aou.org".
        required: true
        schema:
          type: string
      - name: limit
        in: query
        description: |
          Maximum number of entries to return, sorted by timestamp descending. This entry count also determines (in a less predictable way) how many bundled actions are in the response.
        schema:
          type: integer
          default: 100
      - name: after
        in: query
        description: |
          Earliest time matched by the query (inclusive). Epoch millis.
          Note that while Swagger allows a date-time formatted string query parameter, it appears Spring doesn't handle that well today. It gives the error message described at https://github.com/swagger-api/swagger-codegen/issues/4113.
        schema:
          type: integer
          format: int64
          default: 0
      - name: before
        in: query
        description: |
          Upper bound on timestamp of most recent result (exclusive). Specified as milliseconds since Epoch (though declared as a string). Defaults to current timestamp.
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: |
            List of rows matching the query result. queryMetadata contains the workspaceDatabaaseId (for post-processing) as well as the query actually executed (as a starting point for exploring manually in BigQuery).
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserAuditLogQueryResponse'
  /v1/admin/users/updateAccount:
    post:
      tags:
      - userAdmin
      description: Updates a subset of a user's account metadata, as defined by the
        AccountPropertyUpdate object.  Requires ACCESS_CONTROL_ADMIN authority.
      operationId: updateAccountProperties
      requestBody:
        description: The admin edit request to perform on a user
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccountPropertyUpdate'
        required: false
      responses:
        200:
          description: The user's updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        404:
          description: User associated with request could not be found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: request
  /v1/admin/users/getUserByUsername:
    get:
      tags:
      - userAdmin
      description: Returns a user's profile for review. Requires ACCESS_CONTROL_ADMIN
        authority.
      operationId: getUserByUsername
      parameters:
      - name: username
        in: query
        required: true
        schema:
          type: string
      responses:
        200:
          description: A user's profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Profile'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/users/list:
    get:
      tags:
      - userAdmin
      description: Returns a list of profiles for users to be reviewed. Requires ACCESS_CONTROL_ADMIN
        authority.
      operationId: getAllUsers
      responses:
        200:
          description: A list of users
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminUserListResponse'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/users/batchSyncAccess:
    post:
      tags:
      - userAdmin
      description: Batch sync user access modules, asynchronously. This is a work
        around until SAM supports batch update. See https://broadworkbench.atlassian.net/browse/CA-1504
      operationId: batchSyncAccess
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchSyncAccessRequest'
        required: false
      responses:
        200:
          description: The user's updated profile
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchSyncAccessResponse'
        403:
          description: User doesn't have the ACCESS_CONTROL_ADMIN authority
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: request
  /v1/admin/workspaces/{workspaceNamespace}/locked:
    post:
      tags:
      - workspaceAdmin
      description: Set admin locked state for the workspace
      operationId: setAdminLockedState
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AdminLockingRequest'
        required: true
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/workspaces/{workspaceNamespace}/unlocked:
    post:
      tags:
      - workspaceAdmin
      description: Set admin unlocked state for the workspace
      operationId: setAdminUnlockedState
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/admin/workspaces/{workspaceNamespace}:
    get:
      tags:
      - workspaceAdmin
      description: Given a workspace namespace (Google Cloud Platform  Project ID),
        returns workspace details. Requires the RESEARCHER_DATA_VIEW authority.
      operationId: getWorkspaceAdminView
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: Federated details about the workspace.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceAdminView'
        404:
          description: Workspace not found for namespace
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/admin/workspaces/{workspaceNamespace}/cloudStorageTraffic:
    get:
      tags:
      - workspaceAdmin
      description: Returns a time series of cloud storage traffic for the given project.
        Requires the RESEARCHER_DATA_VIEW authority.
      operationId: getCloudStorageTraffic
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CloudStorageTraffic'
  /v1/admin/workspaces/{workspaceNamespace}/notebooks/{notebookName}/readonly:
    post:
      tags:
      - workspaceAdmin
      description: Get the HTML for a read only view of the notebook. RESEARCHER_DATA_VIEW
        authority required.
      operationId: adminReadOnlyNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: notebookName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AccessReason'
        required: true
      responses:
        200:
          description: HTML Read Only version of the notebook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyNotebookResponse'
      x-codegen-request-body-name: accessReason
  /v1/admin/workspaces/{workspaceNamespace}/files:
    get:
      tags:
      - workspaceAdmin
      description: |
        Get a list of files corresponding to the storage objects associated with the Workspace. RESEARCHER_DATA_VIEW authority required.
      operationId: listFiles
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: onlyAppFiles
        in: query
        schema:
          type: boolean
      responses:
        200:
          description: List of files in this Workspace's storage bucket
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FileDetail'
  /v1/admin/security/workspaces/{workspaceNamespace}/runtimes/{runtimeName}:
    delete:
      tags:
        - workspaceAdmin
      summary: Delete the specified runtime in the given workspace namespace.
      description: An admin gated endpoint that deletes the given runtime in a given workspace.
      operationId: adminDeleteRuntime
      parameters:
        - name: workspaceNamespace
          in: path
          description: The namespace of the workspace.
          required: true
          schema:
            type: string
        - name: runtimeName
          in: path
          description: The name of the runtime to delete.
          required: true
          schema:
            type: string
      responses:
        200:
          description: Runtime deleted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AdminRuntimeFields'
        404:
          description: Runtime not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: runtimesToDelete
  /v1/admin/workspaces/{workspaceNamespace}/listRuntimes:
    get:
      tags:
        - workspaceAdmin
      description: Get a list of runtimes in this Workspace. RESEARCHER_DATA_VIEW authority required.
      operationId: adminListRuntimes
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of runtimes in this Workspace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AdminRuntimeFields'
  /v1/admin/workspaces/{workspaceNamespace}/userApps:
    get:
      tags:
        - workspaceAdmin
      description: Get a list of user apps in this Workspace. RESEARCHER_DATA_VIEW authority required.
      operationId: adminListUserAppsInWorkspace
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
      responses:
        200:
          description: List of user apps in this Workspace
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserAppEnvironment'
  /v1/admin/egressEvents:
    post:
      tags:
      - egressEventsAdmin
      description: |
        Administrative API to receive a paginated list of egress events. Optionally filtered by different criteria.
      operationId: listEgressEvents
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ListEgressEventsRequest'
        required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEgressEventsResponse'
      x-codegen-request-body-name: request
  /v1/admin/egressEvents/{id}:
    patch:
      tags:
      - egressEventsAdmin
      description: |
        Administrative API to update an egress event. Currently, only the following fields can be updated - all other fields are ignored:
          - status (REMEDIATED or VERIFIED_FALSE_POSITIVE)
      operationId: updateEgressEvent
      parameters:
      - name: id
        in: path
        description: The egress event ID
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/UpdateEgressEventRequest'
        required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EgressEvent'
      x-codegen-request-body-name: request
  /v1/admin/egressEvents/{id}/audit:
    post:
      tags:
      - egressEventsAdmin
      description: |
        Administrative API to get audit details for an egress event.
      operationId: auditEgressEvent
      parameters:
      - name: id
        in: path
        description: The egress event ID
        required: true
        schema:
          type: string
      requestBody:
        description: Empty request object included for future extension.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/AuditEgressEventRequest'
        required: false
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuditEgressEventResponse'
      x-codegen-request-body-name: request
  /v1/admin/sumo/egressEvent:
    post:
      tags:
      - sumoLogic
      description: Registers an egress event detected by SumoLogic with the Workbench.
        Forwards the event to Stackdriver for recording and potential alerting.
      operationId: logEgressEvent
      security: []
      parameters:
      - name: X-API-KEY
        in: header
        description: Semi-secret API key sent by SumoLogic. This will be checked against
          the set of valid API keys stored in the per-environment credentials bucket.
        required: true
        schema:
          type: string
      requestBody:
        description: Egress event request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/SumologicEgressEventRequest'
        required: false
      responses:
        204:
          description: The egress event was successfully handled.
          content: {}
      x-codegen-request-body-name: request
  /v1/admin/users/{userId}/egressBypassWindow:
    get:
      tags:
      - userAdmin
      description: |
        List all of the user's egress bypass windows.  Requires SECURITY_ADMIN authority
      operationId: listEgressBypassWindows
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListEgressBypassWindowResponse'
    post:
      tags:
      - userAdmin
      description: |
        Administrative API to add egress bypass window to allow user download files without  triggering egress alerts. Require SECURITY_ADMIN authority
      operationId: createEgressBypassWindow
      parameters:
      - name: userId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateEgressBypassWindowRequest'
        required: false
      responses:
        204:
          description: success
          content: {}
      x-codegen-request-body-name: request
  /v1/cron/deleteOldRuntimes:
    get:
      tags:
      - offlineEnvironments
      - cron
      description: Endpoint meant to be called offline to trigger runtime checks and
        cleanup. Enforces upgrade by deletion and re-creation for older runtime deployments.
        May be slow to execute. Only executable via App Engine cronjob.
      operationId: deleteOldRuntimes
      security: []
      responses:
        204:
          description: Runtimes were checked and handled successfully.
          content: {}
  /v1/cron/checkPersistentDisks:
    get:
      tags:
      - offlineEnvironments
      - cron
      description: 'Endpoint meant to be called offline to check for old / detached
        persistent disks. Notifies workspace owners at configurable intervals about
        old disks. Only executable via App Engine cronjob. Note: rerunning this out
        of band may result in the sending of duplicate emails.'
      operationId: checkPersistentDisks
      security: []
      responses:
        204:
          description: Disks were queued for idleness checking.
          content: {}
  /v1/cron/deleteUnsharedWorkspaceEnvironments:
    get:
      tags:
        - offlineEnvironments
        - cron
      description: 'Endpoint meant to be called offline to delete Runtimes, Apps, and Disks for
        users who have been removed from workspaces. Only executable via App Engine cronjob.'
      operationId: deleteUnsharedWorkspaceEnvironments
      security: []
      responses:
        204:
          description: Environments and Disks were deleted successfully, where appropriate.
          content: {}
  /v1/cron/bulkAuditProjectAccess:
    get:
      tags:
      - offlineUser
      - cron
      description: Audits project access for all users
      operationId: bulkAuditProjectAccess
      security: []
      responses:
        204:
          description: All users' project access were audited.
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/exportToRdr:
    get:
      tags:
      - offlineRdrExport
      - cron
      description: Send workbench data to RDR
      operationId: exportData
      security: []
      responses:
        204:
          description: All modified/created workspaces and users were exported
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/checkInitialCreditsUsage:
    get:
      tags:
        - offlineBilling
        - cron
      description: Find and alert users that have exceeded their initial credits usage limit.
      operationId: checkInitialCreditsUsage
      security: [ ]
      responses:
        204:
          description: No Error
          content: { }
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/synchronizeUserAccess:
    get:
      tags:
      - offlineUser
      - cron
      description: |
        This cron job ensures that cloud tasks are created to support /v1/cloudTask/synchronizeUserAccess.
      operationId: synchronizeUserAccess
      security: []
      responses:
        204:
          description: No Error
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/sendAccessExpirationEmails:
    get:
      tags:
      - offlineUser
      - cron
      description: Check each user daily for access expiration (or approaching expiration)
        and send expiration or warning emails as appropriate.
      operationId: sendAccessExpirationEmails
      security: []
      responses:
        204:
          description: No Error
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/uploadReportingSnapshot:
    get:
      tags:
      - offlineReporting
      - cron
      description: |
        Capture a reporting snapshot and begin the upload task to BigQuery reporting dataset.
      operationId: uploadReportingSnapshot
      security: []
      responses:
        204:
          description: No content
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cron/checkPendingEgressEvents:
    get:
      tags:
      - offlineEgress
      - cron
      description: Endpoint meant to be called offline to trigger re-enqueueing of
        any pending egress events. Only executable via App Engine cronjob.
      operationId: checkPendingEgressEvents
      security: []
      responses:
        204:
          description: No content.
          content: {}
  /v1/cron/checkObjectNameSize:
    get:
      tags:
      - offlineObjectNameSize
      - cron
      operationId: checkObjectNameSize
      security: []
      responses:
        204:
          description: No content.
          content: {}
  /v1/cron/ensureTestUserTosCompliance:
    get:
      tags:
      - offlineTestUsers
      - cron
      description: Keep test users' TOS compliance statuses in the appropriate states
      operationId: ensureTestUserTosCompliance
      security: []
      responses:
        204:
          description: No content.
          content: {}
  /v1/cron/emailNewUserSatisfactionSurveyLinks:
    get:
      tags:
      - offlineNewUserSatisfactionSurvey
      - cron
      description: Email newly eligible users a link to take the new user satisfaction
        survey.
      operationId: emailNewUserSatisfactionSurveyLinks
      security: []
      responses:
        204:
          description: No content.
          content: {}
  /v1/cron/deleteTestUserWorkspaces:
    get:
      tags:
      - offlineTestUsers
      - cron
      description: Delete all test users' workspaces
      operationId: deleteAllTestUserWorkspaces
      security: []
      responses:
        204:
          description: No content.
          content: {}
  /v1/cron/deleteTestUserWorkspacesOrphanedInRawls:
    get:
      tags:
      - offlineTestUsers
      - cron
      description: Delete all test users' workspaces from Rawls
      operationId: deleteAllTestUserWorkspacesOrphanedInRawls
      security: []
      responses:
        204:
          description: No content.
          content: {}
  /v1/cron/checkInitialCreditsExpiration:
    get:
      tags:
      - offlineUser
      - cron
      description: Updates users if their initial credits have recently expired
      operationId: checkInitialCreditsExpiration
      security: []
      responses:
        204:
          description: No content.
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebooks/{notebookName}/readonly:
    post:
      tags:
      - notebooks
      description: Get the HTML for a read only view of the notebook
      operationId: readOnlyNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: notebookName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: HTML Read Only version of the notebook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyNotebookResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebooks/rename:
    post:
      tags:
      - notebooks
      description: Renames specified notebook
      operationId: renameNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: new name for notebook
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NotebookRename'
        required: true
      responses:
        200:
          description: Successful rename
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebooks/{notebookName}/duplicate:
    post:
      tags:
      - notebooks
      description: Duplicates specified notebook
      operationId: cloneNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: notebookName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful duplicate
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebooks/{notebookName}/copy:
    post:
      tags:
      - notebooks
      description: Copy specified notebook in path to specified workspace in body
      operationId: copyNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: notebookName
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CopyRequest'
        required: true
      responses:
        200:
          description: Successful copy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FileDetail'
      x-codegen-request-body-name: copyNotebookRequest
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebooks/{notebookName}/kernel:
    get:
      tags:
      - notebooks
      description: Get Kernel Type of notebook
      operationId: getNotebookKernel
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: notebookName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Kernel Type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/KernelTypeResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebooks/{notebookName}/delete:
    delete:
      tags:
      - notebooks
      description: Deletes specified notebook
      operationId: deleteNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: notebookName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successful delete
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/notebooks/{notebookName}/lockingMetadata:
    get:
      tags:
      - notebooks
      summary: Get the locking metadata for a notebook
      description: |
        Get the locking metadata for a notebook, if available.  If the notebook is not locked
        (e.g. at first creation) this may be empty.  Additionally, the caller of this endpoint
        may not have the appropriate permissions to determine who is locking this notebook.
        When this is the case, the lastLockedBy field is set to UNKNOWN.
      operationId: getNotebookLockingMetadata
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: notebookName
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: The locking metadata fields for the notebook
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NotebookLockingMetadataResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/cohort-reviews:
    get:
      tags:
      - cohortReview
      description: Returns all cohort reviews in a workspace
      operationId: getCohortReviewsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A list of cohort definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReviewListResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/cohort-reviews/{id}:
    get:
      tags:
      - cohortReview
      description: Returns all cohort reviews per cohortId
      operationId: getCohortReviewsByCohortId
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: cohort primary key
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A list of cohort reviews.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReviewListResponse'
    delete:
      tags:
      - cohortReview
      description: Deletes the cohort review with the specified ID
      operationId: deleteCohortReview
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: specifies which cohort review
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
      - cohortReview
      description: Modifies the cohort review with the specified ID; fields that are
        omitted will not be modified
      operationId: updateCohortReview
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: specifies which cohort review
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: cohort review
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortReview'
        required: false
      responses:
        200:
          description: The updated cohort review
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      x-codegen-request-body-name: cohortReview
  /v1/workspaces/{workspaceNamespace}/{terraName}/cohorts:
    get:
      tags:
      - cohorts
      description: Returns all cohort definitions in a workspace
      operationId: getCohortsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A list of cohort definitions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortListResponse'
    post:
      tags:
      - cohorts
      description: Creates a cohort definition in a workspace.
      operationId: createCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: cohort definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
        required: false
      responses:
        200:
          description: The cohort definition that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          description: Bad Request. Cohort name already exists
          content: {}
      x-codegen-request-body-name: cohort
  /v1/workspaces/{workspaceNamespace}/{terraName}/cohorts/duplicate:
    post:
      tags:
      - cohorts
      description: Creates a duplicate of the cohort specified by cohortId
      operationId: duplicateCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: Duplicate Cohort Request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DuplicateCohortRequest'
        required: false
      responses:
        200:
          description: The cohort definition that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        400:
          description: Bad Request. Cohort name already exists
          content: {}
      x-codegen-request-body-name: DuplicateCohortRequest
  /v1/workspaces/{workspaceNamespace}/{terraName}/cohorts/{cohortId}:
    get:
      tags:
      - cohorts
      description: Returns the cohort definition with the specified ID
      operationId: getCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A cohort definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
    delete:
      tags:
      - cohorts
      description: Deletes the cohort definition with the specified ID
      operationId: deleteCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
      - cohorts
      description: Modifies the cohort definition with the specified ID; fields that
        are omitted will not be modified
      operationId: updateCohort
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: cohort definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cohort'
        required: false
      responses:
        200:
          description: The updated cohort definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
      x-codegen-request-body-name: cohort
  /v1/workspaces/user-recent-resources:
    get:
      tags:
      - userMetrics
      description: Returns the resources accessed by user order by access time desc
      operationId: getUserRecentResources
      responses:
        200:
          description: A list of resources order by last access time desc order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResourceResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/user-recent-resources/update:
    post:
      tags:
      - userMetrics
      description: Add/update user recent resource
      operationId: updateRecentResource
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: request object for updating recent resource
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RecentResourceRequest'
        required: true
      responses:
        200:
          description: Successfully added/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WorkspaceResource'
      x-aou-note: |
        this response type is currently only ever used by Notebooks because other
        resources are stored in our db, and therefore cache ops are
        done for them in the backend
      x-codegen-request-body-name: RecentResourceRequest
  /v1/workspaces/user-recent-workspaces:
    get:
      tags:
      - workspaces
      description: Returns the workspaces edited by the user in descending order of
        update time
      operationId: getUserRecentWorkspaces
      responses:
        200:
          description: A list of workspaces order by last-updated time in descending
            order
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentWorkspaceResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/user-recent-workspaces/update:
    post:
      tags:
      - workspaces
      description: Add/update user recent workspaces
      operationId: updateRecentWorkspaces
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: Successfully added/updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RecentWorkspaceResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/concept-sets:
    get:
      tags:
      - conceptSets
      description: Returns all concept sets in a workspace
      operationId: getConceptSetsInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A list of concept sets.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSetListResponse'
    post:
      tags:
      - conceptSets
      description: Creates a concept set in a workspace.
      operationId: createConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: create concept set request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateConceptSetRequest'
        required: false
      responses:
        200:
          description: The concept set that was created.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/concept-sets/{conceptSetId}:
    get:
      tags:
      - conceptSets
      description: Returns the concept set definition with the specified ID
      operationId: getConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A concept set definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
    delete:
      tags:
      - conceptSets
      description: Deletes the concept set with the specified ID
      operationId: deleteConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
      - conceptSets
      description: Modifies the name or description of the concept set with the specified
        ID; fields that are omitted will not be modified
      operationId: updateConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: concept set definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConceptSet'
        required: false
      responses:
        200:
          description: The updated concept set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: conceptSet
  /v1/workspaces/{workspaceNamespace}/{terraName}/concept-sets/{conceptSetId}/concept-count:
    get:
      tags:
      - conceptSets
      description: The number of concepts in this concept-set.
      operationId: countConceptsInConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A count of concepts
          content:
            application/json:
              schema:
                type: integer
  /v1/workspaces/{workspaceNamespace}/{terraName}/concept-sets/{conceptSetId}/concepts:
    post:
      tags:
      - conceptSets
      description: Adds or removes concepts from the concept set.
      operationId: updateConceptSetConcepts
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptSetId
        in: path
        description: Concept set ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: update concept set request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateConceptSetRequest'
        required: false
      responses:
        200:
          description: The updated concept set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/concept-sets/{conceptSetId}/copy:
    post:
      tags:
      - conceptSets
      description: Copy specified concept set in path to specified workspace in body
      operationId: copyConceptSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptSetId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CopyRequest'
        required: true
      responses:
        200:
          description: Successful copy
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ConceptSet'
      x-codegen-request-body-name: copyConceptSetRequest
  /v1/workspaces/{workspaceNamespace}/{terraName}/data-sets:
    post:
      tags:
      - dataSet
      description: Creates Data Set
      operationId: createDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: true
      responses:
        200:
          description: Data set has been created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        400:
          description: Invalid data set request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: Data Set with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: dataSetRequest
  /v1/{workspaceNamespace}/{terraName}/data-sets/{dataSetId}:
    get:
      tags:
      - dataSet
      operationId: getDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: dataSetId
        in: path
        description: Data set ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The data set with the specified ID
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
    delete:
      tags:
      - dataSet
      description: Deletes the data set with the specified ID
      operationId: deleteDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: dataSetId
        in: path
        description: Data set ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ACCEPTED
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
    patch:
      tags:
      - dataSet
      operationId: updateDataSet
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: dataSetId
        in: path
        description: Data set ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: data set definition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DataSetRequest'
        required: false
      responses:
        200:
          description: The updated data set.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        404:
          description: Data set to update does not exist.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSet'
        409:
          description: Data Set with the same name already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: dataSet
  /v1/{workspaceNamespace}/{terraName}/data-sets/dataSetByResourceId:
    post:
      tags:
      - dataSet
      operationId: getDataSetByResourceId
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: id
        in: query
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ResourceTypeRequest'
        required: true
      responses:
        200:
          description: A list of data sets containg cohort/concept Id passed.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetListResponse'
      x-codegen-request-body-name: ResourceTypeRequest
  /v1/{cdrVersionId}/dataDictionaryEntry/{domain}/{value}:
    get:
      tags:
      - dataSet
      operationId: getDataDictionaryEntry
      parameters:
      - name: cdrVersionId
        in: path
        required: true
        schema:
          type: integer
          format: int64
      - name: domain
        in: path
        required: true
        schema:
          type: string
      - name: value
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: Detailed definition of a given domain value for the specified
            CDR Version
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataDictionaryEntry'
  /v1/{workspaceNamespace}/{terraName}/data-set/markDirty:
    post:
      tags:
      - dataSet
      operationId: markDirty
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/MarkDataSetRequest'
        required: false
      responses:
        200:
          description: Mark all dataset with cohort/concept id as dirty
          content:
            application/json:
              schema:
                type: boolean
                default: false
      x-codegen-request-body-name: markDataSetRequest
  /v1/workspaces/{workspaceNamespace}/{terraName}/genomicExtractionJobs:
    get:
      tags:
      - dataSet
      description: Retrieve Job details for given ID. Requires READER access on the
        workspace.
      operationId: getGenomicExtractionJobs
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: The Terra Job for the extraction workflow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicExtractionJobListResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/datasets/{dataSetId}/extractGenomicData:
    post:
      tags:
      - dataSet
      description: Initiates a Terra Cromwell job to extract genomes of the given
        dataset. Requires WRITER access on the workspace. Workspace CDR must also
        have an associated WGS dataset
      operationId: extractGenomicData
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: dataSetId
        in: path
        description: Data set ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The Terra Job for the extraction workflow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicExtractionJob'
  /v1/workspaces/{workspaceNamespace}/{terraName}/datasets/extractTanagraGenomicData:
    post:
      tags:
      - dataSet
      description: Initiates a Terra Cromwell job to extract genomes of the given
        Tanagra-enabled dataset. Requires WRITER access on the workspace. Workspace
        CDR must also have an associated WGS dataset
      operationId: extractTanagraGenomicData
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/TanagraGenomicDataRequest'
        required: true
      responses:
        200:
          description: The Terra Job for the extraction workflow
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GenomicExtractionJob'
  /v1/workspaces/{workspaceNamespace}/{terraName}/genomicExtractionJobs/{jobId}/abort:
    post:
      tags:
      - dataSet
      description: Aborts a running genome extract job. Requires WRITER access on
        the workspace. Workspace CDR must also have access to a Wgs dataset
      operationId: abortGenomicExtractionJob
      parameters:
      - name: workspaceNamespace
        in: path
        description: workspaceNamespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: jobId
        in: path
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        404:
          description: Submission not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/{workspaceNamespace}/{terraName}/data-set/exportToNotebook:
    post:
      tags:
      - dataSet
      description: Exports a data set query to a notebook
      operationId: exportToNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataSetExportRequest'
        required: true
      responses:
        200:
          description: Data set has been exported correctly
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        400:
          description: Invalid data set request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: dataSetExportRequest
  /v1/{workspaceNamespace}/{terraName}/data-set/exportToNotebook/preview:
    post:
      tags:
      - dataSet
      description: Preview notebook code generation
      operationId: previewExportToNotebook
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/DataSetExportRequest'
        required: true
      responses:
        200:
          description: HTML Read Only version of the the notebook cells to be exported
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ReadOnlyNotebookResponse'
        400:
          description: Invalid data set export request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: dataSetExportRequest
  /v1/workspaces/{workspaceNamespace}/{terraName}/data-set/preview:
    post:
      tags:
      - dataSet
      description: Preview data set
      operationId: previewDataSetByDomain
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        content:
          'application/json':
            schema:
              $ref: '#/components/schemas/DataSetPreviewRequest'
        required: true
      responses:
        200:
          description: A SQL query for each domain in the Data Set
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataSetPreviewResponse'
      x-codegen-request-body-name: dataSetPreviewRequest
  /v1/workspaces/{workspaceNamespace}/{terraName}/data-set/concept-sets/domainValues/{domain}:
    get:
      tags:
      - dataSet
      description: Returns all column names/values for a given domain.
      operationId: getValuesFromDomain
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptSetId
        in: query
        schema:
          type: integer
          format: int64
      - name: domain
        in: path
        required: true
        schema:
          type: string
      responses:
        200:
          description: the values/column names in the domain.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainValuesResponse'
  /v1/cloudTask/exportResearcherData:
    post:
      tags:
      - cloudTaskRdrExport
      - cloudTask
      description: Task handler which handles the request from cloud task queue rdrExportQueue
        to send Researcher data
      operationId: exportResearcherDataBatch
      security: []
      parameters:
      - name: backfill
        in: query
        schema:
          type: boolean
      requestBody:
        description: The IDs of Users to be exported to Rdr.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ArrayOfLong'
        required: true
      responses:
        200:
          description: A SQL query for each domain in the Data Set
          content: {}
      x-codegen-request-body-name: researcherIds
    x-aou-note: |
      Endpoints for task in cloud task queue
      Note: all requests tagged as "cloudTask" must have the header X-AppEngine-QueueName:
      to the queue name, which app engine itself only sets (and overrides internally) when invoking
      cloud task. See
      https://cloud.google.com/tasks/docs/creating-appengine-handlers#reading_app_engine_task_request_headers
      and o.p.w.interceptors.CloudTaskInterceptor which implements the header check.

      Using body parameter ref ArrayOfLong instead of defining array of type long here because of
      bug in swagger version 2.3.0 https://github.com/swagger-api/swagger-codegen/issues/6745.2.2.3
  /v1/cloudTask/exportWorkspaceData:
    post:
      tags:
      - cloudTaskRdrExport
      - cloudTask
      description: Task handler which handles the request from cloud task queue rdrExportQueue
        to send Workspace data
      operationId: exportWorkspaceDataBatch
      security: []
      parameters:
      - name: backfill
        in: query
        schema:
          type: boolean
      requestBody:
        description: The IDs of workspace to be exported to Rdr.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/ArrayOfLong'
        required: true
      responses:
        200:
          description: A SQL query for each domain in the Data Set
          content: {}
      x-codegen-request-body-name: researchIds
  /v1/cloudTask/auditProjectAccess:
    post:
      tags:
      - cloudTaskUser
      - cloudTask
      description: Audits the provided user's access to GCP resources
      operationId: auditProjectAccessBatch
      security: []
      requestBody:
        description: The list of users to audit.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        200:
          description: Audit ran successfully (possibly with audit findings)
          content: {}
      x-codegen-request-body-name: request
  /v1/cloudTask/synchronizeUserAccess:
    post:
      tags:
      - cloudTaskUser
      - cloudTask
      description: |
        Check each user to ensure they still meet compliance guidelines.  If they do not, remove them from access tiers.
      operationId: synchronizeUserAccessBatch
      security: []
      requestBody:
        description: Users to synchronize.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        200:
          description: User synchronization ran successfully
          content: {}
      x-codegen-request-body-name: request
  /v1/cloudTask/processEgressEvent:
    post:
      tags:
      - cloudTaskEgress
      - cloudTask
      description: Processes and remediates the given PENDING egress event
      operationId: processEgressEvent
      security: []
      requestBody:
        description: Event to be processed.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProcessEgressEventRequest'
        required: true
      responses:
        200:
          description: Egress event processed successfully
          content: {}
      x-codegen-request-body-name: request
  /v1/cloudTask/createWorkspace:
    post:
      tags:
      - workspaces
      - cloudTask
      description: |
        Asynchronously creates a workspace. Note: unlike other cloud tasks, this task requires
        passing along the user's auth credential header.
      operationId: processCreateWorkspaceTask
      requestBody:
        description: Workspace creation task to process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateWorkspaceTaskRequest'
        required: true
      responses:
        200:
          description: Workspace created
          content: {}
      x-codegen-request-body-name: request
  /v1/cloudTask/duplicateWorkspace:
    post:
      tags:
      - workspaces
      - cloudTask
      description: |
        Asynchronously duplicates a workspace. Note: unlike other cloud tasks, this task requires 
        passing along the user's auth credential header.
      operationId: processDuplicateWorkspaceTask
      requestBody:
        description: Workspace duplication task to process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DuplicateWorkspaceTaskRequest'
        required: true
      responses:
        200:
          description: Workspace created
          content: {}
      x-codegen-request-body-name: request
  /v1/cloudTask/deleteTestUserWorkspaces:
    post:
      tags:
      - cloudTaskWorkspaces
      - cloudTask
      description: Deletes the requested test user workspaces.
      operationId: deleteTestUserWorkspacesBatch
      security: []
      requestBody:
        description: Batch of workspace deletions to process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTestUserWorkspacesRequest'
        required: true
      responses:
        200:
          description: Workspaces deleted
          content: {}
      x-codegen-request-body-name: request
  /v1/cloudTask/deleteTestUserWorkspacesInRawls:
    post:
      tags:
      - cloudTaskWorkspaces
      - cloudTask
      description: |
        Deletes the requested test user workspaces in Rawls (Terra Workspace service). This may be necessary in case of a mismatch between the RW and Terra views of workspaces
      operationId: deleteTestUserWorkspacesInRawlsBatch
      security: []
      requestBody:
        description: Batch of Rawls workspace deletions to process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/DeleteTestUserRawlsWorkspacesRequest'
        required: true
      responses:
        200:
          description: Workspaces deleted
          content: {}
      x-codegen-request-body-name: request
  /v1/cloudTask/checkInitialCreditsUsage:
    post:
      tags:
        - cloudTaskUser
        - cloudTask
      description: |
        Check whether users have incurred sufficient cost in their workspaces to trigger alerts 
        due to passing thresholds or exceeding limits
      operationId: checkInitialCreditsUsageBatch
      security: [ ]
      requestBody:
        description: A batch of users needs to be checked, and alerts need to be sent regarding 
          the excessive costs incurred in their workspaces.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        200:
          description: Users alerted
          content: { }
      x-codegen-request-body-name: request
  /v1/cloudTask/handleInitialCreditsExhaustion:
    post:
      tags:
        - cloudTaskInitialCreditExhaustion
        - cloudTask
      description: |
        Run the business logic to handle users who have consumed or about to consume their
        initial credits, including disabling their workspaces and sending them notifications.
      operationId: handleInitialCreditsExhaustionBatch
      security: [ ]
      requestBody:
        description: Users that should be alerted about their initial credits use.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ExhaustedInitialCreditsEventRequest'
        required: true
      responses:
        200:
          description: Handle Initial Credits Exhaustion Task Ran Successfully
          content: { }
      x-codegen-request-body-name: request
  /v1/cloudTask/checkCreditsExpirationForUserIDs:
    post:
      tags:
      - cloudTaskUser
      - cloudTask
      description: |
        Run the business logic to handle users whose free credits have expired, including disabling compute, deleting
        cloud environments, and sending them notifications.
      operationId: checkCreditsExpirationForUserIDsBatch
      security: [ ]
      requestBody:
        description: Users that should be alerted about their free credits use.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        200:
          description: Check Credits Expiration For User IDs Task Ran Successfully
          content: { }
      x-codegen-request-body-name: request
  /v1/cloudTask/sendAccessExpirationEmails:
    post:
      tags:
        - cloudTaskUser
        - cloudTask
      description: Check each user daily for access expiration (or approaching expiration)
        and send expiration or warning emails as appropriate.
      operationId: sendAccessExpirationEmailsBatch
      security: []
      requestBody:
        description: Users to check for access expiration.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserIdList'
        required: true
      responses:
        204:
          description: No Error
          content: {}
        500:
          description: Internal Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /v1/cloudTask/deleteUnsharedWorkspaceEnvironments:
    post:
      tags:
        - cloudTaskEnvironments
        - cloudTask
      description: |
        Run the business logic to delete Runtimes, Apps, and Disks for
        users who have been removed from workspaces
      operationId: deleteUnsharedWorkspaceEnvironmentsBatch
      security: [ ]
      requestBody:
        description: Workspaces to check for unshared environments and disks.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WorkspaceNamespaceList'
        required: true
      responses:
        200:
          description: Check Credits Expiration For User IDs Task Ran Successfully
          content: { }
      x-codegen-request-body-name: request
  /v1/cloudTask/checkPersistentDisks:
    post:
      tags:
        - cloudTaskEnvironments
        - cloudTask
      description: 'Checks a batch of persistent disks to determine if they are old / detached. 
        Notifies workspace owners at configurable intervals about old disks.'
      operationId: checkPersistentDisksBatch
      security: [ ]
      requestBody:
        description: Persistent disks to check for idleness.
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Disk'
        required: true
      responses:
        200:
          description: Check Credits Expiration For User IDs Task Ran Successfully
          content: { }
      x-codegen-request-body-name: request
  /v1/cloudTask/createVwbPod:
    post:
      tags:
        - cloudTaskVwb
        - cloudTask
      description: |
        Asynchronously creates a Vwb billing pod.
      operationId: processCreateVwbPodTask
      requestBody:
        description: Vwb Pod creation task to process.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateVwbPodTaskRequest'

        required: true
      responses:
        200:
          description: Vwb Pod created
          content: {}
      x-codegen-request-body-name: request
  /v1/institutions:
    get:
      tags:
      - institution
      description: Gets the list of all Institutions. Requires INSTITUTION_ADMIN authority.
      operationId: getInstitutions
      responses:
        200:
          description: A list of all Institutions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetInstitutionsResponse'
    post:
      tags:
      - institution
      description: Create an Institution. Requires INSTITUTION_ADMIN authority.
      operationId: createInstitution
      requestBody:
        description: The Institution to be created by this operation.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        200:
          description: The Institution created by this operation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
        400:
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
        409:
          description: DataIntegrityViolationException was thrown, possibly due to
            an attempt to create a duplicate Institution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
      x-codegen-request-body-name: institutionToCreate
    x-aou-note: Institution endpoints, for Verified Institutional Affiliation
  /v1/institutions/publicDetails:
    get:
      tags:
      - institution
      description: Gets the public details for the list of all Institutions.
      operationId: getPublicInstitutionDetails
      security: []
      responses:
        200:
          description: A list of all Institutions
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetPublicInstitutionDetailsResponse'
  /v1/institutions/{shortName}:
    get:
      tags:
      - institution
      description: Gets the Institution corresponding to the shortName ID. Requires
        INSTITUTION_ADMIN authority.
      operationId: getInstitution
      parameters:
      - name: shortName
        in: path
        description: A short unique name for the Institution used as an identifier,
          such as "VUMC"
        required: true
        schema:
          type: string
      responses:
        200:
          description: The Institution corresponding to the shortName ID.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
    delete:
      tags:
      - institution
      description: Deletes the Institution corresponding to the shortName ID. Requires
        INSTITUTION_ADMIN authority.
      operationId: deleteInstitution
      parameters:
      - name: shortName
        in: path
        description: A short unique name for the Institution used as an identifier,
          such as "VUMC"
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successful deletion of the Institution corresponding to the
            shortName ID.
          content: {}
        409:
          description: Could not delete the Institution because it has verified affiliations.
          content: {}
    patch:
      tags:
      - institution
      description: Updates an Institution. Requires INSTITUTION_ADMIN authority.
      operationId: updateInstitution
      parameters:
      - name: shortName
        in: path
        description: A short unique name for the Institution used as an identifier,
          such as "VUMC"
        required: true
        schema:
          type: string
      requestBody:
        description: The Institution to update.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/Institution'
        required: true
      responses:
        200:
          description: The updated Institution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Institution'
      x-codegen-request-body-name: institutionToUpdate
  /v1/institutions/{shortName}/checkEmail:
    post:
      tags:
      - institution
      description: Checks whether the given email address is a verified member of
        an institution.
      operationId: checkEmail
      security: []
      parameters:
      - name: shortName
        in: path
        description: The short name / key of the institution to check, e.g. "VUMC"
        required: true
        schema:
          type: string
      requestBody:
        description: Institutional contact email address to check.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CheckEmailRequest'
        required: true
      responses:
        200:
          description: Whether the email is a valid member of the institution.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CheckEmailResponse'
      x-aou-note: This endpoint is publicly-accessible and called by clients during
        user registration.
      x-codegen-request-body-name: contactEmail
  /v1/institutions/instructionsEmail:
    post:
      tags:
      - institution
      description: Sets or updates the Institution-specific user instructions to be
        sent by email after registration. Requires INSTITUTION_ADMIN authority.
      operationId: setInstitutionUserInstructions
      requestBody:
        description: Text to include in an email sent to users for an Institution
          after they are registered.
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/InstitutionUserInstructions'
        required: false
      responses:
        200:
          description: Successfully set or updated the Institution-specific user instructions
            to be sent by email after registration.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/InstitutionUserInstructions'
      x-codegen-request-body-name: userInstructions
  /v1/institutions/instructionsEmail/{shortName}:
    delete:
      tags:
      - institution
      description: Remove the Institution-specific user instructions to be sent by
        email after registration. Requires INSTITUTION_ADMIN authority.
      operationId: deleteInstitutionUserInstructions
      parameters:
      - name: shortName
        in: path
        description: A short unique name for the Institution used as an identifier,
          such as "VUMC"
        required: true
        schema:
          type: string
      responses:
        204:
          description: Successfully removed the Institution-specific user instructions
            to be sent by email after registration.
          content: {}
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortId}:
    post:
      tags:
      - cohortReview
      description: This endpoint will create an cohort review which is a participant
        cohort sample specified by the review size parameter.
      operationId: createCohortReview
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: cohort review creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateReviewRequest'
        required: true
      responses:
        200:
          description: A cohortReviewId and cohort count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReview'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortId}/cohort-count:
    get:
      tags:
      - cohortReview
      description: This endpoint will return the cohort total participant count.
      operationId: cohortParticipantCount
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A cohort total participant count
          content:
            application/json:
              schema:
                type: integer
                format: int64
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortReviewId}/participants:
    post:
      tags:
      - cohortReview
      description: Returns a collection of participants for the specified cohortId.
        This endpoint does pagination based on page, limit, order and column.
      operationId: getParticipantCohortStatuses
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: request body for getting list of ParticipantCohortStatuses.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageFilterRequest'
        required: true
      responses:
        200:
          description: A collection of participants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortReviewWithCountResponse'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortReviewId}/participants/{participantId}:
    get:
      tags:
      - cohortReview
      description: This endpoint will return a ParticipantCohortStatus
      operationId: getParticipantCohortStatus
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: The ParticipantCohortStatus definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortStatus'
    put:
      tags:
      - cohortReview
      description: Modifies the ParticipantCohortStatus status
      operationId: updateParticipantCohortStatus
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Contains the new review status
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModifyCohortStatusRequest'
        required: false
      responses:
        200:
          description: The updated ParticipantCohortStatus definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortStatus'
      x-codegen-request-body-name: cohortStatusRequest
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortReviewId}/participants/{participantId}/charts/{domain}:
    get:
      tags:
      - cohortReview
      description: This endpoint returns ParticipantChartDataListResponse containing
        list of ParticipantChartData objects
      operationId: getParticipantChartData
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      - name: domain
        in: path
        description: specifies which domain the chart data should belong to.
        required: true
        schema:
          type: string
      responses:
        200:
          description: The Participant Chart data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantChartDataListResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortReviewId}/participants/{participantId}/annotations:
    get:
      tags:
      - cohortReview
      description: This endpoint will get a collection of ParticipantCohortAnnotations.
      operationId: getParticipantCohortAnnotations
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of ParticipantCohortAnnotation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortAnnotationListResponse'
    post:
      tags:
      - cohortReview
      description: This endpoint will create a ParticipantCohortAnnotation.
      operationId: createParticipantCohortAnnotation
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: ParticipantCohortAnnotation creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ParticipantCohortAnnotation'
        required: true
      responses:
        200:
          description: A ParticipantCohortAnnotation.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantCohortAnnotation'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortReviewId}/participants/{participantId}/data:
    post:
      tags:
      - cohortReview
      description: Returns a collection of participant data for the specified params
        based off the PageFilterRequest. This endpoint does pagination based on page,
        limit, order and column.
      operationId: getParticipantData
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: request body for getting list of participant data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageFilterRequest'
        required: true
      responses:
        200:
          description: A collection of ParticipantConditions.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDataListResponse'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortReviewId}/participants/{participantId}/count:
    post:
      tags:
      - cohortReview
      description: Returns a count based on page, limit, order, sort column and/or
        filter.
      operationId: getParticipantCount
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: request body for getting list of participant data.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PageFilterRequest'
        required: true
      responses:
        200:
          description: A count of Participants.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDataCountResponse'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/{cohortReviewId}/participants/{participantId}/annotations/{annotationId}:
    put:
        tags:
        - cohortReview
        description: This endpoint will modify a ParticipantCohortAnnotation.
        operationId: updateParticipantCohortAnnotation
        parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: terraName
          in: path
          description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed
           due to confusion with DB IDs, which it is not)
          required: true
          schema:
            type: string
        - name: cohortReviewId
          in: path
          description: Cohort Review ID
          required: true
          schema:
            type: integer
            format: int64
        - name: participantId
          in: path
          description: specifies which participant
          required: true
          schema:
            type: integer
            format: int64
        - name: annotationId
          in: path
          description: specifies which annotation
          required: true
          schema:
            type: integer
            format: int64
        requestBody:
          description: ParticipantCohortAnnotation modification request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModifyParticipantCohortAnnotationRequest'
          required: true
        responses:
          200:
            description: A ParticipantCohortAnnotation.
            content:
              application/json:
                schema:
                  $ref: '#/components/schemas/ParticipantCohortAnnotation'
        x-codegen-request-body-name: request
    delete:
      tags:
      - cohortReview
      description: Deletes the ParticipantCohortAnnotation with the specified ID
      operationId: deleteParticipantCohortAnnotation
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: participantId
        in: path
        description: specifies which participant
        required: true
        schema:
          type: integer
          format: int64
      - name: annotationId
        in: path
        description: specifies which annotation
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: ParticipantCohortAnnotation deletion request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/review/vocabularies:
    get:
      tags:
      - cohortReview
      description: This endpoint will get a collection of OMOP vocabularies per cdrVersionId.
      operationId: getVocabularies
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A collection of OMOP vocabularies.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VocabularyListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/chartinfo/{cohortReviewId}/demo:
    get:
      tags:
      - cohortReview
      description: Searches for demographic info about subjects.
      operationId: findCohortReviewDemoChartInfo
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoChartInfoListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/top/chartinfo/{cohortReviewId}/{domain}:
    get:
      tags:
      - cohortReview
      description: Returns a collection of CohortChartData for UI charting in cohort.
      operationId: getCohortReviewChartData
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortReviewId
        in: path
        description: Cohort Review ID
        required: true
        schema:
          type: integer
          format: int64
      - name: domain
        in: path
        description: represents text domain
        required: true
        schema:
          type: string
      responses:
        200:
          description: A collection of CohortChartData
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortChartDataListResponse'
  /v1/workspaces/{workspaceNamespace}/{terraName}/cohorts/{cohortId}/annotationdefinitions:
    get:
      tags:
      - cohortAnnotationDefinition
      description: Returns a collection of CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinitions
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of CohortAnnotationDefinition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinitionListResponse'
    post:
      tags:
      - cohortAnnotationDefinition
      description: This endpoint will create a CohortAnnotationDefinition.
      operationId: createCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: CohortAnnotationDefinition creation request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationDefinition'
        required: true
      responses:
        200:
          description: A CohortAnnotationDefinition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
      x-codegen-request-body-name: request
  /v1/workspaces/{workspaceNamespace}/{terraName}/cohorts/{cohortId}/annotationdefinitions/{annotationDefinitionId}:
    get:
      tags:
      - cohortAnnotationDefinition
      description: Returns a CohortAnnotationDefinition.
      operationId: getCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      - name: annotationDefinitionId
        in: path
        description: specifies which CohortAnnotationDefinition.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A CohortAnnotationDefinition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
    put:
      tags:
      - cohortAnnotationDefinition
      description: modify the CohortAnnotationDefinition.
      operationId: updateCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      - name: annotationDefinitionId
        in: path
        description: specifies which CohortAnnotationDefinition.
        required: true
        schema:
          type: integer
          format: int64
      requestBody:
        description: Contains the new CohortAnnotationDefinition
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortAnnotationDefinition'
        required: false
      responses:
        200:
          description: The updated CohortAnnotationDefinition definition
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortAnnotationDefinition'
      x-codegen-request-body-name: cohortAnnotationDefinition
    delete:
      tags:
      - cohortAnnotationDefinition
      description: Deletes the CohortAnnotationDefinition with the specified ID
      operationId: deleteCohortAnnotationDefinition
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: cohortId
        in: path
        description: Cohort ID
        required: true
        schema:
          type: integer
          format: int64
      - name: annotationDefinitionId
        in: path
        description: specifies which CohortAnnotationDefinition.
        required: true
        schema:
          type: integer
          format: int64
      responses:
        202:
          description: CohortAnnotationDefinition deletion request accepted
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/menu/{parentId}:
    get:
      tags:
      - cohortBuilder
      description: Returns criteria menu
      operationId: findCriteriaMenu
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: parentId
        in: path
        description: the parent id
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria menu options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaMenuListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/domainCard:
    get:
      tags:
      - cohortBuilder
      description: Returns information on the domains of data in the workspace's CDR
        version along with participant and concept counts
      operationId: findDomainCards
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: information on the domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DomainCardResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/surveymodule:
    get:
      tags:
      - cohortBuilder
      description: Returns survey information in the workspace's CDR version along
        with participant and question count
      operationId: findSurveyModules
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: information about the surveys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveysResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/universalDomainCounts:
    get:
      tags:
      - cohortBuilder
      description: Returns a count of term matches per domain for EHR domains
      operationId: findUniversalDomainCounts
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: term
        in: query
        description: the term to search for
        required: true
        schema:
          type: string
      responses:
        200:
          description: information about counts for EHR domains
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardCountResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/conceptCounts:
    get:
      tags:
      - cohortBuilder
      description: Returns a count of term matches per domain for EHR domains, Physical
        Measurement css, and per survey name for all survey names
      operationId: findConceptCounts
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: term
        in: query
        description: the term to search for
        required: true
        schema:
          type: string
      responses:
        200:
          description: information about counts for EHR domains, physical Measurement
            CSS, and Surveys for all survey names
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CardCountResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/search/term:
    post:
      tags:
      - cohortBuilder
      description: Returns a collection of criteria per search term.
      operationId: findCriteriaByDomain
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: CriteriaSearchRequest body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriteriaSearchRequest'
        required: true
      responses:
        200:
          description: A collection of criteria.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListWithCountResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/{domain}/{conceptId}:
    get:
      tags:
      - cohortBuilder
      description: Returns a collection of criteria per concept id
      operationId: findStandardCriteriaByDomainAndConceptId
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: domain
        in: path
        description: the specific type of domain
        required: true
        schema:
          type: string
      - name: conceptId
        in: path
        description: the concept id to search for
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/{domain}:
    get:
      tags:
      - cohortBuilder
      description: 'Returns a collection of criteria by optional query parameters
        of the following: type, subtype, parentId and/or allChildren'
      operationId: findCriteriaBy
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: domain
        in: path
        description: the specific domain of criteria to get
        required: true
        schema:
          type: string
      - name: type
        in: query
        description: the specific type of criteria to get
        schema:
          type: string
      - name: standard
        in: query
        description: reveals if source or standard
        schema:
          type: boolean
          default: false
      - name: parentId
        in: query
        description: fetch direct children of parentId
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
    post:
      tags:
      - cohortBuilder
      description: Lookup criteria based on domain, standard and conceptId.
      operationId: findCriteriaForCohortEdit
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: domain
        in: path
        description: the specific domain of criteria to get
        required: true
        schema:
          type: string
      requestBody:
        description: Domain with collection of source/standard conceptIdsd.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriteriaRequest'
        required: true
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria:
    post:
      tags:
      - cohortBuilder
      description: Return criteria for matching concept_ids, if no match then return
        criteria for matching concept_codes
      operationId: findCriteriaByConceptIdsOrConceptCodes
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: ConceptsRequest body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ConceptsRequest'
        required: true
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/autocomplete:
    post:
      tags:
      - cohortBuilder
      description: Returns matches on survey / criteria table by code or name
      operationId: findCriteriaAutoComplete
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: CriteriaSearchRequest body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CriteriaSearchRequest'
        required: true
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/drug:
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree matching value
      operationId: findDrugBrandOrIngredientByValue
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: value
        in: query
        description: matches name or code of drug
        required: true
        schema:
          type: string
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/drug/ingredient/{conceptId}:
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: findDrugIngredientByConceptId
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptId
        in: path
        description: conceptId of brand
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/attribute/{conceptId}:
    get:
      tags:
      - cohortBuilder
      description: Returns criteria tree with the specified name
      operationId: findCriteriaAttributeByConceptId
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: conceptId
        in: path
        description: conceptId of brand
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaAttributeListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/survey/attribute/{questionConceptId}:
    get:
      tags:
      - cohortBuilder
      description: Returns SurveyVersion with counts
      operationId: findSurveyVersionByQuestionConceptId
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: questionConceptId
        in: path
        description: questionConceptId of the question
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of SurveyVersion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyVersionListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/survey/attribute/{questionConceptId}/{answerConceptId}:
    get:
      tags:
      - cohortBuilder
      description: Returns SurveyVersion with counts
      operationId: findSurveyVersionByQuestionConceptIdAndAnswerConceptId
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: questionConceptId
        in: path
        description: questionConceptId of the question
        required: true
        schema:
          type: integer
          format: int64
      - name: answerConceptId
        in: path
        description: answerConceptId of the answer
        required: true
        schema:
          type: integer
          format: int64
      responses:
        200:
          description: A collection of SurveyVersion
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SurveyVersionListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/criteria/survey/versions:
    get:
      tags:
      - cohortBuilder
      description: Returns any surveys that are versioned
      operationId: findVersionedSurveys
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A collection of versioned surveys
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CriteriaListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/age/counts:
    get:
      tags:
      - cohortBuilder
      description: Return counts for age type and age
      operationId: findAgeTypeCounts
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A collection age type counts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AgeTypeCountListResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/search:
    post:
      tags:
      - cohortBuilder
      description: Searches for participants based on criteria, criteria specific
        parameters, and modifiers.
      operationId: countParticipants
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: object of parameters by which to perform the search
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortDefinition'
        required: true
      responses:
        200:
          description: A count of subjects
          content:
            application/json:
              schema:
                type: integer
                format: int64
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/chartinfo/{genderSexRaceOrEth}/{age}:
    post:
      tags:
      - cohortBuilder
      description: Searches for demographic info about subjects.
      operationId: findDemoChartInfo
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: genderSexRaceOrEth
        in: path
        description: represents gender, sex at birth, race or ethnicity
        required: true
        schema:
          type: string
      - name: age
        in: path
        description: represents age, age at consent or age at cdr
        required: true
        schema:
          type: string
      requestBody:
        description: object of parameters by which to perform the search
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortDefinition'
        required: true
      responses:
        200:
          description: A collection of criteria
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DemoChartInfoListResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/chartinfo/ethnicity:
    post:
      tags:
      - cohortBuilder
      description: Searches for ethnicity info about subjects.
      operationId: findEthnicityInfo
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: object of parameters by which to perform the search
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortDefinition'
        required: true
      responses:
        200:
          description: A collection of ethnicity and counts
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EthnicityInfoListResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/top/chartinfo/{domain}:
    post:
      tags:
      - cohortBuilder
      description: Returns a collection of CohortChartData for UI charting in cohort.
      operationId: getCohortChartData
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      - name: domain
        in: path
        description: represents gender or sex at birth
        required: true
        schema:
          type: string
      requestBody:
        description: the cohort
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CohortDefinition'
        required: true
      responses:
        200:
          description: A collection of CohortChartData
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CohortChartDataListResponse'
      x-codegen-request-body-name: request
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/demographics:
    get:
      tags:
      - cohortBuilder
      description: Will return a list all values for gender, race and ethnicity.
      operationId: findParticipantDemographics
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: An object which contains a list of all values for gender, race
            and ethnicity.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ParticipantDemographics'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/dataFilters:
    get:
      tags:
      - cohortBuilder
      description: Returns data filter options per cdr version
      operationId: findDataFilters
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      responses:
        200:
          description: A collection of data filter options
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DataFiltersResponse'
  /v1/cohortbuilder/{workspaceNamespace}/{terraName}/variants:
    post:
      tags:
        - cohortBuilder
      description: Returns genomic variants from VAT per specified search term
      operationId: findVariants
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
          description: request body for getting VariantListResponse.
          content:
            'application/json':
              schema:
                "$ref": "#/components/schemas/VariantFilterRequest"
          required: true
      responses:
        200:
          description: A collection of variants
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/VariantListResponse'
  "/v1/cohortbuilder/{workspaceNamespace}/{terraName}/variant/filters":
    post:
      tags:
      - cohortBuilder
      description: Returns filters that can narrow variant results
      operationId: findVariantFilters
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: terraName
        in: path
        description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
         due to confusion with DB IDs, which it is not)
        required: true
        schema:
          type: string
      requestBody:
        description: request body for getting VariantListResponse.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VariantFilterRequest"
        required: true
      responses:
        200:
          description: A collection of variants
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VariantFilterResponse"
  "/v1/cohortbuilder/{workspaceNamespace}/{terraName}/variant/filter/info":
    post:
      tags:
        - cohortBuilder
      description: Returns info about this VariantFilter
      operationId: findVariantFilterInfo
      parameters:
        - name: workspaceNamespace
          in: path
          description: The Workspace namespace
          required: true
          schema:
            type: string
        - name: terraName
          in: path
          description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed
           due to confusion with DB IDs, which it is not)
          required: true
          schema:
            type: string
      requestBody:
        description: request body for getting VariantFilterInfoResponse.
        content:
          application/json:
            schema:
              "$ref": "#/components/schemas/VariantFilter"
        required: true
      responses:
        200:
          description: VariantFilterInfoResponse contains vid count, participant count
            and count of vids by participant count in ranges 5k, 10k, 100k and 200k
          content:
            application/json:
              schema:
                "$ref": "#/components/schemas/VariantFilterInfoResponse"
  /v1/surveys/newUserSatisfactionSurvey:
    post:
      tags:
      - surveys
      description: Stores user responses for the new user satisfaction survey.
      operationId: createNewUserSatisfactionSurvey
      requestBody:
        description: Survey response data
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateNewUserSatisfactionSurvey'
        required: true
      responses:
        200:
          description: The survey responses were successfully stored.
          content: {}
      x-codegen-request-body-name: NewUserSatisfactionSurvey
  /v1/surveys/newUserSatisfactionSurvey/validateOneTimeCode/{oneTimeCode}:
    get:
      tags:
      - surveys
      description: Checks if a given one-time can be used to create a new user satisfaction
        survey response.
      operationId: validateOneTimeCodeForNewUserSatisfactionSurvey
      security: []
      parameters:
      - name: oneTimeCode
        in: path
        description: the one-time code being validated
        required: true
        schema:
          type: string
      responses:
        200:
          description: The server successfully determined if the one-time code is
            valid.
          content:
            application/json:
              schema:
                type: boolean
  /v1/surveys/newUserSatisfactionSurvey/withOneTimeCode:
    post:
      tags:
      - surveys
      description: Stores user responses for the new user satisfaction survey if they
        have a valid one-time code.
      operationId: createNewUserSatisfactionSurveyWithOneTimeCode
      security: []
      requestBody:
        description: Survey response data and the one-time code
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/CreateNewUserSatisfactionSurveyWithOneTimeCode'
        required: true
      responses:
        200:
          description: The survey responses were successfully stored.
          content: {}
      x-codegen-request-body-name: NewUserSatisfactionSurveyWithOneTimeCode
  /v1/admin/workspaces/{workspaceNamespace}/disks:
    get:
      tags:
      - diskAdmin
      description: Lists persistent disks in a workspace. Requires the RESEARCHER_DATA_VIEW
        authority.
      operationId: listDisksInWorkspace
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ListDisksResponse'
        404:
          description: Workspace not found
          content: {}
  /v1/admin/workspaces/{workspaceNamespace}/disks/{diskName}:
    delete:
      tags:
      - diskAdmin
      description: Deletes a disk as an admin. Requires the RESEARCHER_DATA_VIEW authority.
      operationId: adminDeleteDisk
      parameters:
      - name: workspaceNamespace
        in: path
        description: The Workspace namespace
        required: true
        schema:
          type: string
      - name: diskName
        in: path
        description: name of the disk admin wants to delete
        required: true
        schema:
          type: string
      responses:
        200:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
        409:
          description: This disk is attached to a running app or runtime.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EmptyResponse'
  /v2/admin/vwb/egressEvent:
    post:
      tags:
        - vwbEgressAdmin
      description: Registers an egress event detected by VWB Egress System with the Workbench.
      operationId: createVwbEgressEvent
      requestBody:
        description: Egress event request
        content:
          '*/*':
            schema:
              $ref: '#/components/schemas/VwbEgressEventRequest'
        required: false
      responses:
        204:
          description: The egress event was successfully handled.
          content: { }
      x-codegen-request-body-name: request
components:
  schemas:
    ArchivalStatus:
      type: string
      description: CDR archival status; archived CDRs cannot be used for new workspaces.
      enum:
      - LIVE
      - ARCHIVED
    RdrEntity:
      type: string
      description: Entities send to RDR
      enum:
      - USER
      - WORKSPACE
    Degree:
      type: string
      enum:
      - PHD
      - MD
      - JD
      - EDD
      - MSN
      - MS
      - MA
      - MBA
      - ME
      - MSW
      - MPH
      - BA
      - BS
      - BSN
      - NONE
    GeneralDiscoverySource:
      type: string
      enum:
      - RESEARCH_ALL_OF_US_WEBSITE
      - SOCIAL_MEDIA
      - JOURNAL_OR_NEWS_ARTICLE
      - ACTIVITY_PRESENTATION_OR_EVENT
      - FRIENDS_OR_COLLEAGUES
      - OTHER_WEBSITE
      - OTHER
    PartnerDiscoverySource:
      type: string
      enum:
      - ALL_OF_US_EVENINGS_WITH_GENETICS_RESEARCH_PROGRAM
      - ALL_OF_US_RESEARCH_PROGRAM_STAFF
      - ALL_OF_US_RESEARCHER_ACADEMY_RTI_INTERNATIONAL
      - AMERICAN_ASSOCIATION_ON_HEALTH_AND_DISABILITY_AAHD
      - ASIAN_HEALTH_COALITION
      - CTSA_PACER_COMMUNITY_NETWORK_CPCN
      - DATA_AND_RESEARCH_CENTER_DRC
      - DELTA_RESEARCH_AND_EDUCATIONAL_FOUNDATION_DREF
      - FIFTYFORWARD_SENIOR_CITIZENS_INC
      - IGNITE_NORTHWELL_HEALTH_FEINSTEIN_INSTITUTE_FOR_MEDICAL_RESEARCH
      - NATIONAL_ALLIANCE_FOR_HISPANIC_HEALTH_NAHH
      - NATIONAL_BAPTIST_CONVENTION_USA_INC
      - NATIONAL_LATINO_NETWORK_FOR_PRECISION_MEDICINE_AND_HEALTH_DISPARITIES
      - NETWORK_OF_THE_NATIONAL_LIBRARY_OF_MEDICINE_NNLM
      - PRIDENET_STANFORD_UNIVERSITY
      - PYXIS_PARTNERS
      - SCRIPPS_RESEARCH_INSTITUTE
      - OTHER
      - NONE_OF_THE_ABOVE
    Domain:
      type: string
      description: a domain for concepts corresponding to a table in the OMOP schema
      enum:
      - OBSERVATION
      - PROCEDURE
      - DRUG
      - CONDITION
      - MEASUREMENT
      - DEVICE
      - DEATH
      - VISIT
      - SURVEY
      - PERSON
      - PHYSICAL_MEASUREMENT
      - ALL_EVENTS
      - LAB
      - VITAL
      - FITBIT
      - FITBIT_PLUS_DEVICE
      - FITBIT_HEART_RATE_SUMMARY
      - FITBIT_HEART_RATE_LEVEL
      - FITBIT_ACTIVITY
      - FITBIT_INTRADAY_STEPS
      - FITBIT_SLEEP_DAILY_SUMMARY
      - FITBIT_SLEEP_LEVEL
      - FITBIT_DEVICE
      - PHYSICAL_MEASUREMENT_CSS
      - WHOLE_GENOME_VARIANT
      - LR_WHOLE_GENOME_VARIANT
      - STRUCTURAL_VARIANT_DATA
      - SNP_INDEL_VARIANT
      - ZIP_CODE_SOCIOECONOMIC
      - ARRAY_DATA
      - CONCEPT_SET
      - CONCEPT_QUICK_ADD
      - WEAR_CONSENT
      - ETM_DELAYDISCOUNTING
      - ETM_EMORECOG
      - ETM_FLANKER
      - ETM_GRADCPT
      - ETM_DELAYDISCOUNTING_METADATA
      - ETM_DELAYDISCOUNTING_OUTCOMES
      - ETM_DELAYDISCOUNTING_TRIAL_DATA
      - ETM_EMORECOG_METADATA
      - ETM_EMORECOG_OUTCOMES
      - ETM_EMORECOG_TRIAL_DATA
      - ETM_FLANKER_METADATA
      - ETM_FLANKER_OUTCOMES
      - ETM_FLANKER_TRIAL_DATA
      - ETM_GRADCPT_METADATA
      - ETM_GRADCPT_OUTCOMES
      - ETM_GRADCPT_TRIAL_DATA
    Surveys:
      type: string
      description: a survey for concepts
      enum:
      - THE BASICS
      - LIFESTYLE
      - OVERALL HEALTH
    Race:
      type: string
      enum:
      - AIAN
      - ASIAN
      - AA
      - NHOPI
      - WHITE
      - NONE
      - PREFER_NO_ANSWER
    Ethnicity:
      type: string
      enum:
      - HISPANIC
      - NOT_HISPANIC
      - PREFER_NO_ANSWER
    GenderIdentity:
      type: string
      enum:
      - MAN
      - WOMAN
      - NON_BINARY
      - TRANSGENDER
      - NONE_DESCRIBE_ME
      - PREFER_NO_ANSWER
    SexAtBirth:
      type: string
      enum:
      - MALE
      - FEMALE
      - INTERSEX
      - NONE_OF_THESE_DESCRIBE_ME
      - PREFER_NO_ANSWER
    SexualOrientation:
      type: string
      enum:
      - GAY
      - LESBIAN
      - STRAIGHT
      - BISEXUAL
      - NONE_OF_THESE_DESCRIBE_ME
      - PREFER_NO_ANSWER
    Education:
      type: string
      enum:
      - NO_EDUCATION
      - GRADES_1_12
      - UNDERGRADUATE
      - COLLEGE_GRADUATE
      - MASTER
      - DOCTORATE
      - PREFER_NO_ANSWER
    Disability:
      type: string
      enum:
      - "true"
      - "false"
      - PREFER_NO_ANSWER
    FeaturedWorkspaceCategory:
      type: string
      enum:
      - DEMO_PROJECTS
      - PHENOTYPE_LIBRARY
      - TUTORIAL_WORKSPACES
      - COMMUNITY
    CdrVersionTiersResponse:
      required:
      - tiers
      type: object
      properties:
        tiers:
          type: array
          items:
            $ref: '#/components/schemas/CdrVersionTier'
    CdrVersionTier:
      required:
      - accessTierDisplayName
      - accessTierShortName
      - defaultCdrVersionCreationTime
      - defaultCdrVersionId
      - versions
      type: object
      properties:
        accessTierShortName:
          type: string
        accessTierDisplayName:
          type: string
        defaultCdrVersionId:
          type: string
        defaultCdrVersionCreationTime:
          type: integer
          description: Milliseconds since the UNIX epoch. This timestamp is derived
            from the deid dataset name. Ex - deid_output_20191004 -> 2019-10-04 00:00:00Z
          format: int64
        versions:
          type: array
          items:
            $ref: '#/components/schemas/CdrVersion'
    CdrVersion:
      required:
      - accessTierShortName
      - bigqueryDataset
      - cdrVersionId
      - creationTime
      - name
      type: object
      properties:
        cdrVersionId:
          type: string
        name:
          type: string
        accessTierShortName:
          type: string
        archivalStatus:
          $ref: '#/components/schemas/ArchivalStatus'
        hasWgsData:
          type: boolean
        hasFitbitData:
          type: boolean
        hasCopeSurveyData:
          type: boolean
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch. This timestamp is derived
            from the deid dataset name. Ex - deid_output_20191004 -> 2019-10-04 00:00:00Z
          format: int64
        hasFitbitSleepData:
          type: boolean
        hasSurveyConductData:
          type: boolean
        bigqueryDataset:
          type: string
        tanagraEnabled:
          type: boolean
        hasFitbitDeviceData:
          type: boolean
        publicReleaseNumber:
          type: integer
          description: The public release number for the CDR version. This is consistent across tiers 
            and environments unlike cdrVersionId
          format: int64
        hasMHWBAndETMData:
          type: boolean
    DomainCard:
      required:
      - category
      - conceptCount
      - description
      - domain
      - name
      - participantCount
      type: object
      properties:
        category:
          type: string
          description: Category of the domain
        domain:
          $ref: '#/components/schemas/Domain'
        name:
          type: string
          description: display name of the domain
        description:
          type: string
          description: description of the domain
        conceptCount:
          type: integer
          description: number of concept count in this domain
          format: int64
        participantCount:
          type: integer
          description: number of participants with data in the CDR for a concept in
            this domain
          format: int64
        standard:
          type: boolean
          description: Identifies if the concept is standard or source
          default: false
        sortOrder:
          type: integer
          description: Sort order for the domain
          format: int64
    DataFiltersResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataFilter'
    DataFilter:
      required:
      - dataFilterId
      - displayName
      - name
      type: object
      properties:
        dataFilterId:
          type: integer
          description: unique id
          format: int64
        displayName:
          type: string
          description: display name
        name:
          type: string
          description: name
    SurveyModule:
      required:
      - conceptId
      - description
      - name
      - orderNumber
      - participantCount
      - questionCount
      type: object
      properties:
        conceptId:
          type: integer
          description: the concept ID for the survey module
          format: int64
        name:
          type: string
          description: display name of the module
        description:
          type: string
          description: description of the module
        questionCount:
          type: integer
          description: number of questions in the module
          format: int64
        participantCount:
          type: integer
          description: number of participants with data in the CDR for questions in
            this module
          format: int64
        orderNumber:
          type: integer
          description: survey release order number
          format: int32
    SecuritySuspendedErrorParameters:
      type: object
      properties:
        suspendedUntil:
          type: string
          description: The time at which the security suspension will end, if any,
            in ISO 8601 format.
    ErrorResponse:
      type: object
      properties:
        message:
          type: string
          description: General error message for the response.
        statusCode:
          type: integer
          description: HTTP status code
        errorClassName:
          type: string
        errorCode:
          $ref: '#/components/schemas/ErrorCode'
        errorUniqueId:
          type: string
          description: Unique ID for this error response, for correlation with backend
            logs
        parameters:
          type: object
          properties: {}
          description: Additional structured error parameters, specific to the error
            code.
    ErrorCode:
      type: string
      description: Short parsable error descriptions
      enum:
      - PARSE_ERROR
      - USER_DISABLED
      - COMPUTE_SECURITY_SUSPENDED
      - TERRA_TOS_NON_COMPLIANT
      - TERRA_TOS_COMPLIANCE_UNKNOWN
    StatusResponse:
      required:
      - firecloudStatus
      - notebooksStatus
      type: object
      properties:
        firecloudStatus:
          type: boolean
          default: false
        notebooksStatus:
          type: boolean
          default: false
    ConfigResponse:
      required:
      - gsuiteDomain
      type: object
      properties:
        gsuiteDomain:
          type: string
          description: G-Suite domain containing user accounts.
          x-aou-note: |
            This should be gSuiteDomain, but the Swagger-Codegen-generated server code causes the JSON
            response to have the keys "gsuiteDomain" and "gSuiteDomain". This weirdness is a workaround.
        projectId:
          type: string
          description: The GCP project environment in which this All of Us app is
            running.
        firecloudURL:
          type: string
          description: The Firecloud URL to use for REST requests.
        publicApiKeyForErrorReports:
          type: string
          description: |
            Stackdriver API key for error reporting, scoped to a particular
            domain. If unset, Stackdriver error reporting should be disabled.
        enableComplianceTraining:
          type: boolean
          description: Whether the Compliance Training access module is enabled.
          default: false
        absorbSamlIdentityProviderId:
          type: string
          description: The SAML identity provider ID for Absorb.
        absorbSamlServiceProviderId:
          type: string
          description: The SAML service provider ID for Absorb.
        unsafeAllowSelfBypass:
          type: boolean
          description: Whether a user is allowed to self-bypass. Only enabled in test
            environments.
          default: false
        defaultFreeCreditsDollarLimit:
          type: number
          description: The default dollar amount of free credits allotted to each
            user
          format: double
        enableEventDateModifier:
          type: boolean
          description: Whether to show the Event Date modifier in cohort builder
          default: false
        enableRasIdMeLinking:
          type: boolean
          description: Whether users are given the option to link their RAS/ID.me
            account to AoU
          default: false
        enableRasLoginGovLinking:
          type: boolean
          description: Whether users are given the option to link their RAS/Login.gov
            account to AoU
          default: false
        rasHost:
          type: string
          description: The RAS base host name.
        accessRenewalLookback:
          type: number
          description: the point when we give users the option to update the affirmations
            needed to use the system.
        complianceTrainingRenewalLookback:
          type: number
          description: the point when we give users the option to update their compliance
            items that involve training.
        rasClientId:
          type: string
          description: The RAS OAuth client id.
        rasLogoutUrl:
          type: string
          description: The URL that can sign out RAS login session.
        freeTierBillingAccountId:
          type: string
          description: The free tier billing account id
        accessModules:
          type: array
          items:
            $ref: '#/components/schemas/AccessModuleConfig'
        currentDuccVersions:
          type: array
          items:
            type: integer
        enableCaptcha:
          type: boolean
          description: Whether a captcha check is part of the new user registration
            process
          default: true
        enableDataExplorer:
          type: boolean
          description: Whether to enable visual data explorer.
          default: false
        tanagraBaseUrl:
          type: string
          description: The tanagra base url
        enableGKEAppPausing:
          type: boolean
          default: false
          description: Whether users are allowed to pause GKE applications.
        enableGKEAppMachineTypeChoice:
          type: boolean
          default: false
          description: Whether users are allowed to choose machine type when creating GKE applications.
        enableLoginIssueBanner:
          type: boolean
          default: false
          description: If true, show banner notifying users of login issue
        enableInitialCreditsExpiration:
          type: boolean
          default: false
          description: If true, allow for user's initial credits to expire.
        initialCreditsValidityPeriodDays:
          type: integer
          description: The number of days that a user's initial credits are valid for.
        initialCreditsExtensionPeriodDays:
          type: integer
          description: The number of days that a user's initial credits can be extended for.
        initialCreditsExpirationWarningDays:
          type: integer
          description: The number of days before a user's initial credits expire that they will receive a warning.
        blockComplianceTraining:
          type: boolean
          description: Whether users are prevented from accessing the Compliance Training
          default: false
        isDownForMaintenance:
          type: boolean
          default: false
          description: If true, the api is down for maintenance and will block all requests.
        gceVmZones:
          type: array
          items:
            type: string
            description: List of GCE VM zones that users are allowed to choose from
        defaultGceVmZone:
          type: string
          description: The zone that is selected by default when creating a GCE VM. This must be one of the values specified in gceVmZones.
        enableVWBWorkspaceCreation:
          type: boolean
          default: false
          description: If true, enable the creating workspaces in Verily Workbench
    AccessModuleConfig:
      required:
      - expirable
      - name
      - requiredForCTAccess
      - requiredForRTAccess
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AccessModule'
        expirable:
          type: boolean
        requiredForRTAccess:
          type: boolean
        requiredForCTAccess:
          type: boolean
    BillingProjectMembership:
      required:
      - projectName
      - role
      - status
      type: object
      properties:
        projectName:
          type: string
          description: the name of the project
        role:
          type: string
          description: the role of the current user in the project
        status:
          $ref: '#/components/schemas/BillingProjectStatus'
      description: ""
      x-aou-note: Mirrors BillingProjectMembership from fireCloud.yaml
    DataDictionaryEntry:
      type: object
      properties:
        relevantOmopTable:
          type: string
        fieldName:
          type: string
        omopCdmStandardOrCustomField:
          type: string
        description:
          type: string
        fieldType:
          type: string
        dataProvenance:
          type: string
        sourcePpiModule:
          type: string
    BillingProjectStatus:
      type: string
      description: Initialization status of a Firecloud billing project for use with
        Workbench.
      enum:
      - none
      - pending
      - ready
      - error
    EmptyResponse:
      type: object
      properties:
        additionalInfo:
          type: string
    VerifyEmailRequest:
      type: object
      properties:
        emailToVerify:
          type: string
        username:
          type: string
    Authority:
      type: string
      description: actions a user can have authority/permission to perform
      enum:
      - DEVELOPER
      - ACCESS_CONTROL_ADMIN
      - COMMUNICATIONS_ADMIN
      - SECURITY_ADMIN
      - INSTITUTION_ADMIN
      - RESEARCHER_DATA_VIEW
      x-aou-note: |
        Authorities are a tool used to add discrete permissions to users. We currently
        define the following authorities:
          * DEVELOPER: Grants access to some internal-only
            administrative endpoints, including group management and runtime
            management. Intended to be granted for devops needs, e.g. for oncall.
          * ACCESS_CONTROL_ADMIN: This is actually basically a user admin authority, for people
            to perform actions on a user's enabled status and manual verification.
          * COMMUNICATIONS_ADMIN: Allows a user to post a Status Alert banner
          * SECURITY_ADMIN: Allows a user to respond to egress alerts by deleting all runtimes in a project
          * INSTITUTION_ADMIN: Allows a user to create, delete, and update Institute entities
          * RESEARCHER_DATA_VIEW: Allows a user to view admin-only data (or aggregations of data)
              for users, workspaces, and similar user-created content.

        The following authorities are deprecated and should no longer be used:
          * REVIEW_RESEARCH_PURPOSE (0)
          * FEATURED_WORKSPACE_ADMIN (3)

        Note on enum names: Swagger trims any common prefix from enum values' corresponding
        Java fields by default; this has no side-effect currently as there is
        no common prefix. https://github.com/swagger-api/swagger-codegen/issues/4261
    PageVisit:
      type: object
      properties:
        page:
          type: string
        firstVisit:
          type: integer
          format: int64
    DiskType:
      type: string
      enum:
      - pd-standard
      - pd-ssd
    Disk:
      description: The configuration of a persistent disk, returned in disk responses
      required:
        - name
        - status
        - size
        - diskType
        - creator
        - createdDate
        - dateAccessed
        - googleProject
        - persistentDiskId
      type: object
      properties:
        name:
          type: string
          description: Name of the persistent disk
        status:
          $ref: '#/components/schemas/DiskStatus'
        size:
          type: integer
          description: Size of persistent disk in GB
        diskType:
          $ref: '#/components/schemas/DiskType'
        appType:
          $ref: '#/components/schemas/AppType'
        gceRuntime:
          type: boolean
          description: True if disk is used by Runtime or being used by GCE runtime
          default: false
        creator:
          type: string
          description: The email for the user that created this runtime
        createdDate:
          type: string
          description: timestamp for the date this runtime was created in ISO 8601
            format
        dateAccessed:
          type: string
          description: timestamp for the date this runtime was last accessed in ISO
            8601 format. This is null if it has not been deleted yet.
        zone:
          type: string
          description: The GCP zone of the GCE VM. For example, us-east1-a or europe-west2-c.
        googleProject:
          type: string
          description: The Google Project the disk was created in.
        persistentDiskId:
          type: integer
          description: The ID of this persistent disk.
    WorkspaceListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Workspace'
    WorkspaceResponseListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/WorkspaceResponse'
    Workspace:
      required:
      - name
      type: object
      properties:
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during
            a read-modify-write to ensure that the client has not attempted to modify
            a changed resource.
        name:
          type: string
          description: DEPRECATED. A workspace has both an AoU UI name (displayName) and a
           terraName.  Use one of these to be explicit about which is desired.
        displayName:
          type: string
          description: The name of the workspace as displayed in the UI.  This name is not known to
           Terra, so it's necessary to use `terraName` and/or `namespace` for Terra calls.
           Formerly known simply as "name".
        namespace:
          type: string
        terraName:
          type: string
          description: >
           The name of this workspace as stored in Terra.  This is also part of the
           workspace component of the URL, and is therefore user-visible.
           Formerly known as "id" in some contexts, but this was confusing because this does not
           refer to the AoU or Terra database IDs corresponding to the workspace.
           When a workspace is initially created, this is equal to the "slugified" version of
           displayName (example: "My Workspace" becomes "myworkspace"). However, when the
           workspace is renamed (in the AoU RWB UI) the terraName does not change.
        cdrVersionId:
          type: string
        creator:
          type: string
          description: |
            # TODO: Remove this field. Deprecated. Use creatorUser instead.
        creatorUser:
          $ref: '#/components/schemas/User'
        billingAccountName:
          type: string
        googleBucketName:
          type: string
        accessTierShortName:
          type: string
        researchPurpose:
          $ref: '#/components/schemas/ResearchPurpose'
        billingStatus:
          $ref: '#/components/schemas/BillingStatus'
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        lastModifiedBy:
          type: string
          description: the username of the user to last update a workspace
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        featuredCategory:
          $ref: '#/components/schemas/FeaturedWorkspaceCategory'
          description: The name of the category in which the workspace is published
          default: null
        adminLocked:
          type: boolean
          description: Whether an administrator has prevented most actions on the
            workspace for all users
          default: false
        adminLockedReason:
          type: string
          description: Reason submitted by admin for workspace locking
        googleProject:
          type: string
          description: the google project used by the workspace for compute and storage
        initialCredits:
          $ref: '#/components/schemas/InitialCreditResponse'
        usesTanagra:
          type: boolean
          description: Whether a workspace uses Tanagra
          default: false
        vwbWorkspace:
          type: boolean
          description: whether this workspace is a VWB workspace
          default: false

      example:
        billingAccountName: billingAccounts/000000-AAAAAA-111111
        billingStatus: ACTIVE
        cdrVersionId: "2"
        creationTime: 1588097211621
        creator: user@aou-domain.org
        etag: "1"
        googleBucketName: gcs-bucket-AAAAAAAA-BBBBB
        id: mynewestworkspace
        lastModifiedBy: user@aou-domain.org
        lastModifiedTime: 1588097211621
        name: my newest workspace
        namespace: aou-rw-test-11112222
        googleProject: aou-rw-test-11112222
        featuredCategory: DEMO_PROJECTS
        adminLocked: true
        adminLockedReason: locked by admin
        researchPurpose:
          ancestry: false
          anticipatedFindings: |
            varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed lectus vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare massa eget egestas purus viverra accumsan in nisl nisi scelerisque eu ultrices vitae auctor pellentesque elit
          commercialPurpose: true
          controlSet: false
          diseaseFocusedResearch: false
          diseaseOfFocus: Chicken Pox
          disseminateResearchFindingList:
          - PRESS_RELEASE
          - PUBLICATION_COMMUNITY_BASED_BLOG
          - PUBLICATION_PERSONAL_BLOG
          drugDevelopment: false
          educational: true
          ethics: false
          intendedStudy: |
            varius duis at consectetur lorem donec massa sapien faucibus et molestie ac feugiat sed lectus vestibulum mattis ullamcorper velit sed ullamcorper morbi tincidunt ornare massa eget egestas purus viverra accumsan in nisl nisi scelerisque eu ultrices vitae auctor eu augue ut lectus arcu bibendum at varius vel pharetra vel turpis nunc eget lorem dolor
          methodsDevelopment: false
          otherDisseminateResearchFindings: varius duis at consectetur lorem donec
            massa sapien faucibus et molestie ac feugiat sed
          otherPopulationDetails: varius duis at consectetur lorem donec massa sapien
            faucibus et molestie ac feugiat sed
          otherPurpose: true
          otherPurposeDetails: no real purpose
          populationDetails: []
          populationHealth: false
          reasonForAllOfUs: varius duis at consectetur lorem donec massa sapien faucibus
            et molestie ac feugiat sed
          researchOutcomeList:
          - IMPROVE_HEALTH_EQUALITY_UBR_POPULATIONS
          - DECREASE_ILLNESS_BURDEN
          reviewRequested: false
          scientificApproach: varius duis at consectetur lorem donec massa sapien
            faucibus et molestie ac feugiat sed
          socialBehavioral: false
    WorkspaceBillingUsageResponse:
      required:
      - cost
      type: object
      properties:
        cost:
          type: number
          description: amount of free tier money spent on this workspace in USD
          format: double
    WorkspaceCreatorFreeCreditsRemainingResponse:
      required:
      - freeCreditsRemaining
      type: object
      properties:
        freeCreditsRemaining:
          type: number
          description: amount of free credits remaining for the workspace creator,
            in USD
          format: double
    UserRole:
      required:
      - email
      - role
      type: object
      properties:
        email:
          type: string
          description: Username of the user
        givenName:
          type: string
        familyName:
          type: string
        role:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
    ShareWorkspaceRequest:
      required:
      - items
      type: object
      properties:
        workspaceEtag:
          type: string
          description: Associated workspace etag retrieved via reading the workspaces
            API. If provided, validates that the workspace (and its user roles) has
            not been modified since this etag was retrieved.
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
    WorkspaceUserRolesResponse:
      type: object
      properties:
        workspaceEtag:
          type: string
          description: Updated workspace etag after the share request has been applied.
        items:
          type: array
          items:
            $ref: '#/components/schemas/UserRole'
        failedWorkflowRevocations:
          type: array
          description: A list of user emails for whom we were unable to revoke workflow
            runner roles, if any
          items:
            type: string
    CopyRequest:
      required:
      - newName
      - toWorkspaceNamespace
      - toWorkspaceTerraName
      type: object
      properties:
        toWorkspaceNamespace:
          type: string
        toWorkspaceTerraName:
          type: string
        newName:
          type: string
    CloneWorkspaceRequest:
      required:
      - workspace
      type: object
      properties:
        includeUserRoles:
          type: boolean
          description: Whether to duplicate the user roles (sharing settings) on the
            workspace. By default, duplicate follows the behavior of CreateWorkspace
            - it is shared solely with the creator as an OWNER. If true, all user
            roles are also copied onto the new workspace in addition to the caller
            becoming an OWNER.
          default: false
        workspace:
          $ref: '#/components/schemas/Workspace'
    CloneWorkspaceResponse:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
    WorkspaceOperation:
      required:
      - id
      - status
      type: object
      properties:
        id:
          type: integer
          description: The identifier for this operation
          format: int64
        status:
          $ref: '#/components/schemas/WorkspaceOperationStatus'
        workspace:
          $ref: '#/components/schemas/Workspace'
    UpdateWorkspaceRequest:
      required:
      - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
    WorkspaceAccessLevel:
      type: string
      description: levels of access to workspace, NO ACCESS is akin to removing a
        user from a workspace ACL.
      enum:
      - NO ACCESS
      - READER
      - WRITER
      - OWNER
    WorkspaceActiveStatus:
      type: string
      description: Status of workspace
      enum:
      - ACTIVE
      - DELETED
    WorkspaceOperationStatus:
      type: string
      description: 'Note: PENDING is deprecated and has been replaced by QUEUED and
        PROCESSING'
      enum:
      - PENDING
      - QUEUED
      - PROCESSING
      - ERROR
      - SUCCESS
    ResearchPurpose:
      required:
      - ancestry
      - anticipatedFindings
      - commercialPurpose
      - controlSet
      - diseaseFocusedResearch
      - drugDevelopment
      - educational
      - ethics
      - intendedStudy
      - methodsDevelopment
      - otherPurpose
      - populationHealth
      - reviewRequested
      - scientificApproach
      - socialBehavioral
      type: object
      properties:
        aianResearchDetails:
          type: string
        aianResearchType:
          $ref: '#/components/schemas/AIANResearchType'
        additionalNotes:
          type: string
        approved:
          type: boolean
        ancestry:
          type: boolean
          default: false
        anticipatedFindings:
          type: string
        commercialPurpose:
          type: boolean
          default: false
        controlSet:
          type: boolean
          default: false
        diseaseFocusedResearch:
          type: boolean
          default: false
        diseaseOfFocus:
          type: string
        drugDevelopment:
          type: boolean
          default: false
        educational:
          type: boolean
          default: false
        intendedStudy:
          type: string
        scientificApproach:
          type: string
        methodsDevelopment:
          type: boolean
          default: false
        otherPopulationDetails:
          type: string
        otherPurpose:
          type: boolean
          default: false
        otherPurposeDetails:
          type: string
        ethics:
          type: boolean
          default: false
        populationDetails:
          type: array
          items:
            $ref: '#/components/schemas/SpecificPopulationEnum'
        populationHealth:
          type: boolean
          default: false
        reasonForAllOfUs:
          type: string
        reviewRequested:
          type: boolean
          default: false
        socialBehavioral:
          type: boolean
          default: false
        timeRequested:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        timeReviewed:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        disseminateResearchFindingList:
          type: array
          items:
            $ref: '#/components/schemas/DisseminateResearchEnum'
        otherDisseminateResearchFindings:
          type: string
        researchOutcomeList:
          type: array
          items:
            $ref: '#/components/schemas/ResearchOutcomeEnum'
    SpecificPopulationEnum:
      type: string
      description: Short parsable descriptions of specific population categories
      enum:
      - RACE_ETHNICITY
      - AGE_GROUPS
      - SEX
      - GENDER_IDENTITY
      - SEXUAL_ORIENTATION
      - GEOGRAPHY
      - DISABILITY_STATUS
      - ACCESS_TO_CARE
      - EDUCATION_LEVEL
      - INCOME_LEVEL
      - OTHER
      - RACE_ASIAN
      - RACE_AA
      - RACE_HISPANIC
      - RACE_AIAN
      - RACE_MENA
      - RACE_NHPI
      - RACE_MORE_THAN_ONE
      - AGE_CHILDREN
      - AGE_ADOLESCENTS
      - AGE_OLDER
      - AGE_OLDER_MORE_THAN_75
    DisseminateResearchEnum:
      type: string
      description: Represents how researchers plan to to disseminate thier research
        findings.
      enum:
      - PUBLICATION_PEER_REVIEWED_JOURNALS
      - PRESENATATION_SCIENTIFIC_CONFERENCES
      - PRESS_RELEASE
      - PUBLICATION_COMMUNITY_BASED_BLOG
      - PUBLICATION_PERSONAL_BLOG
      - SOCIAL_MEDIA
      - PRESENTATION_ADVISORY_GROUPS
      - OTHER
    ResearchOutcomeEnum:
      type: string
      description: Represents antipicated outcomes from the research
      enum:
      - PROMOTE_HEALTHY_LIVING
      - IMPROVE_HEALTH_EQUALITY_UBR_POPULATIONS
      - IMPROVED_RISK_ASSESMENT
      - DECREASE_ILLNESS_BURDEN
      - PRECISION_INTERVENTION
      - NONE_APPLY
    ResearchPurposeReviewRequest:
      required:
      - approved
      type: object
      properties:
        approved:
          type: boolean
          default: false
      description: Approve or reject a workspace's research purpose.
    AccessModule:
      type: string
      enum:
      - DATA_USER_CODE_OF_CONDUCT
      - COMPLIANCE_TRAINING
      - CT_COMPLIANCE_TRAINING
      - ERA_COMMONS
      - TWO_FACTOR_AUTH
      - RAS_LINK_LOGIN_GOV
      - RAS_LINK_ID_ME
      - IDENTITY
      - PROFILE_CONFIRMATION
      - PUBLICATION_CONFIRMATION
    AccessBypassRequest:
      required:
      - bypassed
      - moduleName
      type: object
      properties:
        moduleName:
          $ref: '#/components/schemas/AccessModule'
        bypassed:
          type: boolean
          default: false
    CohortReviewListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortReview'
    WorkbenchListBillingAccountsResponse:
      required:
      - billingAccounts
      type: object
      properties:
        billingAccounts:
          type: array
          items:
            $ref: '#/components/schemas/BillingAccount'
    BillingAccount:
      required:
      - displayName
      - freeTier
      - open
      - name
      type: object
      properties:
        freeTier:
          type: boolean
          description: Returns true if this is the billing account used for free tier
        name:
          type: string
        displayName:
          type: string
        open:
          type: boolean
      description: See https://cloud.google.com/billing/reference/rest/v1/billingAccounts#BillingAccount
        for documentation on name, displayName, and open.
    CohortListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Cohort'
    Cohort:
      required:
      - criteria
      - name
      - type
      type: object
      properties:
        id:
          type: integer
          format: int64
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during
            a read-modify-write to ensure that the client has not attempted to modify
            a changed resource.
        name:
          type: string
        criteria:
          type: string
          description: Internal representation of the cohort definition. Clients should
            not depend directly on this, but instead call client functions to issue
            a SQL query for the cohort.
        type:
          type: string
        description:
          type: string
        creator:
          type: string
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        lastModifiedBy:
          type: string
          description: The user who last modified this resource.
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
    FieldSet:
      type: object
      properties:
        tableQuery:
          $ref: '#/components/schemas/TableQuery'
        annotationQuery:
          $ref: '#/components/schemas/AnnotationQuery'
      description: A specification for fields to retrieve about participants in a
        cohort. Exactly one of the properties below should be specified.
    ConceptSetListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ConceptSet'
    ConceptSet:
      required:
      - criteriums
      - name
      type: object
      properties:
        id:
          type: integer
          format: int64
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during
            a read-modify-write to ensure that the client has not attempted to modify
            a changed resource.
        name:
          type: string
        domain:
          $ref: '#/components/schemas/Domain'
        survey:
          $ref: '#/components/schemas/Surveys'
        description:
          type: string
        creator:
          type: string
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        lastModifiedBy:
          type: string
          description: The user who last modified this resource.
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        participantCount:
          type: integer
          description: Count of participants in the CDR version for the workspace
            containing this concept set that match the specified concept set
          format: int32
        criteriums:
          type: array
          description: Criteriums in the concept set, in conceptName order.
          items:
            $ref: '#/components/schemas/Criteria'
    ConceptSetConceptId:
      required:
      - conceptId
      - standard
      type: object
      properties:
        conceptId:
          type: integer
          format: int64
        standard:
          type: boolean
          default: true
    CreateConceptSetRequest:
      required:
      - conceptSet
      type: object
      properties:
        conceptSet:
          $ref: '#/components/schemas/ConceptSet'
        addedConceptSetConceptIds:
          type: array
          description: The IDs of concepts to be added to the concept set.
          items:
            $ref: '#/components/schemas/ConceptSetConceptId'
    UpdateConceptSetRequest:
      required:
      - etag
      type: object
      properties:
        etag:
          type: string
          description: Etag of the concept set being modified. Validates that the
            concept set has not been modified since this etag was retrieved.
        addedConceptSetConceptIds:
          type: array
          description: The IDs of concepts to be added to the concept set.
          items:
            $ref: '#/components/schemas/ConceptSetConceptId'
        removedConceptSetConceptIds:
          type: array
          description: The IDs of concepts to be added to the concept set.
          items:
            $ref: '#/components/schemas/ConceptSetConceptId'
    DataSetRequest:
      required:
      - domainValuePairs
      - name
      type: object
      properties:
        dataSetId:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during
            a read-modify-write to ensure that the client has not attempted to modify
            a changed resource.
        workspaceId:
          type: integer
          format: int64
        includesAllParticipants:
          type: boolean
          description: Whether to include all participants or filter by cohorts
          default: false
        prePackagedConceptSet:
          type: array
          description: List of pre Packaged concept set
          items:
            $ref: '#/components/schemas/PrePackagedConceptSetEnum'
        conceptSetIds:
          type: array
          description: The ids of all concept sets in the data set
          items:
            type: integer
            format: int64
        cohortIds:
          type: array
          description: The ids of all cohorts in the data set
          items:
            type: integer
            format: int64
        domainValuePairs:
          type: array
          description: All the selected domain/value pairs in the data set
          items:
            $ref: '#/components/schemas/DomainValuePair'
        tanagraFeatureSetIds:
          type: array
          description: The ids of all feature sets in the data set
          items:
            type: string
        tanagraCohortIds:
          type: array
          description: The ids of all cohorts in the data set
          items:
            type: string
        tanagraAllParticipantsCohort:
          type: boolean
          description: Include all participants when true
    PrePackagedConceptSetEnum:
      type: string
      enum:
      - NONE
      - PERSON
      - SURVEY
      - SURVEY_BASICS
      - SURVEY_LIFESTYLE
      - SURVEY_OVERALL_HEALTH
      - SURVEY_HEALTHCARE_ACCESS_UTILIZATION
      - SURVEY_COPE
      - SURVEY_SDOH
      - SURVEY_COVID_VACCINE
      - SURVEY_PFHH
      - SURVEY_EMOTIONAL_HEALTH
      - SURVEY_BEHAVIORAL_HEALTH
      - FITBIT
      - FITBIT_HEART_RATE_SUMMARY
      - FITBIT_HEART_RATE_LEVEL
      - FITBIT_ACTIVITY
      - FITBIT_INTRADAY_STEPS
      - FITBIT_SLEEP_DAILY_SUMMARY
      - FITBIT_SLEEP_LEVEL
      - FITBIT_DEVICE
      - WHOLE_GENOME
      - BOTH
      - ZIP_CODE_SOCIOECONOMIC
      - ETM_DELAYDISCOUNTING_METADATA
      - ETM_DELAYDISCOUNTING_OUTCOMES
      - ETM_DELAYDISCOUNTING_TRIAL_DATA
      - ETM_EMORECOG_METADATA
      - ETM_EMORECOG_OUTCOMES
      - ETM_EMORECOG_TRIAL_DATA
      - ETM_FLANKER_METADATA
      - ETM_FLANKER_OUTCOMES
      - ETM_FLANKER_TRIAL_DATA
      - ETM_GRADCPT_METADATA
      - ETM_GRADCPT_OUTCOMES
      - ETM_GRADCPT_TRIAL_DATA
    DataSetExportRequest:
      required:
      - dataSetRequest
      - newNotebook
      - notebookName
      type: object
      properties:
        dataSetRequest:
          $ref: '#/components/schemas/DataSetRequest'
        notebookName:
          type: string
        newNotebook:
          type: boolean
          default: false
        analysisLanguage:
          $ref: '#/components/schemas/AnalysisLanguage'
        generateGenomicsAnalysisCode:
          type: boolean
          default: false
        genomicsAnalysisTool:
          type: string
          default: NONE
          enum:
          - NONE
          - PLINK
          - HAIL
    TanagraGenomicDataRequest:
      required:
      - cohortIds
      - featureSetIds
      - datasetId
      type: object
      properties:
        cohortIds:
          type: array
          description: The ids of all cohorts in the data set
          items:
            type: string
        featureSetIds:
          type: array
          description: The ids of all feature sets in the data set
          items:
            type: string
        datasetId:
          type: integer
          description: Id of the new dataset to attach to the extraction job
        allParticipants:
          type: boolean
          default: false
    MarkDataSetRequest:
      type: object
      properties:
        id:
          type: integer
          format: int64
        resourceType:
          $ref: '#/components/schemas/ResourceType'
    ResourceTypeRequest:
      type: object
      properties:
        resourceType:
          $ref: '#/components/schemas/ResourceType'
    ResourceType:
      type: string
      enum:
      - NOTEBOOK
      - COHORT
      - COHORT_SEARCH_GROUP
      - COHORT_SEARCH_ITEM
      - COHORT_REVIEW
      - CONCEPT_SET
      - DATASET
      - WORKSPACE
    KernelTypeEnum:
      type: string
      enum:
      - Python
      - R
      description: The kernel specified in the metadata of a Jupyter notebook file.
    AnalysisLanguage:
      type: string
      enum:
        - Python
        - R
        - SAS
      description: |
        The language used for code generation in the Dataset Builder.
        In the context of Jupyter notebook files, this value is equal to the kernel in KernelTypeEnum.
    DomainValuePair:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        value:
          type: string
    DataSet:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during
            a read-modify-write to ensure that the client has not attempted to modify
            a changed resource.
        includesAllParticipants:
          type: boolean
          default: false
        description:
          type: string
        workspaceId:
          type: integer
          format: int64
        lastModifiedBy:
          type: string
          description: The user who last modified this resource.
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        conceptSets:
          type: array
          description: All concept sets in the data set
          items:
            $ref: '#/components/schemas/ConceptSet'
        cohorts:
          type: array
          description: All cohorts in the data set
          items:
            $ref: '#/components/schemas/Cohort'
        domainValuePairs:
          type: array
          description: All the selected domain/value pairs in the data set
          items:
            $ref: '#/components/schemas/DomainValuePair'
        prePackagedConceptSet:
          type: array
          description: List of pre Packaged concept set
          items:
            $ref: '#/components/schemas/PrePackagedConceptSetEnum'
    DataSetListResponse:
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DataSet'
    KernelTypeResponse:
      type: object
      properties:
        kernelType:
          $ref: '#/components/schemas/KernelTypeEnum'
    DataSetQuery:
      required:
      - domain
      - query
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        query:
          type: string
          description: The parameterized BigQuery SQL string to fetch the domain-specific
            subset of the data set from the CDR.
        namedParameters:
          type: array
          description: The set of named parameters to use for the SQL query.
          items:
            $ref: '#/components/schemas/NamedParameterEntry'
    NamedParameterEntry:
      required:
      - key
      - value
      type: object
      properties:
        key:
          type: string
        value:
          $ref: '#/components/schemas/NamedParameterValue'
    NamedParameterValue:
      required:
      - name
      - parameterType
      - parameterValue
      type: object
      properties:
        name:
          type: string
        parameterType:
          type: string
          description: 'Should be any parameter allowed by bigquery, with the exception
            of struct. The list of parameter types can be found here: https://cloud.google.com/bigquery/docs/reference/standard-sql/data-types'
        arrayType:
          type: string
        parameterValue:
          type: object
          properties: {}
          description: Can be any value
    DataSetPreviewRequest:
      required:
      - domain
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        includesAllParticipants:
          type: boolean
          description: Whether to include all participants or filter by cohorts
          default: false
        prePackagedConceptSet:
          type: array
          items:
            $ref: '#/components/schemas/PrePackagedConceptSetEnum'
        conceptSetIds:
          type: array
          description: The ids of all concept sets in the data set
          items:
            type: integer
            format: int64
        cohortIds:
          type: array
          description: The ids of all cohorts in the data set
          items:
            type: integer
            format: int64
        values:
          type: array
          description: All the selected values in the data set
          items:
            type: string
    DataSetPreviewResponse:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        values:
          type: array
          items:
            $ref: '#/components/schemas/DataSetPreviewValueList'
    DataSetPreviewValueList:
      type: object
      properties:
        value:
          type: string
          description: Value selected by user which will act as column header in preview
            table
        queryValue:
          type: array
          items:
            type: string
    DomainCardResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DomainCard'
    CardCount:
      required:
      - count
      - domain
      - name
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        name:
          type: string
          description: display name of the domain
        count:
          type: integer
          description: number of matched term counts in this domain
          format: int64
    CardCountResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CardCount'
    ValueSet:
      type: object
      properties:
        domain:
          $ref: '#/components/schemas/Domain'
        survey:
          $ref: '#/components/schemas/Surveys'
        values:
          type: array
          items:
            $ref: '#/components/schemas/DomainValue'
    DomainValuesResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DomainWithDomainValues'
    DomainWithDomainValues:
      type: object
      properties:
        domain:
          type: string
          description: The domain for this list of values.
        items:
          type: array
          items:
            $ref: '#/components/schemas/DomainValue'
      description: Domain with list of domain values map to various column names in
        OMOP.
    DomainValue:
      required:
      - value
      type: object
      properties:
        value:
          type: string
          description: The user facing display name for the value.
      description: Domain values map to various column names in OMOP.
    ReadOnlyNotebookResponse:
      type: object
      properties:
        html:
          type: string
        text:
          type: string
    SurveysResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyModule'
    CreateAccountRequest:
      type: object
      properties:
        profile:
          $ref: '#/components/schemas/Profile'
        captchaVerificationToken:
          type: string
          description: Token generated by captcha service once user successfully completes
            captcha
        termsOfServiceVersion:
          type: integer
          description: Optional version of the TOS that the user has acknowledged
            during the sign-up flow. If null, the system assumes that the user has
            not acknowledged any TOS during sign-up.
          format: int32
    DuplicateCohortRequest:
      type: object
      properties:
        originalCohortId:
          type: integer
          format: int64
        newName:
          type: string
    ResendWelcomeEmailRequest:
      required:
      - creationNonce
      - username
      type: object
      properties:
        username:
          type: string
          description: Username of account to resend welcome email to
        creationNonce:
          type: string
          description: The nonce returned from the account creation API.
    SendBillingSetupEmailRequest:
      type: object
      properties:
        phone:
          type: string
          description: User contact phone
        institution:
          type: string
          description: The insitution of the user.
        nihFunded:
          type: boolean
          description: Whether its NIH Funded research
    UpdateContactEmailRequest:
      required:
      - contactEmail
      - creationNonce
      - username
      type: object
      properties:
        contactEmail:
          type: string
          description: Email to update contact email
        username:
          type: string
          description: Username for account.
        creationNonce:
          type: string
          description: The nonce returned from the account creation API.
    NihToken:
      required:
      - jwt
      type: object
      properties:
        jwt:
          type: string
          description: the encoded/signed JWT
    RasLinkRequestBody:
      required:
      - authCode
      - redirectUrl
      type: object
      properties:
        authCode:
          type: string
          description: the standard OAuth authorization code from RAS that we can
            use to exchange access token.
        redirectUrl:
          type: string
          description: The redirect url that was used when generating the authorization
            code.
          example: https://all-of-us-workbench-test.appspot.com/ras-callback
    AdminTableUser:
      type: object
      properties:
        userId:
          type: integer
          format: int64
        username:
          type: string
        accessTierShortNames:
          type: array
          description: Short names of access tiers available to the user.
          items:
            type: string
        givenName:
          type: string
        familyName:
          type: string
        disabled:
          type: boolean
          default: false
        contactEmail:
          type: string
        institutionName:
          type: string
          description: Display name of the user's affiliated institution, if it exists
        institutionShortName:
          type: string
          description: Short name of the user's affiliated institution, if it exists
        firstSignInTime:
          type: integer
          format: int64
        creationTime:
          type: integer
          format: int64
        twoFactorAuthBypassTime:
          type: integer
          format: int64
        profileConfirmationBypassTime:
          type: integer
          format: int64
        publicationConfirmationBypassTime:
          type: integer
          format: int64
        eraCommonsBypassTime:
          type: integer
          format: int64
        identityBypassTime:
          type: integer
          format: int64
        complianceTrainingBypassTime:
          type: integer
          format: int64
        ctComplianceTrainingBypassTime:
          type: integer
          format: int64
        duccBypassTime:
          type: integer
          format: int64
    Profile:
      required:
      - generalDiscoverySources
      - partnerDiscoverySources
      - username
      type: object
      properties:
        userId:
          type: integer
          description: researchallofus userId
          format: int64
        username:
          type: string
          description: The username prefix, e.g. "gjordan". Note that this is different
            from the use of "username" elsewhere in the RW codebase, where username
            represents the full GSuite email address.
        creationNonce:
          type: string
          description: A value which can be used to secure API calls during the account
            creation flow, prior to account login.
        contactEmail:
          type: string
          description: email address that can be used to contact the user
        firstSignInTime:
          type: integer
          format: int64
        accessTierShortNames:
          type: array
          description: Short names of access tiers available to the user.
          items:
            type: string
        tierEligibilities:
          type: array
          description: User eligibility of each acces tier based on their institution's
            tier requirements.
          items:
            $ref: '#/components/schemas/UserTierEligibility'
        degrees:
          type: array
          items:
            $ref: '#/components/schemas/Degree'
        generalDiscoverySources:
          type: array
          items:
            $ref: '#/components/schemas/GeneralDiscoverySource'
        generalDiscoverySourceOtherText:
          type: string
          description: Additional information about the 'OTHER' general discovery
            source. Present iff generalDiscoverySources contains 'OTHER'.
        partnerDiscoverySources:
          type: array
          items:
            $ref: '#/components/schemas/PartnerDiscoverySource'
        partnerDiscoverySourceOtherText:
          type: string
          description: Additional information about the 'OTHER' partner discovery
            source. Present iff partnerDiscoverySources contains 'OTHER'.
        givenName:
          type: string
          description: the user's given name (e.g. Alice)
        familyName:
          type: string
          description: the user's family  name (e.g. Jones)
        professionalUrl:
          type: string
          description: the link to the user's professional url
        authorities:
          type: array
          description: authorities granted to this user
          items:
            $ref: '#/components/schemas/Authority'
        pageVisits:
          type: array
          description: pages user has visited
          items:
            $ref: '#/components/schemas/PageVisit'
        demographicSurveyCompletionTime:
          type: integer
          description: Timestamp when the user completed a demographic survey in milliseconds
            since the UNIX epoch.
          format: int64
        disabled:
          type: boolean
          default: false
        areaOfResearch:
          type: string
        verifiedInstitutionalAffiliation:
          $ref: '#/components/schemas/VerifiedInstitutionalAffiliation'
        demographicSurvey:
          $ref: '#/components/schemas/DemographicSurvey'
        eraCommonsLinkedNihUsername:
          type: string
          description: The user's NIH username
        eraCommonsLinkExpireTime:
          type: integer
          description: The FireCloud-calculated expiration time
          format: int64
          default: 0
        duccSignedVersion:
          type: integer
          description: Version of the data user code of conduct agreement that the
            user last signed.
          format: int32
        duccSignedInitials:
          type: string
          description: The initials used for the user's most recent signing of the
            DUCC
        duccCompletionTimeEpochMillis:
          type: integer
          description: The date of the user's most recent signature of the DUCC
          format: int64
        address:
          $ref: '#/components/schemas/Address'
        freeTierUsage:
          type: number
          format: double
        freeTierDollarQuota:
          type: number
          format: double
        latestTermsOfServiceVersion:
          type: integer
          description: Version of the terms of service that the user last acknowledged.
            May be null if the user has never acknowledged the Terms of Service.
          format: int32
        latestTermsOfServiceTime:
          type: integer
          description: Timestamp when the user last acknowledged the terms of service.
            May be null if the user has never acknowledged the Terms of Service.
          format: int64
        rasLinkUsername:
          type: string
          description: The user's identity name in RAS.
        accessModules:
          type: object
          properties:
            modules:
              type: array
              items:
                $ref: '#/components/schemas/AccessModuleStatus'
        demographicSurveyV2:
          $ref: '#/components/schemas/DemographicSurveyV2'
        newUserSatisfactionSurveyEligibility:
          type: boolean
        newUserSatisfactionSurveyEligibilityEndTime:
          type: string
          description: Timestamp indicating when the user is ineligible to take the
            new user survey in ISO 8601 format
        initialCreditsExpirationEpochMillis:
          type: integer
          description: Timestamp indicating when the user's initial credits will expire, if applicable
          format: int64
        initialCreditsExtensionEpochMillis:
          type: integer
          description: Timestamp indicating when the user requested their initial credits expiration to be extended, if applicable
          format: int64
        initialCreditsExpirationBypassed:
          type: boolean
          default: false
          description: When set to true, the user will not be required to spend their
            initial credits within the expiration period.
        eligibleForInitialCreditsExtension:
          type: boolean
          default: false
          description: When set to true, the user is eligible to request an extension
            of their initial credits expiration period.
    AccessModuleStatus:
      required:
      - moduleName
      type: object
      properties:
        moduleName:
          $ref: '#/components/schemas/AccessModule'
        completionEpochMillis:
          type: integer
          description: When this module completed if applicable
          format: int64
        expirationEpochMillis:
          type: integer
          description: When this module expired or will expire if applicable.
          format: int64
        bypassEpochMillis:
          type: integer
          description: When this module is bypassed if applicable
          format: int64
    DemographicSurvey:
      type: object
      properties:
        race:
          type: array
          items:
            $ref: '#/components/schemas/Race'
        ethnicity:
          $ref: '#/components/schemas/Ethnicity'
        identifiesAsLgbtq:
          type: boolean
        lgbtqIdentity:
          type: string
        genderIdentityList:
          type: array
          items:
            $ref: '#/components/schemas/GenderIdentity'
        sexAtBirth:
          type: array
          items:
            $ref: '#/components/schemas/SexAtBirth'
        yearOfBirth:
          type: number
        education:
          $ref: '#/components/schemas/Education'
        disability:
          $ref: '#/components/schemas/Disability'
    Address:
      type: object
      properties:
        streetAddress1:
          type: string
        streetAddress2:
          type: string
        zipCode:
          type: string
        city:
          type: string
        state:
          type: string
        country:
          type: string
    StackTraceElement:
      required:
      - className
      - fileName
      - lineNumber
      - methodName
      type: object
      properties:
        className:
          type: string
          description: class name
        methodName:
          type: string
          description: method name
        fileName:
          type: string
          description: source file name
        lineNumber:
          type: integer
          description: line number
      description: ""
    RuntimeStatus:
      type: string
      enum:
      - Creating
      - Running
      - Updating
      - Error
      - Stopping
      - Stopped
      - Starting
      - Deleting
      - Deleted
      - Unknown
    AppStatus:
      type: string
      enum:
      - DELETED
      - DELETING
      - ERROR
      - PROVISIONING
      - RUNNING
      - STARTING
      - STATUS_UNSPECIFIED
      - STOPPED
      - STOPPING
    AppType:
      type: string
      enum:
      - CROMWELL
      - RSTUDIO
      - SAS
    DiskStatus:
      type: string
      enum:
      - Creating
      - Restoring
      - Failed
      - Ready
      - Deleting
      - Deleted
      - Unknown
    RuntimeConfigurationType:
      type: string
      description: |
        The configuration type for this runtime. Namely, whether there was a user override of a specific cloud service type, or whether one of the preset system defaults was used. This distinction is meaningful for display purposes, and allows the user to pickup natural upgrades to the default configuration.
      enum:
      - UserOverride
      - GeneralAnalysis
      - HailGenomicAnalysis
    Runtime:
      type: object
      properties:
        googleProject:
          type: string
          description: The Google Project used to create the runtime. Read only.
        runtimeName:
          type: string
          description: The user-supplied name for the runtime. Read only.
        createdDate:
          type: string
          description: The date and time the runtime was created, in ISO-8601 format.
            Read only.
        status:
          $ref: '#/components/schemas/RuntimeStatus'
        autopauseThreshold:
          type: integer
          description: The number of minutes of idle time to elapse before the cluster
            is autopaused. If autopause is set to false, this value is disregarded.
            A value of 0 is equivalent to autopause being turned off.
        configurationType:
          $ref: '#/components/schemas/RuntimeConfigurationType'
        toolDockerImage:
          type: string
          description: The tool docker image to install. May be Dockerhub or GCR.
            If not set, a default Jupyter image will be installed.
        gceConfig:
          $ref: '#/components/schemas/GceConfig'
        gceWithPdConfig:
          $ref: '#/components/schemas/GceWithPdConfig'
        dataprocConfig:
          $ref: '#/components/schemas/DataprocConfig'
        errors:
          type: array
          description: The list of errors that were encountered on runtime create,
            if any.
          items:
            $ref: '#/components/schemas/RuntimeError'
    RuntimeError:
      type: object
      properties:
        errorMessage:
          type: string
          description: Error message
        errorCode:
          type: integer
          description: Error code
        timestamp:
          type: string
          description: timestamp for error in ISO 8601 format
      description: Errors encountered on runtime create
    CreateAppRequest:
      required:
      - appType
      - kubernetesRuntimeConfig
      - persistentDiskRequest
      type: object
      properties:
        appType:
          $ref: '#/components/schemas/AppType'
        kubernetesRuntimeConfig:
          $ref: '#/components/schemas/KubernetesRuntimeConfig'
        persistentDiskRequest:
          $ref: '#/components/schemas/PersistentDiskRequest'
        autodeleteEnabled:
          type: boolean
          description: Whether to turn on autodelete
        autodeleteThreshold:
          type: integer
          description: The number of minutes of idle time to elapse before the app is
            deleted. When autodeleteEnabled is true, a positive integer is required
      description: Create User App request body
    UserAppEnvironment:
      type: object
      properties:
        googleProject:
          type: string
          description: The Google Project used to create the user app. Read only.
        appName:
          type: string
          description: The user-supplied name for the user app. Read only.
        appType:
          $ref: '#/components/schemas/AppType'
        creator:
          type: string
          description: The creator of the app
        createdDate:
          type: string
          description: The date and time the user app was created, in ISO-8601 format.
            Read only.
        status:
          $ref: '#/components/schemas/AppStatus'
        autopauseThreshold:
          type: integer
          description: The number of minutes of idle time to elapse before the cluster
            is autopaused. If autopause is set to false, this value is disregarded.
            A value of 0 is equivalent to autopause being turned off.
        autodeleteEnabled:
          type: boolean
          description: Whether to turn on autodelete
        autodeleteThreshold:
          type: integer
          description: The number of minutes of idle time to elapse before the app is
            deleted. When autodeleteEnabled is true, a positive integer is required
        kubernetesRuntimeConfig:
          $ref: '#/components/schemas/KubernetesRuntimeConfig'
        proxyUrls:
          type: object
          properties: {}
          description: Read only. Map of service name to proxyUrl
        diskName:
          type: string
          description: Read only. The name of the disk associated with this user app
        dateAccessed:
          type: string
          description: |
            The date and time the environment was last accessed, in ISO-8601 format.
            Date accessed is defined as the last time the runtime was created, modified, or accessed via the proxy.
        errors:
          type: array
          description: The list of errors that were encountered on user app creation,
            if any.
          items:
            $ref: '#/components/schemas/KubernetesError'
        labels:
          type: object
          properties: {}
          description: The labels of each user app in the response whose key is in
            includeLabels in the request. Of type Map[String,String]
    KubernetesError:
      type: object
      properties:
        errorMessage:
          type: string
          description: a helpful error message
        timestamp:
          type: string
          description: timestamp for error in ISO 8601 format
        action:
          type: string
          description: the api-level action associated with the error, e.g. createApp
        source:
          type: string
          description: the internal source associated with the error
        googleErrorCode:
          type: integer
          description: if the error is associated with an external API call, the error
            code will be propagated here
      description: a kubernetes app error
    UpdateRuntimeRequest:
      required:
      - runtime
      type: object
      properties:
        runtime:
          $ref: '#/components/schemas/Runtime'
    UpdateDiskRequest:
      type: object
      properties:
        labels:
          type: object
          properties: {}
          description: The labels to be added or updated on the persistent disk. Of
            type Map[String,String]
        size:
          type: integer
          description: The size in GB that the persistent disk is to be updated to.
        diskType:
          $ref: '#/components/schemas/DiskType'
      description: Updates an existing persistent disk
    KubernetesRuntimeConfig:
      required:
      - autoscalingEnabled
      - machineType
      - numNodes
      type: object
      properties:
        numNodes:
          type: integer
          description: number of nodes for the kubernetes app
        machineType:
          type: string
          description: the machine type for the nodes the kubernetes app will run
            on
          example: n1-standard-1
        autoscalingEnabled:
          type: boolean
          description: whether or not the nodes autoscale up and down for this app
      description: configuration for a kubernetes app
    PersistentDiskRequest:
      type: object
      properties:
        name:
          type: string
          description: The name of the disk. This can reference an existing disk.
        size:
          type: integer
          description: the size of the disk, if this is a creation request. Has an
            intelligent default otherwise
        diskType:
          $ref: '#/components/schemas/DiskType'
        labels:
          type: object
          properties: {}
          description: The labels to be placed on the cluster. Of type Map[String,String]
      description: configuration to create a disk
    GceConfig:
      required:
      - zone
      type: object
      properties:
        diskSize:
          type: integer
          description: |
            Optional, the size in gigabytes of the disk on the GCE VM. Minimum size is 50GB. If unspecified, default size is 100GB.
        machineType:
          type: string
          description: |
            Optional, the machine type determines the number of CPUs and memory for the master node. For example "n1-standard-16" or "n1-highmem-64". If unspecified, defaults to creating a "n1-standard-4" machine. To decide which is right for you, see https://cloud.google.com/compute/docs/machine-types
        zone:
          type: string
          description: >
            The GCP zone of the GCE VM. For example, us-east1-a or europe-west2-c.
            Defaults to us-central1-a.
        gpuConfig:
          $ref: '#/components/schemas/GpuConfig'
      description: Configuration for Google Compute Engine instances.
    GceWithPdConfig:
      required:
      - zone
      type: object
      properties:
        persistentDisk:
          $ref: '#/components/schemas/PersistentDiskRequest'
        machineType:
          type: string
          description: |
            Optional, the machine type determines the number of CPUs and memory for the master node. For example "n1-standard-16"
            or "n1-highmem-64". If unspecified, defaults to creating a "n1-standard-4" machine. To decide which is right for you,
            see https://cloud.google.com/compute/docs/machine-types
        zone:
          type: string
          description: >
            The GCP zone of the GCE VM. For example, us-east1-a or europe-west2-c.
            Defaults to us-central1-a.
        gpuConfig:
          $ref: '#/components/schemas/GpuConfig'
      description: Configuration for Google Compute Engine instances with Persistent
        Disk.
    DataprocConfig:
      type: object
      properties:
        numberOfWorkers:
          type: integer
          description: |
            Optional, number of workers in the cluster. Can be 0 (default), 2 or more. Google Dataproc does not allow 1 worker.
        masterMachineType:
          type: string
          description: |
            Optional, the machine type determines the number of CPUs and memory for the master node. For example "n1-standard-16" or "n1-highmem-64". If unspecified, defaults to creating a "n1-standard-4" machine. To decide which is right for you, see https://cloud.google.com/compute/docs/machine-types
        masterDiskSize:
          type: integer
          description: |
            Optional, the size in gigabytes of the disk on the master node. Minimum size is 50GB. If unspecified, default size is 100GB.
        workerMachineType:
          type: string
          description: |
            Optional, the machine type determines the number of CPUs and memory for the worker nodes. For example "n1-standard-16" or "n1-highmem-64". If unspecified, defaults to creating a "n1-standard-4" machine. To decide which is right for you, see https://cloud.google.com/compute/docs/machine-types. Ignored if numberOfWorkers is 0.
        workerDiskSize:
          type: integer
          description: |
            Optional, the size in gigabytes of the disk on the master node. Minimum size is 10GB. If unspecified, default size is 100GB. Ignored if numberOfWorkers is 0.
        numberOfWorkerLocalSSDs:
          type: integer
          description: |
            Optional, the number of local solid state disks for workers. If unspecified, the default number is 0. Ignored if numberOfWorkers is 0.
        numberOfPreemptibleWorkers:
          type: integer
          description: |
            Optional, the number of preemptible workers. If unspecified, the default number is 0. Ignored if numberOfWorkers is 0. For more information, see https://cloud.google.com/compute/docs/instances/preemptible
      description: Configuration for a single Dataproc cluster.
    GpuConfig:
      required:
      - gpuType
      - numOfGpus
      type: object
      properties:
        gpuType:
          type: string
          description: The google identifier for the gpu specs associated with this
            runtime, ex `nvidia-tesla-t4`. See https://cloud.google.com/compute/docs/gpus
        numOfGpus:
          type: integer
          description: The number of gpus associated with this runtime
      description: A config that describes the gpus associated with a runtime
    FileDetail:
      required:
      - lastModifiedTime
      - name
      - path
      type: object
      properties:
        name:
          type: string
          description: File Name
        path:
          type: string
          description: The path is in format of gs://bucket-name/name
        lastModifiedBy:
          type: string
          description: The user who last modified this resource.
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        sizeInBytes:
          type: integer
          description: File size in bytes.
          format: int64
    AdminRuntimeFields:
      required:
        - runtimeName
        - status
        - createdDate
        - labels
        - dateAccessed
      type: object
      properties:
        runtimeName:
          type: string
          description: The user-supplied name for the runtime
        status:
          $ref: '#/components/schemas/RuntimeStatus'
        createdDate:
          type: string
          description: The date and time the runtime was created, in ISO-8601 format
        labels:
          type: object
          properties: {}
          description: The labels to be placed on the runtime. Of type Map[String,String]
        dateAccessed:
          type: string
          description: |
            The date and time the runtime was last accessed, in ISO-8601 format.
            Date accessed is defined as the last time the runtime was created, modified, or accessed via the proxy.
      description: This is a subset of options in a full list runtimes response, copied
        from leonardo.yaml.
    ListRuntimeDeleteRequest:
      type: object
      properties:
        runtimesToDelete:
          type: array
          items:
            type: string
    RuntimeLocalizeRequest:
      required:
      - notebookNames
      - playgroundMode
      type: object
      properties:
        notebookNames:
          type: array
          description: Names of notebooks to localize. This is just the basename (no
            gs:// needed). This is interpreted as relative to the /notebooks directory
            within the provided workspace's Google Cloud Storage bucket.
          items:
            type: string
        playgroundMode:
          type: boolean
          description: Set to true if playgroundMode needed
          default: false
    RuntimeLocalizeResponse:
      required:
      - runtimeLocalDirectory
      type: object
      properties:
        runtimeLocalDirectory:
          type: string
          description: The directory on the notebook runtime file system where the
            requested files were localized. This is the "API" directory in Jupyter
            terms, which means it is a relative path in the Jupyter user-facing file
            system, e.g. "foo/bar.ipynb".
    AppLocalizeRequest:
      required:
      - fileNames
      - playgroundMode
      type: object
      properties:
        fileNames:
          type: array
          description: Names of notebooks to localize. This is just the basename (no
            gs:// needed). This is interpreted as relative to the /notebooks directory
            within the provided workspace's Google Cloud Storage bucket.
          items:
            type: string
        playgroundMode:
          type: boolean
          description: Set to true if playgroundMode needed
          default: false
        appType:
          $ref: '#/components/schemas/AppType'
    AppLocalizeResponse:
      required:
      - appLocalDirectory
      type: object
      properties:
        appLocalDirectory:
          type: string
          description: The directory on the notebook runtime file system where the
            requested files were localized. This is the "API" directory in Jupyter
            terms, which means it is a relative path in the Jupyter user-facing file
            system, e.g. "foo/bar.ipynb".
    ListAppsResponse:
      type: array
      items:
        $ref: '#/components/schemas/UserAppEnvironment'
    ListDisksResponse:
      type: array
      items:
        $ref: '#/components/schemas/Disk'
    UsernameTakenResponse:
      required:
      - taken
      type: object
      properties:
        taken:
          type: boolean
          description: Boolean response to whether username is already taken.
          default: false
      example:
        taken: false
    CheckEmailRequest:
      type: object
      properties:
        contactEmail:
          type: string
          description: The Institutional contact email address to check.
    CheckEmailResponse:
      type: object
      properties:
        validMember:
          type: boolean
          description: Whether the requested email address is a valid member of the
            institution.
    WorkspaceResponse:
      required:
      - accessLevel
      - workspace
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        accessLevel:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
    AdminUserListResponse:
      required:
      - users
      type: object
      properties:
        users:
          type: array
          items:
            $ref: '#/components/schemas/AdminTableUser'
    BatchSyncAccessRequest:
      required:
      - usernames
      type: object
      properties:
        usernames:
          type: array
          items:
            type: string
    BatchSyncAccessResponse:
      type: object
      properties:
        cloudTaskNames:
          type: array
          description: list of Cloud task names that processing the batch update
          items:
            type: string
    AccountDisabledStatus:
      required:
      - disabled
      type: object
      properties:
        disabled:
          type: boolean
          description: Set to true to disable user, false otherwise
    AuditBigQueryResponse:
      type: object
      properties:
        numQueryIssues:
          type: integer
          description: Number of queries issues against the Curated data repository
            which are flagged as possible audit issues. See logs/alerts for details.
          format: int32
    User:
      type: object
      properties:
        email:
          type: string
          description: researchallofus email address (deprecated in favor of userName)
        userName:
          type: string
          description: Unique researchallofus username (a Google account email)
        givenName:
          type: string
          description: the user's given name (e.g. Alice)
        familyName:
          type: string
          description: the user's family  name (e.g. Jones)
    UserResponse:
      type: object
      properties:
        users:
          type: array
          description: A list of users matching the provided search query.
          items:
            $ref: '#/components/schemas/User'
        nextPageToken:
          type: string
          description: Pagination token that can be used in a subsequent calls to
            retrieve more results. If not set, there are no more results to retrieve.
    WorkspaceResourceResponse:
      type: array
      items:
        $ref: '#/components/schemas/WorkspaceResource'
    WorkspaceResource:
      required:
      - accessTierShortName
      - adminLocked
      - cdrVersionId
      - lastModifiedEpochMillis
      - permission
      - workspaceBillingStatus
      - workspaceFirecloudName
      - workspaceNamespace
      type: object
      properties:
        workspaceId:
          type: integer
          format: int64
        workspaceNamespace:
          type: string
        workspaceFirecloudName:
          type: string
        workspaceBillingStatus:
          $ref: '#/components/schemas/BillingStatus'
        cdrVersionId:
          type: string
        accessTierShortName:
          type: string
        permission:
          type: string
        cohort:
          $ref: '#/components/schemas/Cohort'
        cohortReview:
          $ref: '#/components/schemas/CohortReview'
        notebook:
          $ref: '#/components/schemas/FileDetail'
        conceptSet:
          $ref: '#/components/schemas/ConceptSet'
        dataSet:
          $ref: '#/components/schemas/DataSet'
        lastModifiedBy:
          type: string
          description: The user who last modified this resource.
        lastModifiedEpochMillis:
          type: integer
          description: the resource's last modified time, in milliseconds since the
            epoch
          format: int64
        adminLocked:
          type: boolean
          description: Whether an administrator has prevented most actions on the
            workspace for all users
          default: false
    RecentResourceRequest:
      type: object
      properties:
        notebookName:
          type: string
    RecentWorkspace:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        accessLevel:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
    RecentWorkspaceResponse:
      type: array
      items:
        $ref: '#/components/schemas/RecentWorkspace'
    NotebookLockingMetadataResponse:
      type: object
      properties:
        lastLockedBy:
          type: string
        lockExpirationTime:
          type: integer
          description: The time when the lock will expire, in ms from the Unix epoch
          format: int64
    BillingStatus:
      type: string
      description: Is the billing account associated with this workspace available
        to incur costs?  For a free tier project, this indicates whether a user has
        an available balance in their quota.  For a user-provided billing account,
        this corresponds to whether payment is valid and up to date.
      enum:
      - ACTIVE
      - INACTIVE
    BillingAccountType:
      type: string
      description: Whether a billing project is provided by the Researcher Workbench
        as a Free Tier project subject to quota checks, or the project has a billing
        account provided by the user
      enum:
      - FREE_TIER
      - USER_PROVIDED
    BillingProjectBufferStatus:
      required:
      - availablePerTier
      type: object
      properties:
        availablePerTier:
          type: array
          items:
            $ref: '#/components/schemas/AvailableBufferPerTier'
    AvailableBufferPerTier:
      type: object
      properties:
        accessTierShortName:
          type: string
          description: The shortName of an access tier
        availableProjects:
          type: integer
          description: Count of the AVAILABLE billing buffer projects in this access
            tier
          format: int64
    StatusAlertLocation:
      type: string
      enum:
        - BEFORE_LOGIN
        - AFTER_LOGIN
    StatusAlert:
      type: object
      properties:
        statusAlertId:
          type: integer
          description: The primary key of the status alert in the database
          format: int64
        title:
          type: string
          description: 'Title of the status alert, e.g. ''Service Incident: December
            6, 2019'''
        message:
          type: string
          description: The actual message of the status alert, e.g. 'AoU RW is down
            because GCP is down'
        link:
          type: string
          description: A URL linking to an incident report where users can read more
        alertLocation:
          $ref: '#/components/schemas/StatusAlertLocation'
        startTimeEpochMillis:
          type: integer
          description: Start time for when this alert should be shown, in milliseconds since epoch. Null starts immediately.
          format: int64
        endTimeEpochMillis:
          type: integer
          description: End time for when this alert should no longer be shown, in milliseconds since epoch. Null means it never expires.
          format: int64
    SumologicEgressEventRequest:
      type: object
      properties:
        eventsJsonArray:
          type: string
          description: A JSON string containing an array of JSON-encoded egress events.
            See the SumologicEgressEvent definition for the expected schema of each
            event.
    BucketAuditEntry:
      required:
      - google_project_id
      - pet_account
      type: object
      properties:
        pet_account:
          type: string
          description: This is the pet account associated with the user
        file_lengths:
          type: integer
          description: The total file lengths reported in the audit logs for the user
          format: int64
        google_project_id:
          type: string
          description: The google project id that caused the egress
        bucket_name:
          type: string
          description: The name of the bucket reported in the audit logs that contains
            the files
        min_time:
          type: string
          description: The first timestamp when a file was created.
        max_time:
          type: string
          description: The last timestamp when a file was created.
    SumologicEgressEvent:
      required:
      - project_name
      - vm_prefix
      type: object
      properties:
        environment:
          type: string
          description: The AoU environment in which the high-egress event occurred.
          enum:
          - test
          - staging
          - stable
          - preprod
          - prod
        time_window_duration:
          type: integer
          description: The duration of the time window during which the high-egress
            event occurred, in seconds.
          format: int64
        time_window_start:
          type: integer
          description: Beginning of the time window, in milliseconds since Epoch.
          format: int64
        egress_mib:
          type: number
          description: The total amount of egress detected during the window, in mebibytes
            (MiB). This total subsumes the per-machine type egress values provided
            here. The egress threshold is triggered against this value.
          format: double
        gce_egress_mib:
          type: number
          description: The amount of egress detected via raw GCE VM during the window,
            in mebibytes (MiB). Does NOT include Dataproc egress (Dataproc technically
            uses GCE).
          format: double
        dataproc_master_egress_mib:
          type: number
          description: The amount of egress detected via Dataproc master nodes during
            the window, in mebibytes (MiB).
          format: double
        dataproc_worker_egress_mib:
          type: number
          description: The amount of egress detected via Dataproc worker nodes during
            the window, in mebibytes (MiB).
          format: double
        egress_mib_threshold:
          type: number
          description: The threshold value for which this egress triggered an alert,
            in mebibytes (MiB).
          format: double
        project_name:
          type: string
          description: The Google Cloud project name associated with the workspace,
            e.g. aou-rw-6b66533d. Always present.
        vm_prefix:
          type: string
          description: Prefix of the research VM(s) that generated egress, including
            the user ID, e.g. all-of-us-260.
        vm_name:
          type: string
          description: The VM name that caused the egress.
        src_gke_cluster:
          type: string
          description: The GKE cluster that caused the egress.
        src_gke_service_name:
          description: The GKE service that caused the egress.
          type: string
        gke_egress_mib:
          type: number
          description: The amount of egress by the GKE cluster during the window,
            in mebibytes (MiB).
          format: double
    ListEgressEventsRequest:
      type: object
      properties:
        sourceUserEmail:
          type: string
          description: |
            If specified, only return events which were caused by this user. Should include the email domain of the user.
        sourceWorkspaceNamespace:
          type: string
          description: |
            If specified, only return event which were detected within the given workspace.
        pageSize:
          type: integer
          description: |
            The number of egress events to return, per page. If unspecified, a system default is used.
        pageToken:
          type: string
          description: |
            Pagination token used to receive the next page of results. Provide this value from the nextPageToken of a prior response.
    CreateEgressBypassWindowRequest:
      type: object
      properties:
        startTime:
          type: integer
          description: |
            Timestamp when user egress bypass window begins in milliseconds since the UNIX epoch
          format: int64
        byPassDescription:
          type: string
          description: Brief description of this bypass request.
    ListEgressBypassWindowResponse:
      type: object
      properties:
        bypassWindows:
          type: array
          items:
            $ref: '#/components/schemas/EgressBypassWindow'
    EgressBypassWindow:
      type: object
      properties:
        startTime:
          type: integer
          description: |
            Timestamp when user egress bypass window begins in milliseconds since the UNIX epoch
          format: int64
        endTime:
          type: integer
          description: |
            Timestamp when user egress bypass window ends in milliseconds since the UNIX epoch
          format: int64
        description:
          type: string
          description: Brief description of this bypass request.
    ListEgressEventsResponse:
      type: object
      properties:
        events:
          type: array
          items:
            $ref: '#/components/schemas/EgressEvent'
        nextPageToken:
          type: string
          description: |
            If present, this token can be provided to retrieve the next page of results. If null or empty, there are no further pages in the result stream.
        totalSize:
          type: integer
          description: Total size of the result set.
    UpdateEgressEventRequest:
      type: object
      properties:
        egressEvent:
          $ref: '#/components/schemas/EgressEvent'
    AuditEgressEventRequest:
      type: object
      description: Placeholder request object for future extension.
    AuditEgressRuntimeLogEntry:
      type: object
      properties:
        timestamp:
          type: string
          description: Time at which the log message was written, in ISO 8601 format.
        message:
          type: string
          description: The log message text payload.
    AuditEgressRuntimeLogGroup:
      type: object
      properties:
        name:
          type: string
          description: Display name for this log group
        pattern:
          type: string
          description: Pattern used to match the log message text
        entries:
          type: array
          description: |
            The log entries matching the specified pattern, in descending timestamp order. May be truncated.
          items:
            $ref: '#/components/schemas/AuditEgressRuntimeLogEntry'
        totalEntries:
          type: integer
          description: |
            The total number of log entries matching this pattern. To determine whether entries are truncated, compare against len(entries).
    AuditEgressEventResponse:
      type: object
      properties:
        egressEvent:
          $ref: '#/components/schemas/EgressEvent'
        sumologicEvent:
          type: object
          properties: {}
          description: |
            Original event received from Sumologic. Should be treated as an opaque JSON payload, as the event schema may change over time; but generally will correspond to SumologicEgressEvent.
        runtimeLogGroups:
          type: array
          description: |
            A set of heuristically relevant log pattern/configuration groups for investigating the cause of an egress event.
          items:
            $ref: '#/components/schemas/AuditEgressRuntimeLogGroup'
    EgressEventStatus:
      type: string
      description: Workbench processing status for this egress event.
      enum:
      - BYPASSED
      - PENDING
      - REMEDIATED
      - VERIFIED_FALSE_POSITIVE
    EgressEvent:
      type: object
      properties:
        egressEventId:
          type: string
          description: Unique identifier for this egress event.
        sourceUserEmail:
          type: string
          description: Researcher email for the user associated with this event, if
            known.
        sourceWorkspaceNamespace:
          type: string
          description: Workspace in which the event fired, if known.
        sourceGoogleProject:
          type: string
          description: Google project in which the event fired, if known.
        egressMegabytes:
          type: number
          description: Volume of egress which triggered the alert, in Megabytes.
          format: double
        egressWindowSeconds:
          type: number
          description: Window duration over which the egress was detected, in seconds.
        creationTime:
          type: string
          description: Time at which the egress event was recorded in the RW DB, in
            ISO 8601 format.  This is NOT the event time itself.
        timeWindowStartEpochMillis:
          type: integer
          description: The beginning of the time window in which egress was detected,
            in epoch milliseconds.
          format: int64
        timeWindowEndEpochMillis:
          type: integer
          description: The end of the time window in which egress was detected, in
            epoch milliseconds.
          format: int64
        status:
          $ref: '#/components/schemas/EgressEventStatus'
    ArrayOfLong:
      type: array
      items:
        type: integer
        format: int64
    Institution:
      required:
      - displayName
      - organizationTypeEnum
      - shortName
      type: object
      properties:
        shortName:
          type: string
          description: A short unique name for the Institution used as an identifier,
            such as 'VUMC'
        displayName:
          type: string
          description: A more descriptive name for the Institution, such as 'Vanderbilt
            University Medical Center'
        organizationTypeEnum:
          $ref: '#/components/schemas/OrganizationType'
        organizationTypeOtherText:
          type: string
          description: The detailed Organization Type of this institution, as text,
            if its enumerated type is OTHER
        requestAccessUrl:
          type: string
          description: Optional url for institution's handling their own access requests
        userInstructions:
          type: string
          description: Institution-specific instructions for users to be sent in email
        tierConfigs:
          type: array
          description: List of requirements on how members can get access for each
            tier.
          items:
            $ref: '#/components/schemas/InstitutionTierConfig'
        bypassInitialCreditsExpiration:
          type: boolean
          description: Whether to bypass the expiration of initial credits for all researchers 
            affiliated with this institution (meaning their initial credits do not expire)
      description: Represents an institution which has been approved to validate researchers
        who wish to use the system, including the email patterns which we use to validate
        users.
    PublicInstitutionDetails:
      required:
      - displayName
      - organizationTypeEnum
      - shortName
      - institutionalInitialCreditsExpirationBypassed
      type: object
      properties:
        shortName:
          type: string
          description: A short unique name for the Institution used as an identifier,
            such as 'VUMC'
        displayName:
          type: string
          description: A more descriptive name for the Institution, such as 'Vanderbilt
            University Medical Center'
        organizationTypeEnum:
          $ref: '#/components/schemas/OrganizationType'
        registeredTierMembershipRequirement:
          $ref: '#/components/schemas/InstitutionMembershipRequirement'
        requestAccessUrl:
          type: string
          description: Optional url for institution's handling their own access requests
        institutionalInitialCreditsExpirationBypassed:
          type: boolean
          description: Whether the initial credits expiration has been bypassed
            for all members of this institution
      description: Represents an institution which has been approved to validate researchers
        who wish to use the system. Does not include the sensitive email patterns
        used to validate users.
    InstitutionUserInstructions:
      required:
      - institutionShortName
      - instructions
      type: object
      properties:
        institutionShortName:
          type: string
          description: The short unique name for the Institution used as an identifier,
            such as 'VUMC'.
        instructions:
          type: string
          description: Text to include in an email sent to this Institution's users
            after they are registered.
      description: Institution-specific instructions for users to perform after registration.
    GetInstitutionsResponse:
      required:
      - institutions
      type: object
      properties:
        institutions:
          type: array
          items:
            $ref: '#/components/schemas/Institution'
    GetPublicInstitutionDetailsResponse:
      required:
      - institutions
      type: object
      properties:
        institutions:
          type: array
          items:
            $ref: '#/components/schemas/PublicInstitutionDetails'
    OrganizationType:
      type: string
      description: A categorization of institutions, derived from CAPS requirements
      enum:
      - ACADEMIC_RESEARCH_INSTITUTION
      - INDUSTRY
      - EDUCATIONAL_INSTITUTION
      - HEALTH_CENTER_NON_PROFIT
      - OTHER
    InstitutionMembershipRequirement:
      type: string
      description: Institution email matching requirements for tier access. We can
        match on email DOMAINS or individual email ADDRESSES.  NO_ACCESS indicates
        that the institution does not provide access to the tier at all, and UNINITIALIZED
        is for unsaved institutions in the admin UI.
      enum:
      - DOMAINS
      - ADDRESSES
      - NO_ACCESS
      - UNINITIALIZED
    InstitutionalRole:
      type: string
      description: The union of the roles researchers can have at Institutions of
        all OrganizationTypes, derived from CAPS requirements.
      enum:
      - UNDERGRADUATE
      - TRAINEE
      - FELLOW
      - EARLY_CAREER
      - MID_CAREER
      - LATE_CAREER
      - PRE_DOCTORAL
      - POST_DOCTORAL
      - SENIOR_RESEARCHER
      - TEACHER
      - STUDENT
      - ADMIN
      - PROJECT_PERSONNEL
      - OTHER
      - ASSOCIATE_SCIENTIST
      - MID_CAREER_SCIENTIST
      - SENIOR_SCIENTIST
      - DATA_ANALYST
      - HIGH_SCHOOL_STUDENT
    VerifiedInstitutionalAffiliation:
      required:
      - institutionShortName
      - institutionalRoleEnum
      type: object
      properties:
        institutionShortName:
          type: string
          description: The unique Short Name of the Institution where the user has
            a Verified Affiliation, such as 'VUMC'
        institutionDisplayName:
          type: string
          description: The longer, more descriptive name of the Institution where
            the user has a Verified Affiliation, such as 'Vanderbilt University Medical
            Center'
        institutionRequestAccessUrl:
          type: string
          description: Optional url for institution's handling their own access requests
        institutionalRoleEnum:
          $ref: '#/components/schemas/InstitutionalRole'
        institutionalRoleOtherText:
          type: string
          description: The user's detailed Institutional Role at this Institution,
            as text, if its enumerated type is OTHER
    InstitutionTierConfig:
      required:
      - accessTierShortName
      - membershipRequirement
      type: object
      properties:
        accessTierShortName:
          type: string
          description: The short unique name for the access tier.
        membershipRequirement:
          $ref: '#/components/schemas/InstitutionMembershipRequirement'
        emailDomains:
          type: array
          items:
            type: string
        emailAddresses:
          type: array
          items:
            type: string
      description: Institution-specific access tier membership requirement and configs.
    ExhaustedInitialCreditsEventRequest:
      required:
        - users
      type: object
      properties:
        users:
          type: array
          description: List of User IDs to check for initial credits
          items:
            type: integer
            format: int64
        dbCostByCreator:
          type: object
          properties: { }
          description: |
            A map of the total cost of the user's workspaces in the database, indexed by the user's ID'.
        liveCostByCreator:
          type: object
          properties: { }
          description: |
            A map of the total live cost of the user's workspaces, indexed by the user's ID.
    CheckCreditsExpirationForUserIDsRequest:
      required:
      - userIds
      type: object
      properties:
        userIds:
          type: array
          description: List of User IDs to check for initial free credits expiration
          items:
            type: integer
            format: int64
    WorkspaceAdminView:
      type: object
      properties:
        workspace:
          $ref: '#/components/schemas/Workspace'
        workspaceDatabaseId:
          type: integer
          description: |
            ID used in the AoU RWB workspace table. Useful for DB queries and Action Audit searches in Stackdriver Logging and BigQuery.
          format: int64
        collaborators:
          type: array
          description: List of users who own or collaborate on this workspace.
          items:
            $ref: '#/components/schemas/WorkspaceUserAdminView'
        resources:
          $ref: '#/components/schemas/AdminWorkspaceResources'
        activeStatus:
          $ref: '#/components/schemas/WorkspaceActiveStatus'
      description: Admin-visible metadata about a workspace.
    AdminWorkspaceResources:
      type: object
      properties:
        workspaceObjects:
          $ref: '#/components/schemas/AdminWorkspaceObjectsCounts'
        cloudStorage:
          $ref: '#/components/schemas/AdminWorkspaceCloudStorageCounts'
      description: A summary of application-level resources associated with a workspace.
        Includes data about Cohort Builder objects, analysis runtimes, and cloud-storage
        contents.
    AdminWorkspaceObjectsCounts:
      type: object
      properties:
        cohortCount:
          type: integer
        conceptSetCount:
          type: integer
        datasetCount:
          type: integer
    AdminWorkspaceCloudStorageCounts:
      type: object
      properties:
        storageBucketPath:
          type: string
          description: Full gs:// path to the workspace-associated GCS bucket.
        notebookFileCount:
          type: integer
        nonNotebookFileCount:
          type: integer
        storageBytesUsed:
          type: integer
          format: int64
    CloudStorageTraffic:
      type: object
      properties:
        receivedBytes:
          type: array
          items:
            $ref: '#/components/schemas/TimeSeriesPoint'
    TimeSeriesPoint:
      type: object
      properties:
        timestamp:
          type: integer
          description: Timestamp, in milliseconds since Unix epoch, of the end point
            of the time window covered by this time series point.
          format: int64
        value:
          type: number
          format: double
      description: Represents a floating-point valued time series point.
    TableQuery:
      required:
      - tableName
      type: object
      properties:
        tableName:
          type: string
          description: The name of a table containing a person_id column to retrieve
            data from (e.g. person, observation); should be in the OMOP CDM 5.2 schema.
        columns:
          type: array
          description: An array of columns to retrieve from the table, taken from
            the table specified above. Defaults to all columns.
          items:
            type: string
        filters:
          $ref: '#/components/schemas/ResultFilters'
        conceptSetName:
          type: string
          description: A name of a concept set in the workspace used to filter results;
            results must match one of the concepts in the named concept set. If both
            filters and conceptSetName are specified, results must match both.
        orderBy:
          type: array
          description: An array of columns to sort the resulting data by, taken from
            the table specified above, each one optionally enclosed in "DESCENDING()"
            for descending sort order. Default sort order is "person_id" (in ascending
            order) followed by the ID of the specified table (in ascending order.)
          items:
            type: string
      description: A specification for retrieving data from a single table.
    AnnotationQuery:
      type: object
      properties:
        columns:
          type: array
          description: An array of names of annotations to retrieve about participants,
            or "review_status" for the cohort review status of the participant or
            "person_id" for the ID of the participant. Defaults to "person_id", "review_status",
            and the names of all defined annotations in the cohort review. This is
            only valid in combination with the use of cohortName above. Only data
            for participants in the cohort review will be returned; if no cohort review
            has been created, no results will be returned.
          items:
            type: string
        orderBy:
          type: array
          description: An array of names of annotations, or "review status" or "person_id",
            each one optionally enclosed in "DESCENDING()" for descending sort order.
            Specifies the order that results should be returned. Defaults to "person_id"
            (in ascending order). Annotations referenced in orderBy must also be present
            in columns.
          items:
            type: string
      description: A specification for retrieving annotation values or review statuses
        entered for participants.
    ResultFilters:
      type: object
      properties:
        if_not:
          type: boolean
          description: Set to true if a result matching allOf or anyOf below should
            result in a result *not* being returned.
          default: false
        allOf:
          type: array
          description: A list of result filters. All filters matching means a result
            should be returned (or not returned if "not" is true.)
          items:
            $ref: '#/components/schemas/ResultFilters'
        anyOf:
          type: array
          description: A list of column filters. Any filters matching means a result
            should be returned (or not returned if "not" is true.)
          items:
            $ref: '#/components/schemas/ResultFilters'
        columnFilter:
          $ref: '#/components/schemas/ColumnFilter'
      description: A list of filters applied to the results of a query. Only results
        matching the filter criteria should be returned. Exactly one of "allOf", "anyOf",
        and "columnFilter" should be set.
    ColumnFilter:
      required:
      - columnName
      type: object
      properties:
        columnName:
          type: string
          description: The name of the column to filter on.
        operator:
          $ref: '#/components/schemas/Operator'
        value:
          type: string
          description: A string to use in comparisons (case-sensitive).
        values:
          type: array
          description: An array of strings to use in comparisons (case-sensitive);
            used with the "in" operator.
          items:
            type: string
        valueDate:
          type: string
          description: A date (yyyy-MM-dd) or datetime (yyyy-MM-dd HH:mm:ss zzz) value
            to use in comparisons.
        valueNumber:
          type: number
          description: A number to use in comparisons (either integer or floating
            point.)
        valueNumbers:
          type: array
          description: An array of numbers to use in comparisons (used with the "in"
            operator)
          items:
            type: number
        valueNull:
          type: boolean
          description: Set to true if the column value should be compared to null.
      description: A filter applied to the results of a query, based on a column value
        in a table. Only results matching the filter will be returned. One (and only
        one) of the value columns should be populated. values and valueNumbers should
        only be used in conjunction with the "in" operator.
    CohortStatus:
      type: string
      description: possible values indicating whether participants are in or out of
        the cohort
      enum:
      - EXCLUDED
      - INCLUDED
      - NEEDS_FURTHER_REVIEW
      - NOT_REVIEWED
    Operator:
      type: string
      enum:
      - EQUAL
      - NOT_EQUAL
      - LESS_THAN
      - GREATER_THAN
      - LESS_THAN_OR_EQUAL_TO
      - GREATER_THAN_OR_EQUAL_TO
      - LIKE
      - IN
      - BETWEEN
    StandardConceptFilter:
      type: string
      description: filter on whether standard, non-standard, or all concepts should
        be returned\
      enum:
      - ALL_CONCEPTS
      - STANDARD_CONCEPTS
      - NON_STANDARD_CONCEPTS
      - STANDARD_OR_CODE_ID_MATCH
    MatchType:
      type: string
      description: match column type on concept search
      enum:
      - CONCEPT_CODE
      - CONCEPT_ID
      - CONCEPT_NAME
    Concept:
      required:
      - conceptClassId
      - conceptCode
      - conceptId
      - conceptName
      - countValue
      - domainId
      - prevalence
      - standardConcept
      - vocabularyId
      type: object
      properties:
        conceptId:
          type: integer
          description: ID of the concept
          format: int64
        conceptName:
          type: string
          description: Name of the concept
        domainId:
          type: string
          description: Domain ID of the concept (e.g. Observation)
        vocabularyId:
          type: string
          description: Vocabulary ID of the concept (e.g. SNOMED)
        conceptCode:
          type: string
          description: Code for the concept in its vocabulary (e.g. G8107)
        conceptClassId:
          type: string
          description: Class of the concept (e.g. Ingredient)
        standardConcept:
          type: boolean
          description: True if this is a standard concept, false otherwise
          default: false
        countValue:
          type: integer
          description: Count of participants matching this concept in the CDR
          format: int64
        prevalence:
          type: number
          description: Prevalence among participants in the CDR (a percentage of the
            total)
          format: float
        conceptSynonyms:
          type: array
          description: concept synonym names
          items:
            type: string
      description: A concept describing a type of entity (e.g. measurement, observation,
        procedure.)
    ConceptSynonym:
      required:
      - conceptId
      - conceptSynonymName
      - languageConceptId
      type: object
      properties:
        conceptId:
          type: integer
          description: concept id
          format: int64
        conceptSynonymName:
          type: string
          description: concept synonym name
        languageConceptId:
          type: integer
          description: language concept id
          format: int64
      description: concept synonym
    CreateReviewRequest:
      required:
      - name
      - size
      type: object
      properties:
        size:
          type: integer
          description: A sample size to review
        name:
          type: string
          description: A name for the cohort review
    CohortReview:
      required:
      - cdrVersionId
      - cohortDefinition
      - cohortId
      - cohortName
      - cohortReviewId
      - creationTime
      - matchedParticipantCount
      - reviewStatus
      type: object
      properties:
        cohortReviewId:
          type: integer
          format: int64
        cohortId:
          type: integer
          format: int64
        cdrVersionId:
          type: integer
          format: int64
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during
            a read-modify-write to ensure that the client has not attempted to modify
            a changed resource.
        creationTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        lastModifiedBy:
          type: string
          description: The user who last modified this resource.
        lastModifiedTime:
          type: integer
          description: Milliseconds since the UNIX epoch.
          format: int64
        cohortDefinition:
          type: string
        cohortName:
          type: string
        description:
          type: string
        matchedParticipantCount:
          type: integer
          format: int64
        reviewSize:
          type: integer
          format: int64
        reviewedCount:
          type: integer
          format: int64
        reviewStatus:
          $ref: '#/components/schemas/ReviewStatus'
        participantCohortStatuses:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantCohortStatus'
    CohortReviewWithCountResponse:
      required:
      - cohortReview
      - queryResultSize
      type: object
      properties:
        queryResultSize:
          type: integer
          description: The size of the query results
          format: int64
        cohortReview:
          $ref: '#/components/schemas/CohortReview'
    PageFilterRequest:
      required:
      - page
      - pageSize
      - sortOrder
      type: object
      properties:
        page:
          type: integer
          description: specific page (default is 0)
        pageSize:
          type: integer
          description: page size of results (default is 25)
        sortOrder:
          $ref: '#/components/schemas/SortOrder'
        sortColumn:
          $ref: '#/components/schemas/FilterColumns'
        filters:
          $ref: '#/components/schemas/FilterList'
        domain:
          $ref: '#/components/schemas/Domain'
    FilterColumns:
      type: string
      enum:
      - PARTICIPANTID
      - STATUS
      - GENDER
      - BIRTHDATE
      - RACE
      - ETHNICITY
      - SEXATBIRTH
      - DECEASED
      - START_DATETIME
      - STANDARD_CODE
      - STANDARD_VOCABULARY
      - STANDARD_NAME
      - STANDARD_CONCEPT_ID
      - SOURCE_CODE
      - SOURCE_VOCABULARY
      - SOURCE_NAME
      - SOURCE_CONCEPT_ID
      - DOMAIN
      - AGE_AT_EVENT
      - NUM_MENTIONS
      - FIRST_MENTION
      - LAST_MENTION
      - VISIT_TYPE
      - ROUTE
      - DOSE
      - STRENGTH
      - VALUE_AS_NUMBER
      - UNIT
      - REF_RANGE
      - SURVEY_NAME
      - QUESTION
      - ANSWER
    SortOrder:
      type: string
      enum:
      - asc
      - desc
    FilterList:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Filter'
    Filter:
      required:
      - operator
      - property
      - values
      type: object
      properties:
        property:
          $ref: '#/components/schemas/FilterColumns'
        operator:
          $ref: '#/components/schemas/Operator'
        values:
          type: array
          items:
            type: string
    ParticipantCohortStatus:
      required:
      - participantId
      - status
      type: object
      properties:
        participantId:
          type: integer
          format: int64
        status:
          $ref: '#/components/schemas/CohortStatus'
        genderConceptId:
          type: integer
          format: int64
        gender:
          type: string
        birthDate:
          type: string
        raceConceptId:
          type: integer
          format: int64
        race:
          type: string
        ethnicityConceptId:
          type: integer
          format: int64
        ethnicity:
          type: string
        sexAtBirthConceptId:
          type: integer
          format: int64
        sexAtBirth:
          type: string
        deceased:
          type: boolean
          default: false
    ModifyCohortStatusRequest:
      required:
      - status
      type: object
      properties:
        status:
          $ref: '#/components/schemas/CohortStatus'
    ParticipantChartDataListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantChartData'
    VocabularyListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Vocabulary'
    Vocabulary:
      required:
      - domain
      - type
      - vocabulary
      type: object
      properties:
        type:
          type: string
          description: Source or Standard
        domain:
          type: string
          description: OMOP domain
        vocabulary:
          type: string
          description: Vocabulary
    CohortChartDataListResponse:
      required:
      - count
      - items
      type: object
      properties:
        count:
          type: integer
          description: total count for cohort.
          format: int64
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortChartData'
    ParticipantCohortAnnotation:
      required:
      - cohortAnnotationDefinitionId
      - cohortReviewId
      - participantId
      type: object
      properties:
        annotationId:
          type: integer
          description: participant annotation id.
          format: int64
        cohortAnnotationDefinitionId:
          type: integer
          description: annotation definition id.
          format: int64
        cohortReviewId:
          type: integer
          description: the cohort review id.
          format: int64
        participantId:
          type: integer
          description: the participant id.
          format: int64
        annotationValueString:
          type: string
          description: The Value of the annotation if the AnnotationType is STRING
        annotationValueEnum:
          type: string
          description: The option chosen for the annotation if the AnnotationType
            is ENUM
        annotationValueDate:
          type: string
          description: The Value of the annotation if the AnnotationType is DATE
        annotationValueBoolean:
          type: boolean
          description: The Value of the annotation if the AnnotationType is BOOLEAN
        annotationValueInteger:
          type: integer
          description: The Value of the annotation if the AnnotationType is INTEGER
    ParticipantCohortAnnotationListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantCohortAnnotation'
    ParticipantDataListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/ParticipantData'
    ParticipantDataCountResponse:
      required:
      - count
      type: object
      properties:
        count:
          type: integer
          description: the total count of items.
          format: int64
    ModifyParticipantCohortAnnotationRequest:
      type: object
      properties:
        annotationValueString:
          type: string
          description: The Value of the annotation if the AnnotationType is STRING
        annotationValueEnum:
          type: string
          description: The option chosen for the annotation if the AnnotationType
            is ENUM
        annotationValueDate:
          type: string
          description: The Value of the annotation if the AnnotationType is DATE
        annotationValueBoolean:
          type: boolean
          description: The Value of the annotation if the AnnotationType is BOOLEAN
        annotationValueInteger:
          type: integer
          description: The Value of the annotation if the AnnotationType is INTEGER
    ReviewStatus:
      type: string
      description: possible values indicating whether review has been created
      enum:
      - NONE
      - CREATED
    CohortChartData:
      required:
      - conceptId
      - count
      - name
      type: object
      properties:
        name:
          type: string
          description: the name of this data
        conceptId:
          type: integer
          description: the source concept id for this data
          format: int64
        count:
          type: integer
          description: the count for this data
          format: int64
    ParticipantChartData:
      required:
      - ageAtEvent
      - rank
      - standardName
      - standardVocabulary
      - startDate
      type: object
      properties:
        standardName:
          type: string
          description: the standard name
        standardVocabulary:
          type: string
          description: the standard vocabulary
        startDate:
          type: string
          description: the date of the event
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        rank:
          type: integer
          description: the rank of the data
    ParticipantData:
      required:
      - itemDate
      type: object
      properties:
        itemDate:
          type: string
          description: The date of the event
        domain:
          type: string
          description: the domain of this data.
        standardName:
          type: string
          description: The standard name of this data
        ageAtEvent:
          type: integer
          description: The age at event for the participant
        standardConceptId:
          type: integer
          description: The standard concept id
          format: int64
        sourceConceptId:
          type: integer
          description: The source concept id
          format: int64
        sourceVocabulary:
          type: string
          description: The source vocabulary type of this data
        standardVocabulary:
          type: string
          description: The standard vocabulary of this data
        sourceName:
          type: string
          description: The source name of this data
        sourceCode:
          type: string
          description: The source code of this data
        standardCode:
          type: string
          description: The standard code of this data
        value:
          type: string
          description: The source value of this data
        visitType:
          type: string
          description: The visit type of this data
        numMentions:
          type: string
          description: The number of mentions of this data
        firstMention:
          type: string
          description: The date of first mention of this data
        lastMention:
          type: string
          description: The date of last mention of this data
        unit:
          type: string
          description: The unit of this data
        dose:
          type: string
          description: The quantity of this data
        strength:
          type: string
          description: The strength of this data
        route:
          type: string
          description: The route of this data
        refRange:
          type: string
          description: The reference range of this data
        survey:
          type: string
          description: The name of this survey
        question:
          type: string
          description: a question in this survey
        answer:
          type: string
          description: an answer in this survey
    AnnotationType:
      type: string
      description: possible values representing the type of annotation.
      enum:
      - STRING
      - ENUM
      - DATE
      - BOOLEAN
      - INTEGER
    CohortAnnotationDefinition:
      required:
      - annotationType
      - cohortId
      - columnName
      type: object
      properties:
        cohortAnnotationDefinitionId:
          type: integer
          description: the annotation definition id.
          format: int64
        etag:
          type: string
          description: Entity tag for optimistic concurrency control. To be set during
            a read-modify-write to ensure that the client has not attempted to modify
            a changed resource.
        cohortId:
          type: integer
          description: the cohort id.
          format: int64
        columnName:
          type: string
          description: the name of this annotation.
        annotationType:
          $ref: '#/components/schemas/AnnotationType'
        enumValues:
          type: array
          items:
            type: string
    CohortAnnotationDefinitionListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CohortAnnotationDefinition'
    AgeTypeCountListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/AgeTypeCount'
    AgeTypeCount:
      required:
      - age
      - ageType
      - count
      type: object
      properties:
        ageType:
          type: string
          description: type of age
        age:
          type: integer
          description: age
        count:
          type: integer
          description: count
          format: int64
    CriteriaListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Criteria'
    CriteriaListWithCountResponse:
      required:
      - items
      - totalCount
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Criteria'
        totalCount:
          type: integer
          format: int64
    CriteriaMenuListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaMenu'
    Criteria:
      required:
      - group
      - hasAttributes
      - id
      - name
      - parentId
      - selectable
      - type
      type: object
      properties:
        id:
          type: integer
          description: Primary identifier which is unique within a CDR version. Value
            may not be stable across different CDR versions.
          format: int64
        parentId:
          type: integer
          description: The parent id of the criteria. 0 if this is the root node of
            a criteria tree.
          format: int64
        type:
          type: string
          description: The tree type of this criteria, see TreeType. This will need
            to change to CriteriaType with the new implementation(change type below
            to ref CriteriaType)
        subtype:
          type: string
          description: The subtype of this criteria, see TreeSubType. This will need
            to change to CriteriaSubType with the new implementation(change type below
            to ref CriteriaSubType)
        code:
          type: string
          description: |
            Code that identifies this criteria. In some vocabularies such as ICD9 and ICD10, this code captures the tree hierarchy, e.g. '001.002.003'. Multiple criteria may exist for the same code within a CDR version if a given concept has multiple entries at different locations in the criteria tree (this is common in SNOMED).
            Criteria codes should generally be stable across CDR versions.
        name:
          type: string
          description: description of criteria
        count:
          type: integer
          description: Estimated number of participants in a particular CDR version
            which have a least one event matching this criteria.
          format: int64
        parentCount:
          type: integer
          description: Estimated number of Parents participants in a particular CDR
            version which have a least one event matching this criteria.
          format: int64
        childCount:
          type: integer
          description: Estimated number of Children participants in a particular CDR
            version which have a least one event matching this criteria.
          format: int64
        group:
          type: boolean
          description: specifies if child or parent
          default: false
        selectable:
          type: boolean
          description: Whether or not a client can specify this criteria in a search
            request. Selecting a group implies selecting all criteria contained within
            that group.
          default: false
        conceptId:
          type: integer
          description: |
            The OMOP concept id associated with this criteria. May be null if this criteria does not match an OMOP concept, e.g. for intermediate nodes (groups) in the criteria tree. Concept ids are ids associated with a specific vocabulary item in the concept table and allow you to search for that code in its domain table. This may be a source or standard concept ID, depending on the tree for the criteria.
            Similar to a code, multiple criteria may reference the same concept ID due to multiple occurrences of a concept in the criteria tree. In other cases a criteria may share the concept ID of its parent, e.g. in the PPI tree a question and child answer share a concept id.
            Concept IDs should generally be stable across CDR versions.
          format: int64
        domainId:
          type: string
          description: |
            # TODO: Remove this field. Deprecated. Clue to determine which OMOP tables to search, but these only exist for leaves in the tree. Parents don't have domain ids and concept id will be used in the case that a parent is selectable.
        hasAttributes:
          type: boolean
          description: Whether this criteria has associated attributes which can be
            filtered by value during a search, for example a blood pressure measurement
            criteria might have an associated measurement value attribute.
          default: false
        path:
          type: string
          description: A "." delimited path of all parent criteria IDs. Does not include
            the id for this criteria; root criteria nodes have a null path.
        value:
          type: string
          description: A helper property to fully describe PPI/AGE data. Age holds
            the value of the age and for PPI it holds value as number or value as
            concept id.
        hasHierarchy:
          type: boolean
          description: Whether criteria is linked to a tree.
          default: false
        hasAncestorData:
          type: boolean
          description: Whether criteria needs lookup in the criteria_ancestor table.
          default: false
        standard:
          type: boolean
          description: Reveals if this criteria is standard or source.
          default: false
    CriteriaMenu:
      required:
      - category
      - domainId
      - group
      - id
      - name
      - parentId
      - sortOrder
      type: object
      properties:
        id:
          type: integer
          description: The unique identifier for the menu item
          format: int64
        parentId:
          type: integer
          description: The unique identifier for the menu parent
          format: int64
        category:
          type: string
          description: The category for this menu item(Program Data or Domains)
        domainId:
          type: string
          description: The domain for this menu item
        type:
          type: string
          description: The type for this menu item
        name:
          type: string
          description: The name
        group:
          type: boolean
          description: Is this a parent
          default: false
        sortOrder:
          type: integer
          description: The order
          format: int64
    CriteriaAttributeListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/CriteriaAttribute'
    CriteriaAttribute:
      required:
      - conceptName
      - estCount
      - id
      - type
      - valueAsConceptId
      type: object
      properties:
        id:
          type: integer
          description: id of the criteria
          format: int64
        valueAsConceptId:
          type: integer
          description: categorical concept id
          format: int64
        conceptName:
          type: string
          description: name of concept
        type:
          type: string
          description: numerical or categorical
        estCount:
          type: string
          description: possible count
    SurveyVersionListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/SurveyVersion'
    SurveyVersion:
      required:
      - displayName
      - itemCount
      - surveyVersionConceptId
      type: object
      properties:
        surveyVersionConceptId:
          type: integer
          description: unique concept id of the cope survey
          format: int64
        displayName:
          type: string
          description: name of the version
        itemCount:
          type: integer
          description: item count
          format: int64
    CriteriaSearchRequest:
      required:
      - domain
      - standard
      - term
      type: object
      properties:
        domain:
          type: string
          description: The omop domain that this criteria belongs to
        standard:
          type: boolean
          description: flag that determines standard or source
          default: false
        term:
          type: string
          description: the term to search for
        surveyName:
          type: string
          description: name for the survey to search for
        removeDrugBrand:
          type: boolean
          description: True - remove brand names from results
          default: false
        type:
          type: string
          description: the type of the criteria to search for
    CohortDefinition:
      required:
      - dataFilters
      - excludes
      - includes
      type: object
      properties:
        includes:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroup'
        excludes:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroup'
        dataFilters:
          type: array
          items:
            type: string
      description: The CohortDefinition describes the state of the Cohort Builder
        at any given moment. It contains two keys, `include` and `exclude`, each of
        which specifies an array of SearchGroups which are `AND`ed together, and which
        collectively specify which subjects to include or exclude from the cohort.
      example:
        typical:
          include:
          - - type: ICD9
              searchParameters:
              - value: Foo
                domainId: Bar
              - value: C
            - type: ICD9
              searchParameters:
              - value: Baz
          - - type: ICD10
              searchParameters:
              - value: Baz
                domainId: Bar
              modifiers: []
          exclude: []
        minimum:
          include:
          - - type: A Crit Type
              searchParameters:
              - value: A value
    ConceptsRequest:
      type: object
      properties:
        conceptKeys:
          type: array
          items:
            type: string
      description: The ConceptsRequest represents a list of conceptIds or conceptCodes
        that are used to lookup concepts. In general conceptId is numeric while concept
        code is alphanumeric. Lookup is done matching on concept_ids first and then
        if no concepts are found lookup uses concept_codes.
    CriteriaRequest:
      type: object
      properties:
        sourceConceptIds:
          type: array
          items:
            type: integer
            format: int64
        standardConceptIds:
          type: array
          items:
            type: integer
            format: int64
      description: The CriteriaRequest represents any domain specific conceptIds grouped
        by Source/standard flags. This request has been created specifically for use
        within edit function of Cohort Definitions, since Cohort Definitions are not
        able to save criteria id Because this varies from CDR to CDR.
    SearchGroup:
      required:
      - items
      - temporal
      type: object
      properties:
        id:
          type: string
          description: Unique within the cohort definition
        name:
          type: string
          description: optional custom name set by user
        temporal:
          type: boolean
          description: indicates if this search group relates to time
          default: false
        mention:
          $ref: '#/components/schemas/TemporalMention'
        time:
          $ref: '#/components/schemas/TemporalTime'
        timeValue:
          type: integer
          description: time value between temporal items
          format: int64
        timeFrame:
          type: string
          description: time increments(Day, Month or Year)
        items:
          type: array
          items:
            $ref: '#/components/schemas/SearchGroupItem'
      description: A SearchGroup is a container for groups of criteria which are `OR`ed
        together.
    SearchGroupItem:
      required:
      - modifiers
      - searchParameters
      - type
      type: object
      properties:
        id:
          type: string
          description: Unique within the cohort definition
        name:
          type: string
          description: optional custom name set by user
        type:
          type: string
          description: type of criteria
        temporalGroup:
          type: integer
          description: temporal group that this item belongs to
        searchParameters:
          type: array
          description: values that help search for subjects
          items:
            $ref: '#/components/schemas/SearchParameter'
        modifiers:
          type: array
          description: |
            Predicates to apply to the search parameters. Aggregate modifiers (i.e. NUM_OF_OCCURRENCES) are applied independently to each SearchParameter and furthermore, are applied independently to any group elements within those SearchParameters.
            Consider the following example query scenario.
            Example criteria tree: - parent
              - child1
              - child2

            Curated dataset contains 1 participant with 1 event each of concepts child1 and child2. Search request is made on "parent", with a modifier of {type: NUM_OF_OCCURRENCES, operands: [2]}.
            This does not match - the participant would need to have at least 2 events of type child1 and/or of child2 and/or of parent (in the event that "parent" corresponds to a real concept in the data).
            Additionally, aggregate modifiers are applied secondarily to other modifiers. For example, combining the AGE_AT_EVENT with NUM_OF_OCCURRENCES - first we filter down all events by the age predicate, then we count occurrences.
          items:
            $ref: '#/components/schemas/Modifier'
      description: A SearchGroupItem is the "line item" of the Cohort Builder.  It
        specifies a set of criteria of a given kind, possibly alongside a set of modifiers,
        the results of which are `OR`ed together with the other criteria in the group.
      example:
        type: ICD9
        searchParameters:
        - value: E9293
          domainId: Condition
        - value: E979-E979.9
        modifiers:
        - name: age_at_event
          operator: GTE >=
          operands:
          - Arg1
          - Arg2
    SearchParameter:
      required:
      - ancestorData
      - attributes
      - domain
      - group
      - name
      - parameterId
      - standard
      - type
      type: object
      properties:
        parameterId:
          type: string
          description: Unique within the cohort definition
        name:
          type: string
          description: The name of the generating Criterion
        domain:
          type: string
          description: The omop domain that this criteria belongs to
        type:
          type: string
          description: The type of the generating Criterion
        subtype:
          type: string
          description: The subtype of the generating Criterion
        group:
          type: boolean
          description: Specifies if the generating Criterion is a leaf or node in
            its Criteria tree
          default: false
        ancestorData:
          type: boolean
          description: flag that determines if concept ids need to be looked up in
            the ancestor table
          default: false
        standard:
          type: boolean
          description: flag that determines standard or source
          default: false
        conceptId:
          type: integer
          description: The concept id that maps to concept table, if any.
          format: int64
        variantId:
          type: string
          description: The variant id of SNP Indel Variants.
        variantFilter:
          $ref: '#/components/schemas/VariantFilter'
        attributes:
          type: array
          description: |
            Attributes are extra inputs provided by users through the UX. Currently used by Demographics(Age), Measurements(Body Height, Weight.. etc) and Physical Measurements(Blood Pressure, Body Weight.. etc). Measurements and Physical Measurements have overlap in many areas such as body weight, but the difference is standard(measurements) and source(physical measurements).

             Example demo age search parameter:
             {
               "type": "DEMO",
               "searchParameters": [
                 {
                   "type": "DEMO",
                   "subtype": "AGE",
                   "group": false,
                   "attributes": [{"name": "Age", "operator": "BETWEEN", "operands": [23, 31]}]
                 }
               ],
               "modifiers": []
             }

             Example physical measurement blood pressure(Hypotensive (Systolic <= 90 / Diastolic <= 60))
             {
               "type": "PM",
               "searchParameters": [
                 {
                   "type": "PM",
                   "subtype": "BP",
                   "group": false,
                   "attributes": [
                     {
                       "conceptId": 903118,
                       "name": "Systolic",
                       "operands": ["90"],
                       "operator":"LESS_THAN_OR_EQUAL_TO"
                     },
                     {
                       "conceptId": 903115,
                       "name": "Diastolic",
                       "operands": ["60"],
                        "operator": "LESS_THAN_OR_EQUAL_TO"
                      }
                    ]
                  }
                ],
                "modifiers": []
              }
          items:
            $ref: '#/components/schemas/Attribute'
      example:
        leafExample:
          value: E9293
          subtype: AGE
          domainId: Condition
        parentExample:
          value: E979-E979.9
          subtype: BP_EHR
    Attribute:
      required:
      - name
      - operands
      type: object
      properties:
        name:
          $ref: '#/components/schemas/AttrName'
        operator:
          $ref: '#/components/schemas/Operator'
        operands:
          type: array
          items:
            type: string
        conceptId:
          type: integer
          description: The concept id that maps to concept table.
          format: int64
      example:
        singleValued:
          operator: GTE
          operands:
          - "20"
        multiValued:
          operator: BETWEEN
          operands:
          - "18"
          - "35"
    Modifier:
      required:
      - name
      - operands
      - operator
      type: object
      properties:
        name:
          $ref: '#/components/schemas/ModifierType'
        operator:
          $ref: '#/components/schemas/Operator'
        operands:
          type: array
          items:
            type: string
      example:
        singleValued:
          name: AGE_AT_EVENT
          operator: GREATER_THAN_OR_EQUAL_TO
          operands:
          - "20"
    ModifierType:
      type: string
      description: possible types of modifiers
      enum:
      - AGE_AT_EVENT
      - NUM_OF_OCCURRENCES
      - EVENT_DATE
      - ENCOUNTERS
      - CATI
    CriteriaType:
      type: string
      description: possible criteria types
      enum:
      - AGE
      - ATC
      - BRAND
      - CPT4
      - DECEASED
      - ETHNICITY
      - GENDER
      - HCPCS
      - ICD10CM
      - ICD10PCS
      - ICD9CM
      - ICD9Proc
      - LOINC
      - PPI
      - RACE
      - RXNORM
      - SEX
      - SNOMED
      - VISIT
      - NONE
      - HAS_EHR_DATA
      - SELF_REPORTED_CATEGORY
    CriteriaSubType:
      type: string
      description: possible criteria types
      enum:
      - ANSWER
      - BMI
      - BP
      - CLIN
      - HC
      - HEIGHT
      - HR
      - HR-DETAIL
      - HR-IRR
      - HR-NOIRR
      - LAB
      - PREG
      - QUESTION
      - SURVEY
      - WC
      - WEIGHT
      - WHEEL
    TemporalMention:
      type: string
      description: Mentions refer to occurrences of entry date per person
      enum:
      - ANY_MENTION
      - FIRST_MENTION
      - LAST_MENTION
    TemporalTime:
      type: string
      description: time refers to the amount of time in reference to temporal mentions
      enum:
      - DURING_SAME_ENCOUNTER_AS
      - X_DAYS_BEFORE
      - X_DAYS_AFTER
      - WITHIN_X_DAYS_OF
    AttrName:
      type: string
      description: Name that descibes the type of attribute
      enum:
      - ANY
      - NUM
      - CAT
      - AGE
      - AGE_AT_CONSENT
      - AGE_AT_CDR
      - SURVEY_VERSION_CONCEPT_ID
      - PERSONAL_FAMILY_HEALTH_HISTORY
    AgeType:
      type: string
      description: Different age types
      enum:
      - AGE
      - AGE_AT_CONSENT
      - AGE_AT_CDR
    GenderSexRaceOrEthType:
      type: string
      description: represents gender, sex at birth, race or ethnicity
      enum:
      - GENDER
      - SEX_AT_BIRTH
      - RACE
      - ETHNICITY
      - SELF_REPORTED_CATEGORY
    DemoChartInfoListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/DemoChartInfo'
    DemoChartInfo:
      required:
      - ageRange
      - count
      - name
      type: object
      properties:
        name:
          type: string
          description: gender, sex at birth, race, ethnicity or self reported category of subject
        ageRange:
          type: string
          description: age range of subject
        count:
          type: integer
          description: number of subjects
          format: int64
    EthnicityInfoListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/EthnicityInfo'
    EthnicityInfo:
      required:
      - count
      - ethnicity
      type: object
      properties:
        ethnicity:
          type: string
          description: ethnicity of subject
        count:
          type: integer
          description: number of subjects
          format: int64
    ParticipantDemographics:
      required:
      - ethnicityList
      - genderList
      - raceList
      - sexAtBirthList
      type: object
      properties:
        genderList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
        raceList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
        ethnicityList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
        sexAtBirthList:
          type: array
          items:
            $ref: '#/components/schemas/ConceptIdName'
    ConceptIdName:
      required:
      - conceptId
      - conceptName
      type: object
      properties:
        conceptId:
          type: integer
          format: int64
        conceptName:
          type: string
    BaseVariantFilter:
      type: object
      properties:
        geneList:
          type: array
          description: List of string gene names
          items:
            type: string
        consequenceList:
          type: array
          description: List of string consequence names
          items:
            type: string
        clinicalSignificanceList:
          type: array
          description: List of string clinical significance names
          items:
            type: string
        countMin:
          type: integer
          format: int64
          description: Allele count min
        countMax:
          type: integer
          format: int64
          description: Allele count max
        numberMin:
          type: integer
          format: int64
          description: Allele number min
        numberMax:
          type: integer
          format: int64
          description: Allele number max
        frequencyMin:
          type: number
          description: Allele frequency min(floating point)
        frequencyMax:
          type: number
          description: Allele number max(floating point)
        participantCountRange:
          $ref: '#/components/schemas/ParticipantCountFilter'
        exclusionList:
          type: array
          description: List of vids to exclude from filter
          items:
            type: string
    VariantFilter:
      allOf:
        - $ref: '#/components/schemas/BaseVariantFilter'
        - type: object
          required:
            - searchTerm
          properties:
            searchTerm:
              type: string
              description: The term used to search variants.
    VariantFilterRequest:
      allOf:
        - $ref: '#/components/schemas/VariantFilter'
        - type: object
          properties:
            pageToken:
              type: string
              description: Used for retrieving additional pages of results.
            pageSize:
              type: integer
              description: page size of results (default is 25)
            sortBy:
              type: string
              description: sort column by
    ParticipantCountFilter:
      required:
        - operator
        - operands
      type: object
      properties:
        operator:
          $ref: '#/components/schemas/Operator'
        operands:
          type: array
          items:
            type: integer
    VariantFilterResponse:
      allOf:
        - $ref: '#/components/schemas/BaseVariantFilter'
        - type: object
          properties:
            sortByList:
              type: array
              description: List of string column names
              items:
                type: string
    VariantListResponse:
      required:
      - items
      type: object
      properties:
        items:
          type: array
          items:
            $ref: '#/components/schemas/Variant'
        nextPageToken:
          type: string
          description: |
            If present, this token can be provided to retrieve the next page of results. If null or empty, there are no further pages in the result stream.
        totalSize:
          type: integer
          description: Total size of the result set.
    VariantFilterInfoResponse:
      required:
        - vidsCount
        - participantCount
        - lessThanOrEqualToFiveThousand
        - overFiveThousand
        - overTenThousand
        - overHundredThousand
        - overTwoHundredThousand
      type: object
      properties:
        vidsCount:
          type: integer
          format: int64
          description: Total vids count for the VariantFilter.
        participantCount:
          type: integer
          format: int64
          description: Total participant count for the VariantFilter.
        lessThanOrEqualToFiveThousand:
          type: integer
          format: int64
          description: Total vids count of variants found in less than or equal to 5k of participants.
        overFiveThousand:
          type: integer
          format: int64
          description: Total vids count of variants found in over 5k of participants.
        overTenThousand:
          type: integer
          format: int64
          description: Total vids count of variants found in over 10k of participants.
        overHundredThousand:
          type: integer
          format: int64
          description: Total vids count of variants found in over 100k of participants.
        overTwoHundredThousand:
          type: integer
          format: int64
          description: Total vids count of variants found in over 200k of participants.
    Variant:
      required:
      - participantCount
      - vid
      type: object
      properties:
        vid:
          type: string
          description: Primary identifier of a variant.
        gene:
          type: string
          description: Gene name.
        consequence:
          type: string
        proteinChange:
          type: string
        clinVarSignificance:
          type: string
        alleleCount:
          type: integer
          format: int64
        alleleNumber:
          type: integer
          format: int64
        alleleFrequency:
          type: number
          format: double
        participantCount:
          type: integer
          format: int64
    UserIdList:
      type: array
      items:
        type: integer
        format: int64
    WorkspaceNamespaceList:
      type: array
      items:
        type: string
    ProcessEgressEventRequest:
      required:
      - eventId
      type: object
      properties:
        eventId:
          type: integer
          description: Egress event ID to be processed
          format: int64
        isVwbEgressEvent:
          type: boolean
          description: Is this a VWB egress event
          default: false
    DeleteTestUserWorkspacesRequest:
      type: array
      items:
        $ref: '#/components/schemas/TestUserWorkspace'
    DeleteTestUserRawlsWorkspacesRequest:
      type: array
      items:
        $ref: '#/components/schemas/TestUserRawlsWorkspace'
    TestUserWorkspace:
      required:
      - username
      - namespace
      - terraName
      type: object
      properties:
        username:
          type: string
          description: Test username (email address including GSuite)
        namespace:
          type: string
          description: Workspace Namespace
        terraName:
          type: string
          description: The name of the Workspace in Terra
    TestUserRawlsWorkspace:
      required:
      - username
      - namespace
      - googleProject
      - terraName
      type: object
      properties:
        username:
          type: string
          description: Test username (email address including GSuite)
        namespace:
          type: string
          description: Workspace Namespace
        googleProject:
          type: string
          description: Workspace Google Project
        terraName:
          type: string
          description: The name of the Workspace in Terra
    CreateWorkspaceTaskRequest:
      required:
      - operationId
      - workspace
      type: object
      properties:
        operationId:
          type: integer
          description: Workspace operation ID
          format: int64
        workspace:
          $ref: '#/components/schemas/Workspace'
    DuplicateWorkspaceTaskRequest:
      required:
      - fromWorkspaceFirecloudName
      - fromWorkspaceNamespace
      - operationId
      - workspace
      type: object
      properties:
        operationId:
          type: integer
          description: Workspace operation ID
          format: int64
        fromWorkspaceNamespace:
          type: string
          description: Namespace of the From-Workspace
        fromWorkspaceFirecloudName:
          type: string
          description: Firecloud Name of the From-Workspace
        shouldDuplicateRoles:
          type: boolean
          description: Should the duplicated workspace also duplicate the roles of
            the source
        workspace:
          $ref: '#/components/schemas/Workspace'
    WorkspaceAuditLogQueryResponse:
      required:
      - logEntries
      - query
      - workspaceDatabaseId
      type: object
      properties:
        actions:
          type: array
          description: Re-constructed objects for each composite action in the query
            results.
          items:
            $ref: '#/components/schemas/AuditAction'
        logEntries:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
        query:
          type: string
          description: Copy of the query used in BigQuery to assist in further exploration
            or debugging.
        workspaceDatabaseId:
          type: integer
          description: |
            ID in the MySQL database and BigQuery Audit Database for the workspace queried.
          format: int64
      description: |
        Represents the results of a query into the audit dataset in BigQuery without filtering or transformation.
    UserAuditLogQueryResponse:
      required:
      - actions
      - logEntries
      - query
      - userDatabaseId
      type: object
      properties:
        actions:
          type: array
          description: Re-constructed objects for each composite action in the query
            results.
          items:
            $ref: '#/components/schemas/AuditAction'
        logEntries:
          type: array
          items:
            $ref: '#/components/schemas/AuditLogEntry'
        query:
          type: string
          description: Copy of the query used in BigQuery to assist in further exploration
            or debugging.
        userDatabaseId:
          type: integer
          description: |
            ID in the MySQL database and BigQuery Audit Database for the user queried.
          format: int64
      description: |
        Represents the results of a query into the audit dataset in BigQuery without filtering or transformation.
    AuditLogEntry:
      type: object
      properties:
        actionId:
          type: string
          description: Unique ID for this action. Used for grouping similar events
            under a single action, though in this representation we're returning a
            straight list of rows. This is technically a UUID, but this may change
            in the future (to a shorter random string), so we only type it as a String.
        actionType:
          type: string
          description: |
            Defines what action is taking place in this event. (There can be several ACTION_TYPEs in a single Action assigned to different events. String representation of the ActionType enum (not generated).
        agentId:
          type: integer
          description: |
            ID for the Agent (typically a User). If there's a SQL table for this agent type, this this is the PK for that table (e.g. user_id).
          format: int64
        agentType:
          type: string
          description: |
            A member of the org.pmiops.workbench.actionaudit.AgentType enum (not generated). Since this is typed as a string in BigQuery (and not constrained to that type), we don't try to narrow the type in the admin API.
        agentUsername:
          type: string
          description: |
            Username of the user or administrator taking the action. This is the agent_email column in BigQuery.
          format: email
        eventTime:
          type: integer
          description: |
            Timestamp recorded at time of the event. Called timestamp in the BigQuery table. Epoch millis.
          format: int64
        newValue:
          type: string
          description: Value of the target property (if any) after the event.
        previousValue:
          type: string
          description: |
            Value of the target property at the instant of this event beginning. prev_value in BigQuery.
        targetId:
          type: integer
          description: |
            Database ID of the corresponding table for the target entity.
          format: int64
        targetProperty:
          type: string
          description: |
            Property on the target entity affected by this event. One of several internal enums such as WorkspaceTargetProperty.
        targetType:
          type: string
          description: |
            Type of target. Described by the enum TargetType (which is not generated). Left as string since BigQuery doesn't enforce the enum membership.
      description: |
        Representation of the BigQuery Audit Log entry, post-translation from Stackdriver logging. All fields are treated as optional here, as there are no non-null constraints in the BigQuery dataset.
        It's possible that due to some error now or in the past that some columns might not match their expected values, nothing in this type definition is stricter than the BigQuery schema.
    AuditAction:
      type: object
      properties:
        actionId:
          type: string
          description: Unique ID for this action. Used for grouping similar events
            under a single action, though in this representation we're returning a
            straight list of rows. This is technically a UUID, but this may change
            in the future (to a shorter random string), so we only type it as a String.
        actionTime:
          type: integer
          description: Time of the earliest event (row) for this action. It's assumed
            that all rows in an action occur at the same time. Epoch millis.
          format: int64
        eventBundles:
          type: array
          description: |
            Within an action there might be sub-actions, or event bundles, that describe effects on different targets, for example when sharing a workspace with other users.
          items:
            $ref: '#/components/schemas/AuditEventBundle'
      description: |
        A user- or administrator-visible system action in the audit log. Becasue a single action taken may have effects on more than on target, each action may contain multiple agents, targets, and action types.
    AuditEventBundle:
      type: object
      properties:
        header:
          $ref: '#/components/schemas/AuditEventBundleHeader'
        propertyChanges:
          type: array
          description: |
            List of property changes corresponding to this event bundle. For example, with a workspace create event, there may be many field changed from null to their initial values.
          items:
            $ref: '#/components/schemas/AuditTargetPropertyChange'
      description: |
        Collection of an AuditAction's sub-actions. Useful as a map key, plus it contains information about the agent, target, and action type (of which there can be multiple per action). Additionally, any property changes are coalesced into an array under the propertyChanges property.
    AuditEventBundleHeader:
      type: object
      properties:
        actionType:
          type: string
        agent:
          $ref: '#/components/schemas/AuditAgent'
        target:
          $ref: '#/components/schemas/AuditTarget'
      description: |
        Unique header for this event bundle within the parent action. Consists of agent, target, and action type information. This tuple is used internally to filter the rows of each action.
    AuditAgent:
      type: object
      properties:
        agentId:
          type: integer
          format: int64
        agentType:
          type: string
        agentUsername:
          type: string
      description: |
        Composite object containing audited agent information. See AuditLogEntry for individual fields.
    AuditTarget:
      type: object
      properties:
        targetId:
          type: integer
          format: int64
        targetType:
          type: string
      description: |
        Composite object containing audited target information. See AuditLogEntry for individual fields.
    AuditTargetPropertyChange:
      type: object
      properties:
        targetProperty:
          type: string
        previousValue:
          type: string
        newValue:
          type: string
      description: |
        Composite object containing audited target property changes. See AuditLogEntry for individual fields.
    WorkspaceUserAdminView:
      required:
      - role
      - userDatabaseId
      - userModel
      type: object
      properties:
        userModel:
          $ref: '#/components/schemas/User'
        role:
          $ref: '#/components/schemas/WorkspaceAccessLevel'
        userDatabaseId:
          type: integer
          description: |
            user_id value in the user table in the MySQL database. Useful for DB queries and Action Audit searches in Stackdriver Logging and BigQuery.
          format: int64
        userAccountCreatedTime:
          type: string
          description: Datetime at creation of this user's accont
          format: date-time
    PublishWorkspaceRequest:
      required:
        - category
      type: object
      properties:
        category:
          $ref: '#/components/schemas/FeaturedWorkspaceCategory'
          description: The name of the category to which the workspace should be published
    AccountPropertyUpdate:
      required:
      - accessBypassRequests
      - username
      type: object
      properties:
        username:
          type: string
          description: The full system-assigned ID of a user, including email domain
        freeCreditsLimit:
          type: number
          description: When set, overrides the default free credits dollar limit for
            this user.
          format: double
        contactEmail:
          type: string
          description: When set, replaces the user's contact email.  Must validate
            against the user's Institutional Affiliation, if one exists.
        affiliation:
          $ref: '#/components/schemas/VerifiedInstitutionalAffiliation'
        accessBypassRequests:
          type: array
          description: Updates the user's bypass status for the given access modules.
          items:
            $ref: '#/components/schemas/AccessBypassRequest'
        accountDisabledStatus:
          $ref: '#/components/schemas/AccountDisabledStatus'
        initialCreditsExpirationBypassed:
          type: boolean
          description: When set to true, the user will not be required to spend their
            initial credits within the expiration period.
      description: |
        A group of changes an admin can make to a user in the Edit Information card of the individual-user admin page. Updates to the contact email or the institutional affiliation will be rejected if they do not validate.
    AccessReason:
      type: object
      properties:
        reason:
          type: string
          description: The administrative purpose for accessing this notebook
    AdminLockingRequest:
      required:
        - requestDateInMillis
        - requestReason
      type: object
      properties:
        requestReason:
          type: string
        requestDateInMillis:
          type: integer
          format: int64
    AuthDomainCreatedResponse:
      required:
      - authDomainName
      - groupEmail
      type: object
      properties:
        authDomainName:
          type: string
          description: The name of the created Auth Domain, as supplied by the caller
        groupEmail:
          type: string
          description: The email address associated with the Terra Group created to
            serve as this Auth Domain
    NotebookRename:
      type: object
      properties:
        name:
          type: string
        newName:
          type: string
    ReportingBase:
      type: object
      description: Base class for all reporting objects, to enable generics.
    ReportingUser:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        accessTierShortNames:
          type: string
          description: Short names of access tiers available to the user, comma-delimited
            if multiple.
        areaOfResearch:
          type: string
          description: ""
        complianceTrainingBypassTime:
          type: string
          description: |-
            Time Compliance Training administratively bypassed, or null if this requirement
            was never bypassed for this user.
          format: date-time
        complianceTrainingCompletionTime:
          type: string
          description: Time Compliance Training completed, or null if never completed.
          format: date-time
        contactEmail:
          type: string
          description: User's external email address on file.
        creationTime:
          type: string
          description: Timestamp of account creation.
          format: date-time
        duccBypassTime:
          type: string
          description: |-
            Time an admin bypassed the DUCC requirement for this user, or null if that has not happened.
            This value is reset to null if a user's bypassed status is revoked.
          format: date-time
        duccCompletionTime:
          type: string
          description: Time user last completed DUCC
          format: date-time
        duccSignedVersion:
          type: integer
          description: Version of DUCC last signed by this user.
          format: int32
        demographicSurveyCompletionTime:
          type: string
          description: Timestamp for completion of Demographic Survey (if completed).
          format: date-time
        disabled:
          type: boolean
          description: If true, this account has been disabled by an administrator
            (or potentially an automatic process).
        eraCommonsBypassTime:
          type: string
          description: Time an administrator bypassed the ERA Commons requirement
            for this user.
          format: date-time
        eraCommonsCompletionTime:
          type: string
          description: Time user completed ERA Commons account link.
          format: date-time
        familyName:
          type: string
          description: User last name (family name).
        firstRegistrationCompletionTime:
          type: string
          description: Time user first completed registration.
          format: date-time
        registeredTierFirstEnabledTime:
          type: string
          description: |-
            The time at which this user's registered tier access was first granted, if ever.
            Note: expiration of access does not affect this field.
          format: date-time
        controlledTierFirstEnabledTime:
          type: string
          description: |-
            The time at which this user's controlled tier access was first granted, if ever.
            Note: expiration of access does not affect this field.
          format: date-time
        firstSignInTime:
          type: string
          description: Time user first signed into the Workbench with a GSuite account.
          format: date-time
        freeTierCreditsLimitDollarsOverride:
          type: number
          description: Override value for the default free tier spending limit (USD).
          format: double
        givenName:
          type: string
          description: User first name (given name).
        lastModifiedTime:
          type: string
          description: Time of last modification to this user account.
          format: date-time
        professionalUrl:
          type: string
          description: User's URL at primary place of work.
        identityBypassTime:
          type: string
          description: Time an administrator bypassed the identity requirement for
            this user.
          format: date-time
        identityCompletionTime:
          type: string
          description: Time user completed the identity requirement.
          format: date-time
        identityVerificationSystem:
          type: string
          description: The system that the user used to complete identity verification.
        twoFactorAuthBypassTime:
          type: string
          description: |-
            Time an administrator bypassed the two-factor authentication requirement for this user,
            or null if it has not been bypassed.
          format: date-time
        twoFactorAuthCompletionTime:
          type: string
          description: Time user registered a two-factor authentication method satisfying
            the 2FA requirement.
          format: date-time
        userId:
          type: integer
          description: |-
            Unique integer ID for this user, as assigned in the main Application DB. Serves as a pseudo-
            primary key in this table when combined with a snapshot_timestamp. BigQuery doesn't enforce
            this uniqueness, though.
          format: int64
        username:
          type: string
          description: |-
            User's GSuite username, including appropriate domain for this environment. Uniquely describes a
            user account (but not constrained to be unique by BigQuery).
        institutionId:
          type: integer
          description: |-
            Foreign key into institution table. Each user is only affiliated
            with a single institution.
          format: int64
        institutionalRoleEnum:
          $ref: '#/components/schemas/InstitutionalRole'
        institutionalRoleOtherText:
          type: string
          description: |-
            If the institutional_role_enum is "other", custom description
            of this user's role in the institution.
        ethnicity:
          $ref: '#/components/schemas/Ethnicity'
        identifiesAsLgbtq:
          type: boolean
          description: User-reported identities as lgbtq information
        lgbtqIdentity:
          type: string
          description: User-reported lgbtqIdentity information
        yearOfBirth:
          type: number
          description: User-reported yearOfBirth information
        highestEducation:
          $ref: '#/components/schemas/Education'
        disability:
          $ref: '#/components/schemas/Disability'
        degrees:
          type: string
          description: User-reported degrees, comma-delimited if multiple answers
            were provided.
        genderIdentities:
          type: string
          description: User-reported genderIdentity information, comma-delimited if
            multiple answers were provided.
        sexesAtBirth:
          type: string
          description: User-reported sexAtBirth information, comma-delimited if multiple
            answers were provided.
        races:
          type: string
          description: User-reported races information, comma-delimited if multiple
            answers were provided.
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-09-30T16:18:29-04:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingWorkspace:
      allOf:
      - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        accessTierShortName:
          type: string
          description: a brief string identifying the access tier of this workspace,
            e.g. 'registered'
        billingAccountType:
          $ref: '#/components/schemas/BillingAccountType'
        billingStatus:
          $ref: '#/components/schemas/BillingStatus'
        cdrVersionId:
          type: integer
          description: Foreign key into CDR table.
          format: int64
        creationTime:
          type: string
          description: Time workspace was initially created.
          format: date-time
        creatorId:
          type: integer
          description: User ID of user who initially created this workspace.
          format: int64
        disseminateResearchOther:
          type: string
          description: Description of user-defined research dissemination option (when
            "Other" is selected).
        featuredWorkspaceCategory:
          type: string
          description: If the workspace is featured or a community workspace, this is its category.
            See FeaturedWorkspaceCategory for the available options.
        lastModifiedTime:
          type: string
          description: |-
            Last time a modification was made to this workspace, with  certain exceptions. In general,
            only changes that should alter sort order in the Recent Workspaces UI trigger an update
            to the last modified time.
          format: date-time
        name:
          type: string
          description: User-defined name for this workspace. Human-readable.
        needsRpReviewPrompt:
          type: integer
          description: ""
          format: int32
        rpAdditionalNotes:
          type: string
          description: Research purpose additional notes input.
        rpAncestry:
          type: boolean
          description: If true, user has reported this workspace will study ancestry.
        rpAnticipatedFindings:
          type: string
          description: |-
            Answer to question: "What are the anticipated findings from the study?
            How would your findings contribute to the body of scientific knowledge in
            the field?" 1000 character limit (applied client-side).
        rpApproved:
          type: boolean
          description: |-
            Status of the most recent Request for Review of Research Purpose
            Description for this workspace.
            If true, this workspace has been approved  by the Resource Access
            Board. If false, it was rejected. If null, the workspace has not
            been adjudicated. If rp_review_requested is true and rp_approved is
            null, the workspace has a review pending.
        rpCommercialPurpose:
          type: boolean
          description: If true, this workspace and research have commercial goals.
        rpControlSet:
          type: boolean
          description: |-
            Research Control selected. All of Us data will be used as a reference or control
            dataset for comparison with another dataset from a different resource (e.g.
            Case-control studies).
        rpDiseaseFocusedResearch:
          type: boolean
          description: |-
            Disease-focused research: The primary purpose of the research is to learn more about
            a particular disease or disorder (for example, type 2 diabetes), a trait (for example,
            blood pressure), or a set of related conditions (for example, autoimmune diseases,
            psychiatric disorders).
        rpDiseaseOfFocus:
          type: string
          description: "For workspaces that include Disease-focused Research, the\
            \ user-supplied name of the \ndisease of focus (in the Name of Disease\
            \ field)."
        rpDrugDevelopment:
          type: boolean
          description: |-
            Drug/Therapeutics Development Research selected. Primary focus of the research
            is drug/therapeutics development. The data will be used to understand treatment-gene
            interactions or treatment outcomes relevant to the therapeutic(s) of interest.
        rpEducational:
          type: boolean
          description: |-
            Educational Purpose: The data will be used for education purposes (e.g. for a college
            research methods course, to educate students on population-based research approaches).
        rpEthics:
          type: boolean
          description: |-
            Ethical, Legal, and Social Implications (ELSI) Research: this
            research focuses on ethical, legal, and social implications (ELSI) of, or related to design,
            conduct, and translation of research.
        rpIntendedStudy:
          type: string
          description: ""
        rpMethodsDevelopment:
          type: boolean
          description: |-
            Methods development/validation study: The primary purpose of the use of All of Us data is to
            develop and/or validate specific methods/tools for analyzing or interpreting data (e.g.
            statistical methods for describing data trends, developing more powerful methods to detect
            gene-environment, or other types of interactions in genome-wide association studies).
        rpOtherPopulationDetails:
          type: string
          description: ""
        rpOtherPurpose:
          type: boolean
          description: Other Purpose checkbox (requires rp_other_purpose_details).
        rpOtherPurposeDetails:
          type: string
          description: |-
            If your purpose of use is different from the options listed above, please
            select "Other Purpose" and provide details regarding your purpose of data use here (500 character limit).
            rp_other_purpose should be true if this field is populated.
        rpPopulationHealth:
          type: boolean
          description: |-
            Population Health/Public Health Research: the primary purpose of using All of Us data is to
            investigate health behaviors, outcomes, access, and disparities in populations.
        rpReasonForAllOfUs:
          type: string
          description: ""
        rpReviewRequested:
          type: boolean
          description: |-
            If true, a review has been requested by the Resource Access Board. This
            flag is currently not reset when a review is completed.
        rpScientificApproach:
          type: string
          description: |-
            Answer to the question "What are the scientific approaches you plan to use for your
            study? Describe the datasets, research methods, and tools you will use to answer
            your scientific question(s)."
        rpSocialBehavioral:
          type: boolean
          description: If true, user states the research focuses on the social or
            behavioral phenomena or determinants of health.
        rpTimeRequested:
          type: string
          description: ""
          format: date-time
        workspaceId:
          type: integer
          description: |-
            Primary key of the workspace table in Workbench application database. Along with
            snapshot_timestamp, serves as a pseudo-primary key for this table.
          format: int64
        workspaceNamespace:
          type: string
          description: |-
            The workspace "namespace", which corresponds to the Terra Billing Project ID associated with
            the workspace.
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-09-30T16:18:28-04:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingWorkspaceFreeTierUsage:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        cost:
          type: number
          description: Free tier usage cost for this workspace, in USD.
          format: double
        userId:
          type: integer
          description: ID of the user whose free tier quota was billed for this workspace.
          format: int64
        workspaceId:
          type: integer
          description: ID of the workspace associated with this free tier cost.
          format: int64
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2021-01-05T17:36:27-08:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingCohort:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        cohortId:
          type: integer
          description: Unique ID of this cohort in the application DB. Should be unique
            within each snapshot.
          format: int64
        creationTime:
          type: string
          description: Timestamp for creation of this cohort.
          format: date-time
        creatorId:
          type: integer
          description: User ID of cohort crerator. Should be a foreign key into the
            user table.
          format: int64
        criteria:
          type: string
          description: |-
            JSON serialization of the selection criteria for this cohort. Schema is defined at
            https://github.com/all-of-us/workbench/pull/4076/files.  TODO: update with permanent URL.
        description:
          type: string
          description: User-provided cohort description from the Save Cohort dialog.
        lastModifiedTime:
          type: string
          description: Timestamp of last user modification to the cohort definition.
          format: date-time
        name:
          type: string
          description: User-provided human-readable name for this cohort.
        workspaceId:
          type: integer
          description: |-
            Application workspace ID of the workspace containing this cohort. Should be a foreign
            key into the workspace table.
          format: int64
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-10-09T09:09:12-04:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingInstitution:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        displayName:
          type: string
          description: Human-readable name  for the institution, as shown in the UI.
        institutionId:
          type: integer
          description: |-
            Unique PK for institution table in  application DB. Note that in foreign key relationships,
            the short_name is typically used in place of this identifier.
          format: int64
        organizationTypeEnum:
          $ref: '#/components/schemas/OrganizationType'
        organizationTypeOtherText:
          type: string
          description: |-
            If organization_type_enum is Other, this field describes organization's type. Value is not valid
            otherwise.
        shortName:
          type: string
          description: |-
            A unique string identifier used in the API to map a user affiliation to an institution. (Database
            identifiers are not typically exposed in the workbench API).
        registeredTierRequirement:
          $ref: '#/components/schemas/InstitutionMembershipRequirement'
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-10-05T10:34:34-04:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingNewUserSatisfactionSurvey:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        id:
          type: integer
          description: ID of the survey response.
          format: int64
        userId:
          type: integer
          description: ID of the user who created the survey response.
          format: int64
        created:
          type: string
          description: Time the survey response was created.
          format: date-time
        modified:
          type: string
          description: Time the survey response was last modified.
          format: date-time
        satisfaction:
          $ref: '#/components/schemas/NewUserSatisfactionSurveySatisfaction'
        additionalInfo:
          type: string
          description: Additional information regarding the satisfaction score.
    ReportingUserGeneralDiscoverySource:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        userId:
          type: integer
          format: int64
          description: ID of the user who created the survey response.
        answer:
          type: string
          description: Answer for How did you learn about the All of Us Researcher question when signup.
        otherText:
          type: string
          description: User input when choosing Other
    ReportingUserPartnerDiscoverySource:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        userId:
          type: integer
          format: int64
          description: ID of the user who created the survey response.
        answer:
          type: string
          description: Answer for Did you learn about the All of Us Researcher Workbench from any of these program partners.
        otherText:
          type: string
          description: User input when choosing Other
    ReportingDataset:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        creationTime:
          type: string
          description: Timestamp of dataset creation
          format: date-time
        creatorId:
          type: integer
          description: FK into user table for user who created this dataset
          format: int64
        datasetId:
          type: integer
          description: PK in dataset table
          format: int64
        description:
          type: string
          description: User-provided description for the dataset.
        includesAllParticipants:
          type: boolean
          description: If true, this dataset contains data from all participants available
            instead a single cohort..
        lastModifiedTime:
          type: string
          description: Last user-visible modification to the dataset
          format: date-time
        name:
          type: string
          description: User-provided name for this Dataset. Unique within the owning
            workspace.
        workspaceId:
          type: integer
          description: ID of workspace containing this dataset. FK into workspace
            table.
          format: int64
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-11-18T10:38:12-05:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingDatasetCohort:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        cohortId:
          type: integer
          description: ""
          format: int64
        datasetId:
          type: integer
          description: ""
          format: int64
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-11-10T11:12:09-05:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingDatasetConceptSet:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        conceptSetId:
          type: integer
          description: Unique concept set identifier. FK into concept_set table.
          format: int64
        datasetId:
          type: integer
          description: FK for dataset table.
          format: int64
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-11-10T11:12:09-05:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingDatasetDomainIdValue:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        datasetId:
          type: integer
          description: ""
          format: int64
        domainId:
          type: string
          description: Numerical ID for domain associated with a value (column) name.
        value:
          type: string
          description: Human-readable name in ALL CAPS for this column (value).
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-11-10T11:12:09-05:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingConceptSetConcept:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        conceptId:
          type: integer
          description: ""
          format: int64
        conceptSetId:
          type: integer
          description: ""
          format: int64
      x-aou-note: |-
        This code was generated using reporting-wizard.rb at 2020-11-23T10:38:23-05:00.
        Manual modification should be avoided if possible as this is a one-time generation
        and does not run on every build and updates must be merged manually for now.
    ReportingLeonardoAppUsage:
      allOf:
        - $ref: '#/components/schemas/ReportingBase'
      type: object
      properties:
        appId:
          type: integer
          format: int64
          description: App ID in Leonardo DB
        status:
          type: string
          description: App status in Leonardo DB
        appName:
          type: string
          description: App name, e.g. all-of-us-sas-123
        appType:
          type: string
          description: App type in AoU, e.g. SAS, Cromwell, RStudio, this is extracted from app_name
        createdDate:
          type: string
          description: App creation time
          format: date-time
        startTime:
          type: string
          description: App start time
          format: date-time
        stopTime:
          type: string
          description: App stop time
          format: date-time
        destroyedDate:
          type: string
          description: App deletion time
          format: date-time
        creator:
          type: string
          description: App creator username
        environmentVariables:
          type: string
          description: All environment variables AoU passes to Leo when creating App.
    GenomicExtractionJobListResponse:
      type: object
      properties:
        jobs:
          type: array
          items:
            $ref: '#/components/schemas/GenomicExtractionJob'
    GenomicExtractionJob:
      type: object
      properties:
        genomicExtractionJobId:
          type: integer
          description: Workbench database Id for the job
          format: int64
        datasetName:
          type: string
        cost:
          type: number
          format: currency
        vcfSizeMb:
          type: integer
          description: Size of all the VCF files generated by this extraction job
          format: int64
        outputDir:
          type: string
        status:
          $ref: '#/components/schemas/TerraJobStatus'
        submissionDate:
          type: integer
          description: Submission Timestamp (epoch) according to Terra
          format: int64
        completionTime:
          type: integer
          description: Submission Completion Timestamp (epoch) according to Terra
          format: int64
    TerraJobStatus:
      type: string
      description: Terra job status. Indicates if the Terra Submission and Workflows
        are still running, succeeded, or failed. Effectively a collapsed model of
        Terras Submission status and Workflow status
      enum:
      - RUNNING
      - FAILED
      - SUCCEEDED
      - ABORTED
      - ABORTING
    TierAccessStatus:
      type: string
      description: Whether a user currently has access to a tier
      enum:
      - DISABLED
      - ENABLED
    UserTierEligibility:
      type: object
      properties:
        accessTierShortName:
          type: string
          description: Short name of access tier.
        eligible:
          type: boolean
          description: |-
            User eligibility for tiers is based on their contact emails and their institution's tier
            requirements. This does not mean the user has access to these tiers; to gain
            access, the user must still complete all the necessary access requirement steps for each tier.
    DemographicSurveyV2:
      type: object
      properties:
        completionTime:
          type: string
          description: The time the user most recently completed the survey
          format: date-time
        ethnicCategories:
          type: array
          items:
            $ref: '#/components/schemas/EthnicCategory'
        ethnicityAiAnOtherText:
          type: string
          description: American Indian or Alaska Native /  None of these fully describe
            me, and I want to specify.  Max length 200.
        ethnicityAsianOtherText:
          type: string
          description: Asian / None of these fully describe me, and I want to specify.  Max
            length 200.
        ethnicityBlackOtherText:
          type: string
          description: Black / None of these fully describe me, and I want to specify.  Max
            length 200.
        ethnicityHispanicOtherText:
          type: string
          description: Hispanic / None of these fully describe me, and I want to specify.  Max
            length 200.
        ethnicityMeNaOtherText:
          type: string
          description: Middle Eastern or North African / None of these fully describe
            me, and I want to specify.  Max length 200.
        ethnicityNhPiOtherText:
          type: string
          description: Native Hawaiian or other Pacific Islander / None of these fully
            describe me, and I want to specify.  Max length 200.
        ethnicityWhiteOtherText:
          type: string
          description: White / None of these fully describe me, and I want to specify.  Max
            length 200.
        ethnicityOtherText:
          type: string
          description: None of these fully describe me, and I want to specify.  Max
            length 200.
        genderIdentities:
          type: array
          items:
            $ref: '#/components/schemas/GenderIdentityV2'
        genderOtherText:
          type: string
          description: None of these fully describe me, and I want to specify.  Max
            length 200.
        sexualOrientations:
          type: array
          items:
            $ref: '#/components/schemas/SexualOrientationV2'
        orientationOtherText:
          type: string
          description: None of these fully describe me, and I want to specify.  Max
            length 200.
        sexAtBirth:
          $ref: '#/components/schemas/SexAtBirthV2'
        sexAtBirthOtherText:
          type: string
          description: None of these fully describe me, and I want to specify.  Max
            length 200.
        yearOfBirth:
          type: integer
        yearOfBirthPreferNot:
          type: boolean
        disabilityHearing:
          $ref: '#/components/schemas/YesNoPreferNot'
        disabilitySeeing:
          $ref: '#/components/schemas/YesNoPreferNot'
        disabilityConcentrating:
          $ref: '#/components/schemas/YesNoPreferNot'
        disabilityWalking:
          $ref: '#/components/schemas/YesNoPreferNot'
        disabilityDressing:
          $ref: '#/components/schemas/YesNoPreferNot'
        disabilityErrands:
          $ref: '#/components/schemas/YesNoPreferNot'
        disabilityOtherText:
          type: string
          description: |
            Do you have a physical, cognitive, and/or emotional condition that substantially inhibits one or more life activities not specified through the above questions, and want to share more? Please describe.
        education:
          $ref: '#/components/schemas/EducationV2'
        disadvantaged:
          $ref: '#/components/schemas/YesNoPreferNot'
        surveyComments:
          type: string
          description: |
            Is there any aspect of your identity that we have not covered in the preceding questions that we may want to consider including in future surveys?
    EthnicCategory:
      type: string
      description: Which categories describe you? (Select all that apply). Note, you
        may select more than one group.
      enum:
      - AI_AN
      - AI_AN_AMERICAN_INDIAN
      - AI_AN_ALASKA_NATIVE
      - AI_AN_CENTRAL_SOUTH
      - AI_AN_OTHER
      - ASIAN
      - ASIAN_INDIAN
      - ASIAN_CAMBODIAN
      - ASIAN_CHINESE
      - ASIAN_FILIPINO
      - ASIAN_HMONG
      - ASIAN_JAPANESE
      - ASIAN_KOREAN
      - ASIAN_LAO
      - ASIAN_PAKISTANI
      - ASIAN_VIETNAMESE
      - ASIAN_OTHER
      - BLACK
      - BLACK_AA
      - BLACK_BARBADIAN
      - BLACK_CARIBBEAN
      - BLACK_ETHIOPIAN
      - BLACK_GHANAIAN
      - BLACK_HAITIAN
      - BLACK_JAMAICAN
      - BLACK_LIBERIAN
      - BLACK_NIGERIAN
      - BLACK_SOMALI
      - BLACK_SOUTH_AFRICAN
      - BLACK_OTHER
      - HISPANIC
      - HISPANIC_COLOMBIAN
      - HISPANIC_CUBAN
      - HISPANIC_DOMINICAN
      - HISPANIC_ECUADORIAN
      - HISPANIC_HONDURAN
      - HISPANIC_MEXICAN
      - HISPANIC_PUERTO_RICAN
      - HISPANIC_SALVADORAN
      - HISPANIC_SPANISH
      - HISPANIC_OTHER
      - MENA
      - MENA_AFGHAN
      - MENA_ALGERIAN
      - MENA_EGYPTIAN
      - MENA_IRANIAN
      - MENA_IRAQI
      - MENA_ISRAELI
      - MENA_LEBANESE
      - MENA_MOROCCAN
      - MENA_SYRIAN
      - MENA_TUNISIAN
      - MENA_OTHER
      - NHPI
      - NHPI_CHAMORRO
      - NHPI_CHUUKESE
      - NHPI_FIJIAN
      - NHPI_MARSHALLESE
      - NHPI_HAWAIIAN
      - NHPI_PALAUAN
      - NHPI_SAMOAN
      - NHPI_TAHITIAN
      - NHPI_TONGAN
      - NHPI_OTHER
      - WHITE
      - WHITE_DUTCH
      - WHITE_ENGLISH
      - WHITE_EUROPEAN
      - WHITE_FRENCH
      - WHITE_GERMAN
      - WHITE_IRISH
      - WHITE_ITALIAN
      - WHITE_NORWEGIAN
      - WHITE_POLISH
      - WHITE_SCOTTISH
      - WHITE_SPANISH
      - WHITE_OTHER
      - OTHER
      - PREFER_NOT_TO_ANSWER
    GenderIdentityV2:
      type: string
      description: Which terms best express how you describe your current gender identity?
        (Select all that apply)
      enum:
      - GENDERQUEER
      - MAN
      - NON_BINARY
      - QUESTIONING
      - TRANS_MAN
      - TRANS_WOMAN
      - TWO_SPIRIT
      - WOMAN
      - OTHER
      - PREFER_NOT_TO_ANSWER
    SexualOrientationV2:
      type: string
      description: Which terms best express how you describe your current sexual orientation?
        (Select all that apply)
      enum:
      - ASEXUAL
      - BISEXUAL
      - GAY
      - LESBIAN
      - POLYSEXUAL
      - QUEER
      - QUESTIONING
      - SAME_GENDER
      - STRAIGHT
      - TWO_SPIRIT
      - OTHER
      - PREFER_NOT_TO_ANSWER
    SexAtBirthV2:
      type: string
      description: What was the sex assigned to you at birth, such as on your original
        birth certificate?
      enum:
      - FEMALE
      - INTERSEX
      - MALE
      - OTHER
      - PREFER_NOT_TO_ANSWER
    EducationV2:
      type: string
      description: Highest Level of Education Completed
      enum:
      - NO_EDUCATION
      - GRADES_1_12
      - UNDERGRADUATE
      - COLLEGE_GRADUATE
      - MASTER
      - DOCTORATE
      - PREFER_NOT_TO_ANSWER
    YesNoPreferNot:
      type: string
      enum:
      - 'YES' # quotes needed so Swagger/YAML doesn't autoconvert this to "true"
      - 'NO'  # quotes needed so Swagger/YAML doesn't autoconvert this to "false"
      - PREFER_NOT_TO_ANSWER
    CreateNewUserSatisfactionSurveyWithOneTimeCode:
      type: object
      properties:
        createNewUserSatisfactionSurvey:
          $ref: '#/components/schemas/CreateNewUserSatisfactionSurvey'
        oneTimeCode:
          type: string
          description: One-time code for creating this survey response.
    CreateNewUserSatisfactionSurvey:
      type: object
      properties:
        satisfaction:
          $ref: '#/components/schemas/NewUserSatisfactionSurveySatisfaction'
        additionalInfo:
          type: string
          description: Additional information regarding their satisfaction score
    NewUserSatisfactionSurveySatisfaction:
      type: string
      description: How satisfied the user is with the researcher workbench.
      enum:
      - VERY_UNSATISFIED
      - UNSATISFIED
      - NEUTRAL
      - SATISFIED
      - VERY_SATISFIED
    InitialCreditResponse:
      type: object
      properties:
        expirationBypassed:
          type: boolean
          default: false
          description: When set to true, the user will not be required to spend their
            initial credits within the expiration period.
        eligibleForExtension:
          type: boolean
          description: Whether the workspace's owner is eligible for an extension
        exhausted:
          type: boolean
        expirationEpochMillis:
          type: integer
          format: int64
        extensionEpochMillis:
          type: integer
          format: int64
    VwbEgressEventRequest:
      type: object
      properties:
        incidentCount:
          type: integer
          format: int64
          description: current incident count for the user in the workspace
        vwbWorkspaceId:
          type: string
          description: UUID of a VWB workspace
        vwbEgressEventId:
          type: string
          description: UUID of a VWB egress event
        egressMib:
          type: number
          description: The total amount of egress detected during the window, in mebibytes
            (MiB). This total subsumes the per-machine type egress values provided
            here. The egress threshold is triggered against this value.
          format: double
        egressMibThreshold:
          type: number
          description: The threshold value for which this egress triggered an alert,
            in mebibytes (MiB).
          format: double
        gcpProjectId:
          type: string
          description: The Google Cloud project name associated with the workspace,
            e.g. aou-rw-6b66533d. Always present.
        vmName:
          type: string
          description: The GCE VM that triggered egress alert.
        timeWindowDuration:
          type: integer
          description: The duration of the time window during which the high-egress
            event occurred, in seconds.
          format: int64
        timeWindowStart:
          type: integer
          description: Beginning of the time window, in milliseconds since Epoch.
          format: int64
        userEmail:
          type: string
          description: The user that causes egress alert
    AIANResearchType:
      type: string
      description: Research plan for American Indian or Alaska Native participants
      enum:
        - EXCLUSIVE_AI_AN_POPULATION
        - CASE_CONTROL_AI_AN
        - FINDINGS_BY_AI_AN
        - NO_AI_AN_ANALYSIS
    CreateVwbPodTaskRequest:
      type: object
      properties:
        userName:
          type: string
          description: The user name of the user who is creating the pod

  parameters:
    userId:
      name: userId
      in: path
      required: true
      schema:
        type: integer
        format: int64
    conceptSetId:
      name: conceptSetId
      in: path
      description: Concept set ID
      required: true
      schema:
        type: integer
        format: int64
    dataSetId:
      name: dataSetId
      in: path
      description: Data set ID
      required: true
      schema:
        type: integer
        format: int64
    workspaceNamespace:
      name: workspaceNamespace
      in: path
      description: The Workspace namespace
      required: true
      schema:
        type: string
    terraName:
      name: terraName
      in: path
      description: The Workspace's name in Terra (formerly called "ID" in some contexts - renamed 
        due to confusion with DB IDs, which it is not)
      required: true
      schema:
        type: string
    cohortId:
      name: cohortId
      in: path
      description: Cohort ID
      required: true
      schema:
        type: integer
        format: int64
    cohortReviewId:
      name: cohortReviewId
      in: path
      description: Cohort Review ID
      required: true
      schema:
        type: integer
        format: int64
    cdrVersionId:
      name: cdrVersionId
      in: path
      description: specifies which cdr version
      required: true
      schema:
        type: integer
        format: int64
    participantId:
      name: participantId
      in: path
      description: specifies which participant
      required: true
      schema:
        type: integer
        format: int64
  securitySchemes:
    aou_oauth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: ""
          tokenUrl: /oauth2/token
          scopes: {}
      x-aou-note: |
        Users authenticate with our API using a Google-issued OIDC access token.

        This is a non-standard use of Swagger 2.0's oauth2 type. The aou_auth
        entry under security (below) serves to establish the fact
        that all endpoints are protected. This annotation ensures that client
        libraries know to send bearer tokens when calling, but otherwise only
        provides a minimal OAuth2 implementation. Future Swagger versions may
        provide a better mapping to our authorization and authentication flows.

        We use the OAuth2 authorization code grant with the PKCE extension
        (https://oauth.net/2/pkce/) on public clients
        (https://oauth.net/2/client-types/). However, Google only supports the
        authorization code grant for confidential clients. To enable public client
        access, we provide an endpoint that forwards token-related requests to
        Google with the client secret added.

        Because we do not provide a full OAuth implementation, adding the scope
        property is at best documentation and at worst may lead to unexpected
        behavior. Instead, we document them here.

        Required Google scopes:
        - https://www.googleapis.com/auth/userinfo.email
        - openid
        - https://www.googleapis.com/auth/userinfo.profile

        In addition to the above, the following scope is required for endpoints
        that leverage billing information:
        - https://www.googleapis.com/auth/cloud-billing
x-aou-note: |
  This file is for endpoints we do NOT intend to generate client libraries for
  and advertise to notebook developers. Endpoints we DO want notebook developers to use should
  go in client_api.yaml.

  This file references parameters, paths, and definitions specified in
  client_api.yaml; the two files get merged together into a merged.yaml file at build time.

  If validation fails, gradle:generateWorkbenchApi fails claiming this file does not exist.

  For separate validation (with some false positives), do:
  ./project.rb validate-swagger
