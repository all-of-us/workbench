version: 2.1

# -------------------------
#   ORBS
# -------------------------
# https://circleci.com/orbs/registry/
orbs:
  browser-tools: circleci/browser-tools@1.2.1
  queue: eddiewebb/queue@volatile
  coverage-reporter: codacy/coverage-reporter@13.13.7

# -------------------------
#   PIPELINE PARAMETERS
# -------------------------
parameters:
  circle-service-account:
    type: string
    default: "circle-deploy-account@all-of-us-workbench-test.iam.gserviceaccount.com"
  workbench-image:
    type: string
    default: "us.gcr.io/broad-dsp-gcr-public/workbench:buildimage-0.0.26"
  db-image:
    type: string
    default: "cimg/mysql:5.7"

# -------------------------
#   ANCHORS
# -------------------------
anchors:
  env-default: &env-default
    JAVA_TOOL_OPTIONS: -Xmx2g
    # See: https://support.circleci.com/hc/en-us/articles/360021812453-Common-Android-memory-issues
    GRADLE_OPTS: -Dorg.gradle.daemon=false -Dorg.gradle.workers.max=2 -Dkotlin.incremental=false -Dkotlin.compiler.execution.strategy=in-process
    TERM: dumb

  env-db: &env-db
    MYSQL_ROOT_PASSWORD: root-notasecret

  # Job runs for main branch only
  filter-main-branch: &filter-main-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        only: main

  # Job runs for no branch and only for tags starting with ‘v’
  filter-release-tags: &filter-release-tags
    filters:
      branches:
        ignore: /.*/
      tags:
        # Regex matches Workbench release tag. Example: v5-3-rc1
        only: /^v[0-9]+-[0-9]+-rc[0-9]+$/

  # Job runs for PR branch only
  filter-pr-branch: &filter-pr-branch
    filters:
      tags:
        ignore: /.*/
      branches:
        ignore: main

# -------------------------
#   EXECUTORS
# -------------------------
executors:
  # Default workbench docker image environment which is used in all jobs
  workbench-executor: &workbench-executor
    environment:
      <<: *env-default
    docker:
      - image: << pipeline.parameters.workbench-image >>
    working_directory: ~/workbench

  # Variant of the default executor with a higher heap size. This is currently needed as Junit4 does not
  # release test memory across unit test runs, and certain combinations of tests will trigger OOM errors
  # due to garbage collection timeout. This should be reassessed after upgrading to Junit 5. See RW-6460.
  api-unit-test-executor:
    <<: *workbench-executor
    environment:
      <<: *env-default
      # This still assumes a 4G (medium) machine. This increase is possible for unit tests as they are run
      # as a ~single-process workflow - in other cases using 3GB may starve other processes. For example,
      # this should not be used for the Local API integration test (which starts both a server, and a test process).
      JAVA_TOOL_OPTIONS: -Xmx3g

  # Default workbench environment plus MySQL database docker image
  db-executor:
    docker:
      - image: << pipeline.parameters.workbench-image >>
      - image: << pipeline.parameters.db-image >>
        environment:
          <<: *env-db
    environment:
      <<: *env-default
      <<: *env-db
    working_directory: ~/workbench

  # Environment with browsers that is used to run Puppeteer end-to-end tests
  puppeteer-executor:
    resource_class: medium+
    docker:
      - image: << pipeline.parameters.workbench-image >>
        environment:
          TZ: "America/New_York"
    working_directory: ~/workbench
    environment:
      CI: true
      NODE_ENV: development
      WORKBENCH_ENV: test
      TEST_MODE: integration
      TZ: "America/New_York"

# -------------------------
#   COMMANDS
# Refers to https://circleci.com/docs/2.0/reusing-config/#authoring-reusable-commands
# -------------------------
commands:
  checkout-code:
    description: "git checkout and update submodules"
    steps:
      - checkout
      - run:
          command: git submodule update -f --init --recursive

  deploy-to-staging-command:
    description: "Deploy API and UI to staging App Engine"
    steps:
      - checkout-code
      - attach_workspace:
          at: .
      - gcloud-auth-login
      - deploy:
          working_directory: ~/workbench/deploy
          command: |
            ./project.rb deploy \
              --project all-of-us-rw-staging \
              --account << pipeline.parameters.circle-service-account >> \
              --git-version "${CIRCLE_TAG}" \
              --app-version "${CIRCLE_TAG}" \
              --circle-url "https://circleci.com/workflow-run/${CIRCLE_WORKFLOW_ID}" \
              --key-file ~/workbench/api/circle-sa-key.json \
              --promote
          name: Deploy API and UI to all-of-us-rw-staging App Engine

  gcloud-auth-login:
    description: "Activate CircleCI service account credential"
    parameters:
      with_application_default_credentials:
        description: |
          Whether to apply these credentials for Application Default Credentials (ADC).
          This may be necessary to simulate certain local or server-side auth flows.
          This is applied in addition to the normal behavior of this command, which activates
          credentials e.g. for gcloud or gsutil commands.
        type: boolean
        default: false
    steps:
      - run:
          working_directory: ~/workbench
          command: ci/activate_creds.sh api/circle-sa-key.json
      - when:
          condition: << parameters.with_application_default_credentials >>
          steps:
            - run:
                name: Export application default credentials
                command: |
                  echo 'export GOOGLE_APPLICATION_CREDENTIALS=~/workbench/api/circle-sa-key.json' >> $BASH_ENV
                  source $BASH_ENV
                working_directory: ~/workbench

  halt-test-check:
    description: "Exiting job because code in the following paths have not changed: << parameters.dir_names >> directories"
    parameters:
      dir_names:
        type: string
        default: ""
    steps:
      - run:
          command: |
            if [ ${CIRCLE_BRANCH} != "" ] && [ ${CIRCLE_BRANCH} != "main" ]; then
              diff=$(git diff --name-only $(git merge-base origin/main ${CIRCLE_BRANCH}) -- api/src/main/resources | wc -l | xargs)
              if [ ${diff} -eq 0 ]; then
                changed=false
                for dir_name in << parameters.dir_names >>; do
                  dir_diff=$(git diff --name-only $(git merge-base origin/main ${CIRCLE_BRANCH}) -- ${dir_name} | wc -l | xargs)
                  if [ ${dir_diff} -gt 0 ]; then
                    changed=true
                    break
                  fi
                done
                if [[ $changed = false ]]; then
                  echo "Code in '<< parameters.dir_names >>' directories are not changed. Exiting job."
                  circleci-agent step halt
                fi
              fi
            fi
          name: "Halt job if code in '<< parameters.dir_names >>' directories are not changed"

  launch-local-api:
    description: "Launch local API server"
    steps:
      - run:
          # Watch the port for 2m for MySQL start up
          name: Await MySQL startup
          command: dockerize -wait tcp://127.0.0.1:3306 -timeout 2m
      - run:
          name: Launch local API server
          working_directory: ~/workbench/api
          command: ./project.rb dev-up --nostart-db
          background: true
      - run:
          name: Wait for local API server to start
          command: dockerize -wait tcp://localhost:8081/v1/status -timeout 5m

  launch-local-ui:
    description: "Launch local UI server"
    parameters:
      connect_local_api:
        type: boolean
        default: false
    steps:
      - ui-cache
      - when:
          condition: << parameters.connect_local_api >>
          # connect_local_api = true.  run against Local->Local.
          steps:
            - run:
                name: Launch local UI server
                working_directory: ~/workbench/ui
                command: yarn dev-up-local
                background: true
      - unless:
          condition: << parameters.connect_local_api >>
          # connect_local_api = false.  run against Local->Test.
          steps:
            - run:
                name: Launch local UI server
                working_directory: ~/workbench/ui
                # Start local UI server that connects to "test" api server
                command: yarn dev-up-test
                background: true
      - run: sleep 10 # sleep for 10 seconds
      - run:
          name: "Watch the port for 4m for local UI server start up"
          command: dockerize -wait http://localhost:4200 -timeout 4m

  run-api-test:
    description: "Run api tests, reused in api-*-test jobs"
    parameters:
      additional_steps:
        type: steps
        default: []
    steps:
      - checkout-code
      - halt-test-check:
          dir_names: "api"
      - restore_cache:
          key: v7-gradle-wrapper-{{ .Branch }}-{{ checksum "~/workbench/api/gradle/wrapper/gradle-wrapper.properties" }}
      - restore_cache:
          key: v7-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
      - steps: << parameters.additional_steps >>
      - save_cache:
          paths:
            - ~/.gradle/wrapper
          key: v7-gradle-wrapper-{{ .Branch }}-{{ checksum "~/workbench/api/gradle/wrapper/gradle-wrapper.properties" }}
      - save_cache:
          paths:
            - ~/.gradle/caches
          key: v7-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
      - store_test_results:
          path: ~/workbench/api/build/test-results
      - store_artifacts:
          path: ~/workbench/api/build/reports
          destination: JunitTestResult
          when: always

  ui-cache:
    description: "workbench/ui: yarn install, save and restore cache"
    steps:
      - restore_cache:
          name: "Restore UI cache"
          key: v5-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}
      - gcloud-auth-login
      - run:
          name: "Download Fontawesome Pro license key"
          working_directory: ~/workbench
          command: |
            gsutil cat \
              gs://all-of-us-workbench-test-credentials/dot-npmrc-fontawesome-creds-line.txt \
              >> ~/.npmrc
      - run:
          working_directory: ~/workbench/ui
          command: yarn install --verbose --frozen-lockfile --non-interactive
      - save_cache:
          name: "Save UI cache"
          paths:
            - ~/.cache/yarn
            - ui/node_modules
          key: v5-ui-cache-{{ .Branch }}-{{ checksum "~/workbench/ui/yarn.lock" }}

  gcs-load-test-results:
    description: "Load Puppeteer test results JSON to Google Storage bucket"
    steps:
      - run:
          name: Upload test results json to storage bucket
          working_directory: ~/workbench/e2e/logs
          command: |
            NEW_JSON=circleci-build-${CIRCLE_BUILD_NUM}-${CIRCLE_NODE_INDEX}-test-results.json
            jq -s -c '.[0] * .[1]' test-results.json circleci_parameters.json > ${NEW_JSON}
            # Upload json to storage bucket in all-of-us-workbench-test project.
            STORAGE_BUCKET=gs://circleci-puppeteer-test-results
            gsutil cp ${NEW_JSON} ${STORAGE_BUCKET}
          when: always

  halt-puppeteer-check:
    description: "Stop running Puppeteer e2e tests if halt conditions are met"
    steps:
      - run:
          working_directory: ~/workbench/.circleci
          name: "Check commit message and find changed file names that do not match ignore patterns"
          command: |
            ./skip-e2e-pr-checks.sh
      - halt-test-check:
          # Stop running Puppeteer end-to-end test if code in relevant directories is unchanged.
          dir_names: "ui e2e .circleci"

  puppeteer-access-test-user-setup:
    parameters:
      env_name:
        description: The target environment for run Puppeteer end-to-end test. Must be one of "test", "staging", "local".
        default: "test"
        type: enum
        enum: [ "test", "staging", "local" ]
    steps:
      - gcloud-auth-login
      - run:
          name: "Set environment variable ACCESS_TEST_USER"
          working_directory: ~/workbench/e2e
          command: |
            cp ".env.circleci.<< parameters.env_name >>" .env
            cat .env | awk '{print "export " $0}' >> $BASH_ENV
            source $BASH_ENV
      - run:
          working_directory: ~/workbench/api
          name: Prep the e2e access test user (in Test env) by setting access module timestamps
          command: ./project.rb set-access-module-timestamps --profile-user "${ACCESS_TEST_USER}" --ras-user "${RAS_TEST_USER}"

# -------------------------
#        JOBS
# -------------------------
jobs:
  api-unit-test:
    parallelism: 4
    executor: api-unit-test-executor
    steps:
      - run-api-test:
          additional_steps:
            - run:
                name: Validate Swagger definitions
                working_directory: ~/workbench/api
                command: |
                  if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
                    ./project.rb validate-swagger --project-prop verboseTestLogging=yes
                  fi
            - run:
                name: Run Java api unit tests
                working_directory: ~/workbench/api
                # For script logics and explanation, see README.
                command: |
                  CLASSNAMES=$(circleci tests glob "src/test/java/**/*Test.java" "src/test/java/**/*Test.kt" \
                    | cut -c 1- \
                    | sed 's@src/test/java/@@' \
                    | sed 's@/@.@g' \
                    | sed 's/\.[^.]*$//' \
                    | circleci tests split --split-by=timings --index=$CIRCLE_NODE_INDEX)
                  GRADLE_ARGS=$(echo $CLASSNAMES | awk '{for (i=1; i<=NF; i++) print "--tests", $i }')
                  gradle :test $GRADLE_ARGS
            - run:
                name: Rename Jacoco exec file
                working_directory: ~/workbench/api
                command: |
                  mv "./build/jacoco/test.exec" "./build/jacoco/test_$CIRCLE_NODE_INDEX.exec"
            - run:
                name: Lint Java code
                working_directory: ~/workbench/api
                command: |
                  if [ "$CIRCLE_NODE_INDEX" == 0 ]; then
                    ./gradlew spotlessCheck
                  fi
      - persist_to_workspace:
          root: .
          paths:
            - api

  ui-test-coverage:
    #Jest Coverage Upload
    executor: workbench-executor
    steps:
      - attach_workspace:
            at: /tmp/workspace
      - store_artifacts:
          path: /tmp/workspace/ui/coverage
      - coverage-reporter/send_report:
          coverage-reports: /tmp/workspace/ui/coverage/lcov.info
          project-token: $CODACY_PROJECT_TOKEN

  api-test-coverage:
    #Jacoco runs against test results to get test coverage
    executor: workbench-executor
    steps:
    - run-api-test:
        additional_steps:
        - attach_workspace:
            at: /tmp/workspace
        - run:
            name: Create build directory
            working_directory: ~/workbench/api
            command: |
              mkdir "./build";
        - run:
            name: Copy Jacoco exec files locally
            working_directory: ~/workbench/api
            command: |
              cp -R "/tmp/workspace/api/build/jacoco/" "./build/jacoco/"
        - run:
            name: Generate Jacoco Coverage Report
            working_directory: ~/workbench/api
            command: |
              ./gradlew jacocoTestReport
        - coverage-reporter/send_report:
            coverage-reports: api/build/reports/jacoco/test/jacocoTestReport.xml
            project-token: $CODACY_PROJECT_TOKEN
        - store_artifacts:
            path: ~/workbench/api/build/reports

  api-local-test:
    # The local API server starts two Java processes (the API server and the cron emulator).
    # And other things need memory as well. The medium+ machine has 6GB.
    resource_class: medium+
    executor: db-executor
    steps:
      - run-api-test:
          additional_steps:
            - gcloud-auth-login
            - launch-local-api
            - run:
                working_directory: ~/workbench/api
                command: ./project.rb run-local-api-tests

  api-deps-check:
    executor: workbench-executor
    steps:
      - run-api-test:
          additional_steps:
            - run:
                name: Scan dependencies for vulnerabilities
                working_directory: ~/workbench/api
                command: ./gradlew dependencyCheckAnalyze --info

  api-integration-test:
    executor: workbench-executor
    steps:
      - run-api-test:
          additional_steps:
            - gcloud-auth-login
            - run:
                name: Run Integration Tests
                working_directory: ~/workbench/api
                command: ./project.rb integration

  api-bigquery-test:
    executor: workbench-executor
    steps:
      - run-api-test:
          additional_steps:
            - gcloud-auth-login
            - run:
                name: Run BigQuery tests
                working_directory: ~/workbench/api
                command: ./project.rb bigquerytest

  ui-unit-test:
    executor: workbench-executor
    resource_class: large
    steps:
      - checkout-code
      - halt-test-check:
          dir_names: "ui"
      - run:
          name: Download Swagger CLI
          working_directory: ~/workbench
          command: ruby -r ./aou-utils/swagger.rb -e Workbench::Swagger.download_swagger_codegen_cli
      - ui-cache
      - run:
          name: Yarn deps
          working_directory: ~/workbench/ui
          command: yarn deps
      - run:
          name: Run React jest tests
          working_directory: ~/workbench/ui
          command: NODE_OPTIONS=--max_old_space_size=4096 yarn test --runInBand
      - run:
          name: Build UI with strict compilation
          working_directory: ~/workbench/ui
          command: ./project.rb build --environment test
      - run:
          # Lint last; it's more important to surface test failures early.
          name: Lint typescript
          working_directory: ~/workbench/ui
          command: yarn run lint --max-warnings 0
      - persist_to_workspace:
          root: .
          paths:
            - ui

  # Playground job. Re-run with ssh enabled to play with Circle's machine image.
  playground:
    machine:
      image: ubuntu-2204:2022.04.1
    steps:
      - run:
          name: Echo
          command: |
            echo Hello Circle!

  e2etests-deploy-ui:
    machine:
      image: ubuntu-2204:2022.04.1
    environment:
      PR_SITE_COUNT: 10
    steps:
      - checkout-code
      - halt-test-check:
          dir_names: "ui"
      - run:
          name: Build
          working_directory: ui
          command: |
            set +e
            set -v
            ../.circleci/activate-service-account.sh
            source ../.circleci/PR_SITE_NUM.sh
            export PR_SITE_NUM

            ./src/circle-build.sh
      - run:
          name: Deploy
          working_directory: ui
          command: |
            set +e
            set -v
            ../.circleci/activate-service-account.sh
            source ../.circleci/PR_SITE_NUM.sh
            export PR_SITE_NUM

            ./src/circle-deploy.sh
  e2etests-run:
    machine:
      image: ubuntu-2204:2022.04.1
    environment:
      PR_SITE_COUNT: 10
    steps:
      - checkout-code
      - halt-test-check:
          dir_names: "ui"
      - run:
          name: Run tests
          working_directory: e2ev2
          command: |
            set +e
            set -v
            ../.circleci/activate-service-account.sh
            source ../.circleci/PR_SITE_NUM.sh
            export PR_SITE_NUM

            ./src/circle-run-tests.sh
      - store_artifacts:
          path: e2ev2/screenshots
      - store_artifacts:
          path: api-proxy/api-proxy.log.txt

  ui-deploy-to-test:
    executor: workbench-executor
    resource_class: large
    steps:
      - queue/until_front_of_line:
          job-regex: ^ui-deploy-to-test$
          time: '10' # minutes
      - checkout-code
      - attach_workspace:
          at: .
      - gcloud-auth-login
      - deploy:
          name: Deploy UI to "test" App Engine
          working_directory: ~/workbench/ui
          command: |
            ./project.rb deploy-ui \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circle-service-account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote --quiet

  api-deploy-to-test:
    executor: workbench-executor
    steps:
      - queue/until_front_of_line:
          job-regex: ^api-deploy-to-test$
          time: '10' # minutes
      - checkout-code
      - attach_workspace:
          at: .
      - gcloud-auth-login
      - deploy:
          name: Deploy API to "test" App Engine
          working_directory: ~/workbench/api
          command: |
            ./project.rb deploy \
              --project all-of-us-workbench-test \
              --account << pipeline.parameters.circle-service-account >> \
              --version circle-ci-test \
              --key-file circle-sa-key.json \
              --promote

  # In staging, we deploy all at once in order to track and control the
  # release for a tagged version only. In "test", we maintain individual
  # release jobs for API and UI to allow faster deploys and because we lack
  # a version tag.
  deploy-to-staging:
    executor: workbench-executor
    resource_class: large
    steps:
      - deploy-to-staging-command

  puppeteer-generate-access-tokens:
    executor: puppeteer-executor
    parameters:
      env_name:
        description: The target environment for run Puppeteer end-to-end test. Must be one of "test", "staging", "local".
        default: "test"
        type: enum
        enum: [ "test", "staging", "local" ]
    steps:
      - checkout-code
      # When running on PRs, only UI changes are exercised.
      - when:
          condition:
            equal: [ "local", << parameters.env_name >> ]
          steps:
            - halt-test-check:
                dir_names: "ui"
      - restore_cache:
          name: "Restore api gradle wrapper cache"
          keys:
            - v7-gradle-wrapper-{{ .Branch }}-{{ checksum "~/workbench/api/gradle/wrapper/gradle-wrapper.properties" }}
            - v7-gradle-wrapper-
      - restore_cache:
          name: "Restore api gradle cache"
          keys:
            - v7-gradle-cache-{{ .Branch }}-{{ checksum "~/workbench/api/build.gradle" }}
            - v7-gradle-cache-
      - restore_cache:
          name: "Restore e2e yarn cache"
          keys:
            - v5-e2e-yarn-{{ .Branch }}-{{ arch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}
            - v5-e2e-yarn-
      - run:
          name: "Set environment variables for e2e test users"
          working_directory: ~/workbench/e2e
          command: |
            cp .env.circleci.<< parameters.env_name >> .env
      - gcloud-auth-login:
          # Needed for generate-impersonated-user-token script
          with_application_default_credentials: true
      - run:
          name: "Run script: api/project.rb generate-impersonated-user-tokens"
          working_directory: ~/workbench/e2e
          command: yarn _impersonate-test-users
      - persist_to_workspace:
          root: ~/workbench
          paths:
            - .

  # Run Puppeteer UI tests on deployed "local", "test" or "staging" environment.
  puppeteer-test:
    executor: puppeteer-executor
    parameters:
      env_name:
        description: The target environment for run Puppeteer end-to-end test. Must be one of "test", "staging", "local".
        default: "test"
        type: enum
        enum: ["test", "staging", "local"]
      test_mode:
        description: Switching between "nightly-integration" and normal "integration" test mode
        default: "integration"
        type: enum
        enum: [ "integration", "nightly-integration" ]
      parallel_num:
        type: integer
        default: 1
      optional_steps:
        type: steps
        default: []
      no_output_timeout:
        type: string
        default: 35m
    environment:
      WORKBENCH_ENV: << parameters.env_name >>
      TEST_MODE: << parameters.test_mode >>
    parallelism: << parameters.parallel_num >>
    steps:
      - checkout-code
      # When running on PRs, only UI changes are exercised.
      - when:
          condition:
            equal: [ "local", << parameters.env_name >> ]
          steps:
            - halt-test-check:
                dir_names: "ui"
      # Concurrent puppeteer tests would interfere with each other.
      - queue/until_front_of_line:
          consider-branch: false # when true, fails if CIRCLE_BRANCH isn't defined, such as on main
          job-regex: ^puppeteer-test$
          time: '30' # minutes
      - attach_workspace:
          at: .
      - steps: << parameters.optional_steps >>
      - browser-tools/install-browser-tools
      - restore_cache:
          name: "Restore e2e cache"
          keys:
            - v5-e2e-yarn-{{ .Branch }}-{{ arch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}
      - gcloud-auth-login:
          # Needed for gcs-load-test-results
          with_application_default_credentials: true
      - run:
          name: "Set environment variables for e2e test users"
          working_directory: ~/workbench/e2e
          command: |
            cp .env.circleci.<< parameters.env_name >> .env
            echo "export PASSWORD=$PUPPETEER_USER_PASSWORD" >> "$BASH_ENV"
            source $BASH_ENV
            echo "WORKBENCH_ENV=${WORKBENCH_ENV}"
            echo "TEST_MODE=${TEST_MODE}"
      - when:
          condition:
            equal: [ "local", << parameters.env_name >> ]
          steps:
            - launch-local-ui
      - run:
          name: "Create a file contains test names"
          working_directory: ~/workbench/e2e
          command: yarn jest --listTests | grep -o 'tests/.*.ts$' > e2e_tests.txt
      - run:
          name: "Running Puppeteer e2e tests"
          working_directory: ~/workbench/e2e
          command: |
            TESTS_FILE=$(circleci tests split --split-by=timings e2e_tests.txt)
            yarn test:ci $TESTS_FILE
          no_output_timeout: << parameters.no_output_timeout >>
      - when:
          condition:
            equal: [ "test", << parameters.env_name >> ]
          steps:
            - run:
                name: Create circleci_parameters.json
                working_directory: ~/workbench/e2e
                command: |
                  echo "{ \
                    \"circleBranch\": \"${CIRCLE_BRANCH}\", \
                    \"circleJob\": \"${CIRCLE_JOB}\", \
                    \"circleBuild\": ${CIRCLE_BUILD_NUM}, \
                    \"circleBuildUrl\": \"${CIRCLE_BUILD_URL}\", \
                    \"circleNodeIndex\": ${CIRCLE_NODE_INDEX} \
                    }" > ./logs/circleci_parameters.json
                when: always
      - store_artifacts:
          path: ~/workbench/e2e/logs
          destination: logs
      - store_test_results:
          path: ~/workbench/e2e/logs

  puppeteer-env-setup:
    executor: puppeteer-executor
    steps:
      - checkout-code
      - run:
          working_directory: ~/workbench/e2e
          command: yarn install --frozen-lockfile --non-interactive
      - run:
          name: Build and lint Puppeteer code
          working_directory: ~/workbench/e2e
          command: yarn build && yarn lint
      - save_cache:
          name: "Save e2e cache"
          paths:
            - ~/.cache/yarn
            - ~/workbench/e2e/node_modules
          key: v5-e2e-yarn-{{ .Branch }}-{{ arch }}-{{ checksum "~/workbench/e2e/yarn.lock" }}


workflows:
  build-test-deploy:
    jobs:
      # Always run basic test/lint/compilation (open PRs, main branch merge)
      # Note: by default tags are not picked up.
      - api-local-test
      - api-unit-test
      - ui-unit-test
      - api-bigquery-test
      - api-integration-test
      - api-test-coverage:
          requires:
          - api-unit-test
      - ui-test-coverage:
          requires:
          - ui-unit-test
      # Deploy to "test" on main branch merges
      - api-deploy-to-test:
          <<: *filter-main-branch
          requires:
            - api-unit-test
      - ui-deploy-to-test:
          <<: *filter-main-branch
          requires:
            - ui-unit-test
      # Deploy local UI server connected to "test" API server. Run Puppeteer tests for PR commits only
      - puppeteer-env-setup
      - puppeteer-generate-access-tokens:
          env_name: "local"
      - puppeteer-test:
          <<: *filter-pr-branch
          env_name: "local"
          parallel_num: 5
          optional_steps:
            - halt-puppeteer-check
          requires:
            - puppeteer-env-setup
            - puppeteer-generate-access-tokens
      # On main branch merges, run Puppeteer tests after ui and api deployed to "test" env successfully
      - puppeteer-test:
          parallel_num: 5
          env_name: "test"
          <<: *filter-main-branch
          requires:
            - puppeteer-env-setup
            - puppeteer-generate-access-tokens
            - api-deploy-to-test
            - ui-deploy-to-test
          post-steps:
            - gcs-load-test-results

  playground:
    jobs:
      - playground:
          <<: *filter-pr-branch
  e2etests:
    jobs:
      - e2etests-deploy-ui:
          <<: *filter-pr-branch
      - e2etests-run:
          requires:
            - e2etests-deploy-ui

  deploy-staging:
    jobs:
      - api-local-test:
          <<: *filter-release-tags
      - api-unit-test:
          <<: *filter-release-tags
      - ui-unit-test:
          <<: *filter-release-tags
      - api-bigquery-test:
          <<: *filter-release-tags
      - api-deps-check:
          <<: *filter-release-tags
      - api-integration-test:
          <<: *filter-release-tags
      - deploy-to-staging:
          <<: *filter-release-tags
          requires:
            - api-local-test
            - api-unit-test
            - api-bigquery-test
            - api-deps-check
            - api-integration-test
            - ui-unit-test
      - puppeteer-env-setup:
          <<: *filter-release-tags
      - puppeteer-generate-access-tokens:
          <<: *filter-release-tags
          env_name: "staging"
      - puppeteer-test:
          <<: *filter-release-tags
          parallel_num: 2
          env_name: "staging"
          requires:
            - deploy-to-staging
            - puppeteer-env-setup
            - puppeteer-generate-access-tokens

  nightly-tests:
    triggers:
      - schedule:
          # Run once every day at 4:00AM UTC
          cron: "0 4 * * *"
          filters:
            branches:
              only:
                - main
    jobs:
      - api-bigquery-test
      - puppeteer-env-setup
      - puppeteer-generate-access-tokens:
          env_name: "test"
      - puppeteer-test:
          parallel_num: 4
          test_mode: "nightly-integration"
          optional_steps:
            - puppeteer-access-test-user-setup
          # genomic-extraction-to-vcf.spec takes long time to run.
          no_output_timeout: 90m
          requires:
            - puppeteer-env-setup
            - puppeteer-generate-access-tokens

experimental:
  notify:
    branches:
      only:
        - main
