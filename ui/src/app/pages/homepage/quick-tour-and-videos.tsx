import * as React from 'react';

import {Clickable} from 'app/components/buttons';
import {FlexColumn, FlexRow} from 'app/components/flex';
import {ClrIcon} from 'app/components/icons';
import {Modal} from 'app/components/modals';
import {Scroll} from 'app/icons/scroll';
import colors, {addOpacity} from 'app/styles/colors';
import {reactStyles} from 'app/utils';
import {AnalyticsTracker} from 'app/utils/analytics';
import {useEffect, useRef, useState} from 'react';

import {QuickTourReact} from './quick-tour-modal';

import thumbnail from 'assets/images/QT-thumbnail.svg';
import intro from 'assets/images/intro-workbench.png';
import cohortBuilder from 'assets/images/cohort-builder.png';
import datasetBuilder from 'assets/images/dataset-builder.png';
import snippets from 'assets/images/notebook-code-snippets.png';
import support from 'assets/images/user-support.png';

export const styles = reactStyles({
  quickTourCardsRow: {
    justifyContent: 'flex-start',
    maxHeight: '26rem',
    marginTop: '0.5rem',
    marginBottom: '1rem',
    marginLeft: '-1rem',
    paddingLeft: '1rem',
    position: 'relative'
  },
  quickTourAndVideosLabel: {
    fontSize: 22,
    lineHeight: '34px',
    color: colors.primary,
    paddingRight: '2.3rem',
    fontWeight: 600,
    marginTop: '1rem',
    width: '33%'
  },
});

interface Props {
  showQuickTourInitially: boolean;
}

export const QuickTourAndVideos = (props: Props) => {
  // my first attempt did not work as expected: useState(props.showQuickTourInitially)
  const [showQuickTour, setShowQuickTour] = useState(false);
  useEffect(() => {
    setShowQuickTour(props.showQuickTourInitially);
  }, [props]);

  const [quickTourResourceOffset, setQuickTourResourceOffset] = useState(0);

  const [videoId, setVideoId] = useState(null);

  const openVideo = (id: string) => {
    AnalyticsTracker.Registration.TutorialVideo();
    setVideoId(id);
  };

  // The videoId parameters below are the YouTube ids that get inserted into the src url of the iframe
  const quickTourResources = [
    {
      src: thumbnail,
      onClick: () => setShowQuickTour(true)
    }, {
      src: intro,
      onClick: () => openVideo('NTLJtwLcavo')
    }, {
      src: cohortBuilder,
      onClick: () => openVideo('G6_GG2CJ9mA')
    }, {
      src: datasetBuilder,
      onClick: () => openVideo('cUuDKUxjQoo')
    }, {
      src: snippets,
      onClick: () => openVideo('NvMWBlVyyUU')
    }, {
      src: support,
      onClick: () => openVideo('Ni4PEJVbmSk')
    }
  ];

  // This calculates the limit for quickTourResources items that can be seen without scrolling. Takes the width of the parent element
  // and divides by the width of an individual resource item (276px). The default limit is 4 since the min width of the parent element
  // should be ~1128px
  const quickTourResourcesDiv = useRef<HTMLDivElement>(null);
  const limit = () => quickTourResourcesDiv.current ?
      Math.max(4, Math.floor(quickTourResourcesDiv.current.offsetWidth / 276)) : 4;

  return <React.Fragment>
      {showQuickTour && <QuickTourReact closeFunction={() => setShowQuickTour(false)} />}
      {videoId && <Modal width={900}>
        <div style={{display: 'flex'}}>
            <div style={{flexGrow: 1}}/>
            <Clickable onClick={() => setVideoId(null)}>
                <ClrIcon
                    shape='times'
                    size='24'
                    style={{color: colors.accent, marginBottom: 17}}
                />
            </Clickable>
        </div>
        {/* Embed code generated by YouTube */}
        <iframe
            width='852'
            height='480'
            src={`https://www.youtube.com/embed/${videoId}?rel=0&autoplay=1&modestbranding=1&iv_load_policy=3`}
            frameBorder='0'
            allow='accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture'
            allowFullScreen/>
      </Modal>}

      <div style={{backgroundColor: addOpacity(colors.light, .4).toString()}}>
        <FlexColumn style={{marginLeft: '3%'}}>
            <div style={styles.quickTourAndVideosLabel}>Quick Tour and Videos</div>
            <div ref={quickTourResourcesDiv} style={{display: 'flex', position: 'relative'}}>
                <FlexRow style={styles.quickTourCardsRow}>
                    {quickTourResources.slice(quickTourResourceOffset, quickTourResourceOffset + limit()).map((resource, i) => {
                      return <React.Fragment key={i}>
                            <Clickable onClick={resource.onClick}
                                       data-test-id={'quick-tour-resource-' + (i + quickTourResourceOffset)}>
                                <img style={{width: '11rem', marginRight: '0.5rem'}}
                                     src={resource.src}/>
                            </Clickable>
                        </React.Fragment>;
                    })}
                    {quickTourResourceOffset > 0 && <Scroll
                        data-test-id='scroll-left'
                        dir='left'
                        onClick={() => setQuickTourResourceOffset(quickTourResourceOffset - 1)}
                        style={{left: 0, marginTop: '2rem', position: 'absolute'}}
                    />}
                    {quickTourResourceOffset + limit() < quickTourResources.length && <Scroll
                        data-test-id='scroll-right'
                        dir='right'
                        onClick={() => setQuickTourResourceOffset(quickTourResourceOffset + 1)}
                        style={{marginTop: '2rem', position: 'absolute', right: 0}}
                    />}
                </FlexRow>
            </div>
        </FlexColumn>
    </div>
  </React.Fragment>;
};
